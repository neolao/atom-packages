{"extensions/index":"<h1 id=\"twig-extensions\">Twig Extensions</h1>  <p>The Twig Extensions is a library that provides several useful extensions for Twig. You can find it's code at <a class=\"reference external\" href=\"https://github.com/twigphp/Twig-extensions\">GitHub.com/twigphp/Twig-extensions</a>.</p>  <h2>Installation</h2> <p>This library can be installed via Composer running the following from the command line:</p> <pre>composer require twig/extensions\n</pre> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"text\">Text</a>: Provides useful filters for text manipulation;</li> <li>\n<a class=\"reference internal\" href=\"i18n\">I18n</a>: Adds internationalization support via the <code class=\"notranslate\">gettext</code> library;</li> <li>\n<a class=\"reference internal\" href=\"intl\">Intl</a>: Adds a filter for localization of <code class=\"notranslate\">DateTime</code> objects, numbers and currency;</li> <li>\n<a class=\"reference internal\" href=\"array\">Array</a>: Provides useful filters for array manipulation;</li> <li>\n<a class=\"reference internal\" href=\"date\">Date</a>: Adds a filter for rendering the difference between dates.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/extensions/index.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/extensions/index.html</a>\n  </p>\n</div>\n","index":"<h1 id=\"twig\">Twig</h1> <div class=\"toctree-wrapper compound\"> <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"intro\">Introduction</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"intro#prerequisites\">Prerequisites</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"intro#installation\">Installation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"intro#basic-api-usage\">Basic API Usage</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"installation\">Installation</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"installation#installing-the-twig-php-package\">Installing the Twig PHP package</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"installation#installing-the-c-extension\">Installing the C extension</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"templates\">Twig for Template Designers</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#synopsis\">Synopsis</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#ides-integration\">IDEs Integration</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#variables\">Variables</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#filters\">Filters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#functions\">Functions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#named-arguments\">Named Arguments</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#control-structure\">Control Structure</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#comments\">Comments</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#including-other-templates\">Including other Templates</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#template-inheritance\">Template Inheritance</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#html-escaping\">HTML Escaping</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#escaping\">Escaping</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#macros\">Macros</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#expressions\">Expressions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#whitespace-control\">Whitespace Control</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"templates#extensions\">Extensions</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"api\">Twig for Developers</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api#basics\">Basics</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api#environment-options\">Environment Options</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api#loaders\">Loaders</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api#using-extensions\">Using Extensions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api#built-in-extensions\">Built-in Extensions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api#exceptions\">Exceptions</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"advanced\">Extending Twig</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"advanced#globals\">Globals</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"advanced#filters\">Filters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"advanced#functions\">Functions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"advanced#tests\">Tests</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"advanced#tags\">Tags</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"advanced#creating-an-extension\">Creating an Extension</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"advanced#overloading\">Overloading</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"advanced#testing-an-extension\">Testing an Extension</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"internals\">Twig Internals</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"internals#how-does-twig-work\">How does Twig work?</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"internals#the-lexer\">The Lexer</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"internals#the-parser\">The Parser</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"internals#the-compiler\">The Compiler</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html\">Deprecated Features</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#deprecation-notices\">Deprecation Notices</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#token-parsers\">Token Parsers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#extensions\">Extensions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#pear\">PEAR</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#filters\">Filters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#functions\">Functions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#tests\">Tests</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#tags\">Tags</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#nodes\">Nodes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#interfaces\">Interfaces</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#loaders\">Loaders</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#node-visitors\">Node Visitors</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#globals\">Globals</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/deprecated.html#miscellaneous\">Miscellaneous</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"recipes\">Recipes</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#displaying-deprecation-notices\">Displaying Deprecation Notices</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#making-a-layout-conditional\">Making a Layout conditional</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#making-an-include-dynamic\">Making an Include dynamic</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#overriding-a-template-that-also-extends-itself\">Overriding a Template that also extends itself</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#customizing-the-syntax\">Customizing the Syntax</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#using-dynamic-object-properties\">Using dynamic Object Properties</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#accessing-the-parent-context-in-nested-loops\">Accessing the parent Context in Nested Loops</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#defining-undefined-functions-and-filters-on-the-fly\">Defining undefined Functions and Filters on the Fly</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#validating-the-template-syntax\">Validating the Template Syntax</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#refreshing-modified-templates-when-opcache-or-apc-is-enabled\">Refreshing modified Templates when OPcache or APC is enabled</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#reusing-a-stateful-node-visitor\">Reusing a stateful Node Visitor</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#using-a-database-to-store-templates\">Using a Database to store Templates</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#using-different-template-sources\">Using different Template Sources</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"recipes#loading-a-template-from-a-string\">Loading a Template from a String</a></li> </ul> </li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"coding_standards\">Coding Standards</a></li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"tags/index\">Tags</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/autoescape\"><code class=\"notranslate\">autoescape</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/block\"><code class=\"notranslate\">block</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/do\"><code class=\"notranslate\">do</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/embed\"><code class=\"notranslate\">embed</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/extends\"><code class=\"notranslate\">extends</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/filter\"><code class=\"notranslate\">filter</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/flush\"><code class=\"notranslate\">flush</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/for\"><code class=\"notranslate\">for</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/from\"><code class=\"notranslate\">from</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/if\"><code class=\"notranslate\">if</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/import\"><code class=\"notranslate\">import</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/include\"><code class=\"notranslate\">include</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/macro\"><code class=\"notranslate\">macro</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/sandbox\"><code class=\"notranslate\">sandbox</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/set\"><code class=\"notranslate\">set</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/spaceless\"><code class=\"notranslate\">spaceless</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/use\"><code class=\"notranslate\">use</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tags/verbatim\"><code class=\"notranslate\">verbatim</code></a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"filters/index\">Filters</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/abs\"><code class=\"notranslate\">abs</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/batch\"><code class=\"notranslate\">batch</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/capitalize\"><code class=\"notranslate\">capitalize</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/convert_encoding\"><code class=\"notranslate\">convert_encoding</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/date\"><code class=\"notranslate\">date</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/date_modify\"><code class=\"notranslate\">date_modify</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/default\"><code class=\"notranslate\">default</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/escape\"><code class=\"notranslate\">escape</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/first\"><code class=\"notranslate\">first</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/format\"><code class=\"notranslate\">format</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/join\"><code class=\"notranslate\">join</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/json_encode\"><code class=\"notranslate\">json_encode</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/keys\"><code class=\"notranslate\">keys</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/last\"><code class=\"notranslate\">last</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/length\"><code class=\"notranslate\">length</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/lower\"><code class=\"notranslate\">lower</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/merge\"><code class=\"notranslate\">merge</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/nl2br\"><code class=\"notranslate\">nl2br</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/number_format\"><code class=\"notranslate\">number_format</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/raw\"><code class=\"notranslate\">raw</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/replace\"><code class=\"notranslate\">replace</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/reverse\"><code class=\"notranslate\">reverse</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/round\"><code class=\"notranslate\">round</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/slice\"><code class=\"notranslate\">slice</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/sort\"><code class=\"notranslate\">sort</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/split\"><code class=\"notranslate\">split</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/striptags\"><code class=\"notranslate\">striptags</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/title\"><code class=\"notranslate\">title</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/trim\"><code class=\"notranslate\">trim</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/upper\"><code class=\"notranslate\">upper</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"filters/url_encode\"><code class=\"notranslate\">url_encode</code></a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"functions/index\">Functions</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/attribute\"><code class=\"notranslate\">attribute</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/block\"><code class=\"notranslate\">block</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/constant\"><code class=\"notranslate\">constant</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/cycle\"><code class=\"notranslate\">cycle</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/date\"><code class=\"notranslate\">date</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/dump\"><code class=\"notranslate\">dump</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/include\"><code class=\"notranslate\">include</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/max\"><code class=\"notranslate\">max</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/min\"><code class=\"notranslate\">min</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/parent\"><code class=\"notranslate\">parent</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/random\"><code class=\"notranslate\">random</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/range\"><code class=\"notranslate\">range</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/source\"><code class=\"notranslate\">source</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions/template_from_string\"><code class=\"notranslate\">template_from_string</code></a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"tests/index\">Tests</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tests/constant\"><code class=\"notranslate\">constant</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tests/defined\"><code class=\"notranslate\">defined</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tests/divisibleby\"><code class=\"notranslate\">divisible by</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tests/empty\"><code class=\"notranslate\">empty</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tests/even\"><code class=\"notranslate\">even</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tests/iterable\"><code class=\"notranslate\">iterable</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tests/null\"><code class=\"notranslate\">null</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tests/odd\"><code class=\"notranslate\">odd</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tests/sameas\"><code class=\"notranslate\">same as</code></a></li> </ul> </li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/index.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/index.html</a>\n  </p>\n</div>\n","extensions/text":"<h1 id=\"the-text-extension\">The Text Extension</h1> <p>The Text extension provides the following filters:</p> <ul class=\"simple\"> <li><code class=\"notranslate\">truncate</code></li> <li><code class=\"notranslate\">wordwrap</code></li> </ul>  <h2 id=\"installation\">Installation</h2> <p>First, <a class=\"reference internal\" href=\"index#extensions-install\">install the Extensions library</a>. Next, add the extension to Twig:</p> <pre>$twig-&gt;addExtension(new Twig_Extensions_Extension_Text());\n</pre>   <h2 id=\"wrapping-words\">Wrapping Words</h2> <p>Use the <code class=\"notranslate\">wordwrap</code> filter to split your text in lines with equal length.</p> <pre>{{ \"Lorem ipsum dolor sit amet, consectetur adipiscing\" | wordwrap(10) }}\n</pre> <p>This example would print:</p> <pre>Lorem ipsu\nm dolor si\nt amet, co\nnsectetur\nadipiscing\n</pre> <p>The default separator is \"\\n\", but you can easily change that by providing one:</p> <pre>{{ \"Lorem ipsum dolor sit amet, consectetur adipiscing\" | wordwrap(10, \"zz\\n\") }}\n</pre> <p>This would result in:</p> <pre>Lorem ipsuzz\nm dolor sizz\nt amet, cozz\nnsectetur zz\nadipiscing\n</pre>   <h2 id=\"truncating-text\">Truncating Text</h2> <p>Use the <code class=\"notranslate\">truncate</code> filter to cut off a string after limit is reached</p> <pre>{{ \"Hello World!\" | truncate(5) }}\n</pre> <p>The example would output <code class=\"notranslate\">Hello...</code>, as <code class=\"notranslate\">...</code> is the default separator.</p> <p>You can also tell truncate to preserve whole words by setting the second parameter to <code class=\"notranslate\">true</code>. If the last Word is on the the separator, truncate will print out the whole Word.</p> <pre>{{ \"Hello World!\" | truncate(7, true) }}\n</pre> <p>Here <code class=\"notranslate\">Hello World!</code> would be printed.</p> <p>If you want to change the separator, just set the third parameter to your desired separator.</p> <pre>{{ \"Hello World!\" | truncate(7, false, \"??\") }}\n</pre> <p>This example would print <code class=\"notranslate\">Hello W??</code>.</p>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Twig Extensions\" href=\"index\"> « Twig Extensions </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"The i18n Extension\" href=\"i18n\"> The i18n Extension » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/extensions/text.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/extensions/text.html</a>\n  </p>\n</div>\n","extensions/array":"<h1 id=\"the-array-extension\">The Array Extension</h1> <p>The Array extensions provides the following filters:</p> <ul class=\"simple\"> <li><code class=\"notranslate\">shuffle</code></li> </ul>  <h2 id=\"installation\">Installation</h2> <p>First, <a class=\"reference internal\" href=\"index#extensions-install\">install the Extensions library</a>. Next, add the extension to Twig:</p> <pre>$twig-&gt;addExtension(new Twig_Extensions_Extension_Array());\n</pre>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"The Intl Extension\" href=\"intl\"> « The Intl Extension </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"The Date Extension\" href=\"date\"> The Date Extension » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/extensions/array.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/extensions/array.html</a>\n  </p>\n</div>\n","extensions/date":"<h1 id=\"the-date-extension\">The Date Extension</h1> <p>The <em>Date</em> extension provides the <code class=\"notranslate\">time_diff</code> filter.</p> <p>You need to register this extension before using the <code class=\"notranslate\">time_diff</code> filter:</p> <pre>$twig-&gt;addExtension(new Twig_Extensions_Extension_Date());\n</pre>  <h2 id=\"time-diff\">time_diff</h2> <p>Use the <code class=\"notranslate\">time_diff</code> filter to render the difference between a date and now.</p> <pre>{{ post.published_at|time_diff }}\n</pre> <p>The example above will output a string like <code class=\"notranslate\">4 seconds ago</code> or <code class=\"notranslate\">in 1 month</code>, depending on the filtered date.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <code class=\"notranslate\">DateTime::diff()</code> method for calculating the difference between dates, this means that PHP 5.3+ is required.</p> </div>  <h4 id=\"arguments\">Arguments</h4> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">date</code>: The date for calculate the difference from now. Can be a string or a DateTime instance.</li> <li>\n<code class=\"notranslate\">now</code>: The date that should be used as now. Can be a string or a DateTime instance. Do not set this argument to use current date.</li> </ul>   <h3 id=\"translation\">Translation</h3> <p>To get a translatable output, give a <code class=\"notranslate\">Symfony\\Component\\Translation\\TranslatorInterface</code> as constructor argument. The returned string is formatted as <code class=\"notranslate\">diff.ago.XXX</code> or <code class=\"notranslate\">diff.in.XXX</code> where <code class=\"notranslate\">XXX</code> can be any valid unit: second, minute, hour, day, month, year.</p>     <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"The Array Extension\" href=\"array\"> « The Array Extension </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/extensions/date.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/extensions/date.html</a>\n  </p>\n</div>\n","intro":"<h1 id=\"introduction\">Introduction</h1> <p>This is the documentation for Twig, the flexible, fast, and secure template engine for PHP.</p> <p>If you have any exposure to other text-based template languages, such as Smarty, Django, or Jinja, you should feel right at home with Twig. It's both designer and developer friendly by sticking to PHP's principles and adding functionality useful for templating environments.</p> <p>The key-features are...</p> <ul class=\"simple\"> <li>\n<em>Fast</em>: Twig compiles templates down to plain optimized PHP code. The overhead compared to regular PHP code was reduced to the very minimum.</li> <li>\n<em>Secure</em>: Twig has a sandbox mode to evaluate untrusted template code. This allows Twig to be used as a template language for applications where users may modify the template design.</li> <li>\n<em>Flexible</em>: Twig is powered by a flexible lexer and parser. This allows the developer to define their own custom tags and filters, and to create their own DSL.</li> </ul> <p>Twig is used by many Open-Source projects like Symfony, Drupal8, eZPublish, phpBB, Piwik, OroCRM; and many frameworks have support for it as well like Slim, Yii, Laravel, Codeigniter and Kohana — just to name a few.</p>  <h2 id=\"prerequisites\">Prerequisites</h2> <p>Twig needs at least <strong>PHP 5.2.7</strong> to run.</p>   <h2 id=\"installation\">Installation</h2> <p>The recommended way to install Twig is via Composer:</p> <pre>composer require \"twig/twig:~1.0\"\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">To learn more about the other installation methods, read the <a class=\"reference internal\" href=\"installation\">installation</a> chapter; it also explains how to install the Twig C extension.</p> </div>   <h2 id=\"basic-api-usage\">Basic API Usage</h2> <p>This section gives you a brief introduction to the PHP API for Twig.</p> <pre>require_once '/path/to/vendor/autoload.php';\n\n$loader = new Twig_Loader_Array(array(\n    'index' =&gt; 'Hello {{ name }}!',\n));\n$twig = new Twig_Environment($loader);\n\necho $twig-&gt;render('index', array('name' =&gt; 'Fabien'));\n</pre> <p>Twig uses a loader (<code class=\"notranslate\">Twig_Loader_Array</code>) to locate templates, and an environment (<code class=\"notranslate\">Twig_Environment</code>) to store the configuration.</p> <p>The <code class=\"notranslate\">render()</code> method loads the template passed as a first argument and renders it with the variables passed as a second argument.</p> <p>As templates are generally stored on the filesystem, Twig also comes with a filesystem loader:</p> <pre>$loader = new Twig_Loader_Filesystem('/path/to/templates');\n$twig = new Twig_Environment($loader, array(\n    'cache' =&gt; '/path/to/compilation_cache',\n));\n\necho $twig-&gt;render('index.html', array('name' =&gt; 'Fabien'));\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p>If you are not using Composer, use the Twig built-in autoloader:</p> <pre>require_once '/path/to/lib/Twig/Autoloader.php';\nTwig_Autoloader::register();\n</pre> </div>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Twig\" href=\"index\"> « Twig </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Installation\" href=\"installation\"> Installation » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/intro.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/intro.html</a>\n  </p>\n</div>\n","installation":"<h1 id=\"installation\">Installation</h1> <p>You have multiple ways to install Twig.</p>  <h2 id=\"installing-the-twig-php-package\">Installing the Twig PHP package</h2>  <h3 id=\"installing-via-composer-recommended\">Installing via Composer (recommended)</h3> <p>Install <a class=\"reference external\" href=\"https://getcomposer.org/download/\">Composer</a> and run the following command to get the latest version:</p> <pre>composer require twig/twig:~1.0\n</pre>   <h3 id=\"installing-from-the-tarball-release\">Installing from the tarball release</h3> <ol class=\"arabic simple\"> <li>Download the most recent tarball from the <a class=\"reference external\" href=\"https://github.com/twigphp/Twig/tags\">download page</a>\n</li> <li>Verify the integrity of the tarball <a class=\"reference external\" href=\"http://fabien.potencier.org/article/73/signing-project-releases\">http://fabien.potencier.org/article/73/signing-project-releases</a>\n</li> <li>Unpack the tarball</li> <li>Move the files somewhere in your project</li> </ol>   <h3 id=\"installing-the-development-version\">Installing the development version</h3> <pre>git clone git://github.com/twigphp/Twig.git\n</pre>   <h3 id=\"installing-the-pear-package\">Installing the PEAR package</h3>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Using PEAR for installing Twig is deprecated and Twig 1.15.1 was the last version published on the PEAR channel; use Composer instead.</p> </div> <pre>pear channel-discover pear.twig-project.org\npear install twig/Twig\n</pre>    <h2 id=\"installing-the-c-extension\">Installing the C extension</h2> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.4: </span>The C extension was added in Twig 1.4.</div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The C extension is <strong>optional</strong> but it brings some nice performance improvements. Note that the extension is not a replacement for the PHP code; it only implements a small part of the PHP code to improve the performance at runtime; you must still install the regular PHP code.</p> </div> <p>Twig comes with a C extension that enhances the performance of the Twig runtime engine; install it like any other PHP extensions:</p> <pre>cd ext/twig\nphpize\n./configure\nmake\nmake install\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>You can also install the C extension via PEAR (note that this method is deprecated and newer versions of Twig are not available on the PEAR channel):</p> <pre>pear channel-discover pear.twig-project.org\npear install twig/CTwig\n</pre> </div> <p>For Windows:</p> <ol class=\"arabic simple\"> <li>Setup the build environment following the <a class=\"reference external\" href=\"https://wiki.php.net/internals/windows/stepbystepbuild\">PHP documentation</a>\n</li> <li>Put Twig's C extension source code into <code class=\"notranslate\">C:\\php-sdk\\phpdev\\vcXX\\x86\\php-source-directory\\ext\\twig</code>\n</li> <li>Use the <code class=\"notranslate\">configure --disable-all --enable-cli --enable-twig=shared</code> command instead of step 14</li> <li><code class=\"notranslate\">nmake</code></li> <li>Copy the <code class=\"notranslate\">C:\\php-sdk\\phpdev\\vcXX\\x86\\php-source-directory\\Release_TS\\php_twig.dll</code> file to your PHP setup.</li> </ol>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p>For Windows ZendServer, ZTS is not enabled as mentioned in <a class=\"reference external\" href=\"http://www.zend.com/en/products/server/faq#faqD6\">Zend Server FAQ</a>.</p> <p>You have to use <code class=\"notranslate\">configure --disable-all --disable-zts --enable-cli\n--enable-twig=shared</code> to be able to build the twig C extension for ZendServer.</p> <p class=\"last\">The built DLL will be available in <code class=\"notranslate\">C:\\\\php-sdk\\\\phpdev\\\\vcXX\\\\x86\\\\php-source-directory\\\\Release</code></p> </div> <p>Finally, enable the extension in your <code class=\"notranslate\">php.ini</code> configuration file:</p> <pre>extension=twig.so #For Unix systems\nextension=php_twig.dll #For Windows systems\n</pre> <p>And from now on, Twig will automatically compile your templates to take advantage of the C extension. Note that this extension does not replace the PHP code but only provides an optimized version of the <code class=\"notranslate\">Twig_Template::getAttribute()</code> method.</p>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Introduction\" href=\"intro\"> « Introduction </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Twig for Template Designers\" href=\"templates\"> Twig for Template Designers » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/installation.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/installation.html</a>\n  </p>\n</div>\n","extensions/intl":"<h1 id=\"the-intl-extension\">The Intl Extension</h1> <p>The <em>Intl</em> extensions provides the <code class=\"notranslate\">localizeddate</code>, <code class=\"notranslate\">localizednumber</code> and <code class=\"notranslate\">localizedcurrency</code> filters.</p>  <h2 id=\"installation\">Installation</h2> <p>First, <a class=\"reference internal\" href=\"index#extensions-install\">install the Extensions library</a>. Next, add the extension to Twig:</p> <pre>$twig-&gt;addExtension(new Twig_Extensions_Extension_Intl());\n</pre>   <h2 id=\"localizeddate\">localizeddate</h2> <p>Use the <code class=\"notranslate\">localizeddate</code> filter to format dates into a localized string representating the date.</p> <pre>{{ post.published_at|localizeddate('medium', 'none', locale) }}\n</pre> <p>The <code class=\"notranslate\">localizeddate</code> filter accepts strings (it must be in a format supported by the <a class=\"reference external\" href=\"http://php.net/strtotime\">strtotime</a> function), <a class=\"reference external\" href=\"http://php.net/DateTime\">DateTime</a> instances, or <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Unix_time\">Unix timestamps</a>.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/manual/en/intldateformatter.create.php\">IntlDateFormatter::create()</a> function for the date.</p> </div>  <h4 id=\"arguments\">Arguments</h4> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">date_format</code>: The date format. Choose one of these formats:<ul> <li>'none': <a class=\"reference external\" href=\"http://php.net/manual/en/class.intldateformatter.php#intldateformatter.constants.none\">IntlDateFormatter::NONE</a>\n</li> <li>'short': <a class=\"reference external\" href=\"http://php.net/manual/en/class.intldateformatter.php#intldateformatter.constants.short\">IntlDateFormatter::SHORT</a>\n</li> <li>'medium': <a class=\"reference external\" href=\"http://php.net/manual/en/class.intldateformatter.php#intldateformatter.constants.medium\">IntlDateFormatter::MEDIUM</a>\n</li> <li>'long': <a class=\"reference external\" href=\"http://php.net/manual/en/class.intldateformatter.php#intldateformatter.constants.long\">IntlDateFormatter::LONG</a>\n</li> <li>'full': <a class=\"reference external\" href=\"http://php.net/manual/en/class.intldateformatter.php#intldateformatter.constants.full\">IntlDateFormatter::FULL</a>\n</li> </ul> </li> <li>\n<code class=\"notranslate\">time_format</code>: The time format. Same formats possible as above.</li> <li>\n<code class=\"notranslate\">locale</code>: The locale used for the format. If <code class=\"notranslate\">NULL</code> is given, Twig will use <code class=\"notranslate\">Locale::getDefault()</code>\n</li> <li>\n<code class=\"notranslate\">timezone</code>: The date timezone</li> <li>\n<code class=\"notranslate\">format</code>: Optional pattern to use when formatting or parsing. Possible patterns are documented in the <a class=\"reference external\" href=\"http://userguide.icu-project.org/formatparse/datetime\">ICU user guide</a>.</li> </ul>    <h2 id=\"localizednumber\">localizednumber</h2> <p>Use the <code class=\"notranslate\">localizednumber</code> filter to format numbers into a localized string representating the number.</p> <pre>{{ product.quantity|localizednumber }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/manual/en/numberformatter.create.php\">NumberFormatter::create()</a> function for the number.</p> </div>  <h4 id=\"id1\">Arguments</h4> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">style</code>: Optional date format (default: 'decimal'). Choose one of these formats:<ul> <li>'decimal': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.decimal\">NumberFormatter::DECIMAL</a>\n</li> <li>'currency': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.currency\">NumberFormatter::CURRENCY</a>\n</li> <li>'percent': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.percent\">NumberFormatter::PERCENT</a>\n</li> <li>'scientific': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.scientific\">NumberFormatter::SCIENTIFIC</a>\n</li> <li>'spellout': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.spellout\">NumberFormatter::SPELLOUT</a>\n</li> <li>'ordinal': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.ordinal\">NumberFormatter::ORDINAL</a>\n</li> <li>'duration': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.duration\">NumberFormatter::DURATION</a>\n</li> </ul> </li> <li>\n<code class=\"notranslate\">type</code>: Optional formatting type to use (default: 'default'). Choose one of these types:<ul> <li>'default': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.type-default\">NumberFormatter::TYPE_DEFAULT</a>\n</li> <li>'int32': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.type-int32\">NumberFormatter::TYPE_INT32</a>\n</li> <li>'int64': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.type-int64\">NumberFormatter::TYPE_INT64</a>\n</li> <li>'double': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.type-double\">NumberFormatter::TYPE_DOUBLE</a>\n</li> <li>'currency': <a class=\"reference external\" href=\"http://php.net/manual/en/class.numberformatter.php#numberformatter.constants.type-currency\">NumberFormatter::TYPE_CURRENCY</a>\n</li> </ul> </li> <li>\n<code class=\"notranslate\">locale</code>: The locale used for the format. If <code class=\"notranslate\">NULL</code> is given, Twig will use <code class=\"notranslate\">Locale::getDefault()</code>\n</li> </ul>    <h2 id=\"localizedcurrency\">localizedcurrency</h2> <p>Use the <code class=\"notranslate\">localizedcurrency</code> filter to format a currency value into a localized string.</p> <pre>{{ product.price|localizedcurrency('EUR') }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/manual/en/numberformatter.create.php\">NumberFormatter::create()</a> function for the number.</p> </div>  <h4 id=\"id2\">Arguments</h4> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">currency</code>: The 3-letter ISO 4217 currency code indicating the currency to use.</li> <li>\n<code class=\"notranslate\">locale</code>: The locale used for the format. If <code class=\"notranslate\">NULL</code> is given, Twig will use <code class=\"notranslate\">Locale::getDefault()</code>\n</li> </ul>     <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"The i18n Extension\" href=\"i18n\"> « The i18n Extension </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"The Array Extension\" href=\"array\"> The Array Extension » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/extensions/intl.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/extensions/intl.html</a>\n  </p>\n</div>\n","tags/block":"<h1 id=\"block\">block</h1> <p>Blocks are used for inheritance and act as placeholders and replacements at the same time. They are documented in detail in the documentation for the <a class=\"reference internal\" href=\"extends\">extends</a> tag.</p> <p>Block names should consist of alphanumeric characters, and underscores. Dashes are not permitted.</p>  \n<div class=\"admonition admonition-seealso\">\n<a class=\"reference internal\" href=\"../functions/block\">block</a>, <a class=\"reference internal\" href=\"../functions/parent\">parent</a>, <a class=\"reference internal\" href=\"use\">use</a>, <a class=\"reference internal\" href=\"extends\">extends</a>\n</div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"autoescape\" href=\"autoescape\"> « autoescape </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"do\" href=\"do\"> do » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/block.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/block.html</a>\n  </p>\n</div>\n","tags/for":"<h1 id=\"for\">for</h1> <p>Loop over each item in a sequence. For example, to display a list of users provided in a variable called <code class=\"notranslate\">users</code>:</p> <pre>&lt;h1&gt;Members&lt;/h1&gt;\n&lt;ul&gt;\n    {% for user in users %}\n        &lt;li&gt;{{ user.username|e }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">A sequence can be either an array or an object implementing the <code class=\"notranslate\">Traversable</code> interface.</p> </div> <p>If you do need to iterate over a sequence of numbers, you can use the <code class=\"notranslate\">..</code> operator:</p> <pre>{% for i in 0..10 %}\n    * {{ i }}\n{% endfor %}\n</pre> <p>The above snippet of code would print all numbers from 0 to 10.</p> <p>It can be also useful with letters:</p> <pre>{% for letter in 'a'..'z' %}\n    * {{ letter }}\n{% endfor %}\n</pre> <p>The <code class=\"notranslate\">..</code> operator can take any expression at both sides:</p> <pre>{% for letter in 'a'|upper..'z'|upper %}\n    * {{ letter }}\n{% endfor %}\n</pre>  <h2 id=\"the-loop-variable\">The <cite>loop</cite> variable</h2> <p>Inside of a <code class=\"notranslate\">for</code> loop block you can access some special variables:</p> <table border=\"1\" class=\"docutils\"> <colgroup> <col width=\"26%\"> <col width=\"74%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Variable</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"notranslate\">loop.index</code></td> <td>The current iteration of the loop. (1 indexed)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"notranslate\">loop.index0</code></td> <td>The current iteration of the loop. (0 indexed)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"notranslate\">loop.revindex</code></td> <td>The number of iterations from the end of the loop (1 indexed)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"notranslate\">loop.revindex0</code></td> <td>The number of iterations from the end of the loop (0 indexed)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"notranslate\">loop.first</code></td> <td>True if first iteration</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"notranslate\">loop.last</code></td> <td>True if last iteration</td> </tr> <tr class=\"row-even\">\n<td><code class=\"notranslate\">loop.length</code></td> <td>The number of items in the sequence</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"notranslate\">loop.parent</code></td> <td>The parent context</td> </tr> </tbody> </table> <pre>{% for user in users %}\n    {{ loop.index }} - {{ user.username }}\n{% endfor %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"notranslate\">loop.length</code>, <code class=\"notranslate\">loop.revindex</code>, <code class=\"notranslate\">loop.revindex0</code>, and <code class=\"notranslate\">loop.last</code> variables are only available for PHP arrays, or objects that implement the <code class=\"notranslate\">Countable</code> interface. They are also not available when looping with a condition.</p> </div> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.2: </span>The <code class=\"notranslate\">if</code> modifier support has been added in Twig 1.2.</div>   <h2 id=\"adding-a-condition\">Adding a condition</h2> <p>Unlike in PHP, it's not possible to <code class=\"notranslate\">break</code> or <code class=\"notranslate\">continue</code> in a loop. You can however filter the sequence during iteration which allows you to skip items. The following example skips all the users which are not active:</p> <pre>&lt;ul&gt;\n    {% for user in users if user.active %}\n        &lt;li&gt;{{ user.username|e }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</pre> <p>The advantage is that the special loop variable will count correctly thus not counting the users not iterated over. Keep in mind that properties like <code class=\"notranslate\">loop.last</code> will not be defined when using loop conditions.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Using the <code class=\"notranslate\">loop</code> variable within the condition is not recommended as it will probably not be doing what you expect it to. For instance, adding a condition like <code class=\"notranslate\">loop.index &gt; 4</code> won't work as the index is only incremented when the condition is true (so the condition will never match).</p> </div>   <h2 id=\"the-else-clause\">The <cite>else</cite> Clause</h2> <p>If no iteration took place because the sequence was empty, you can render a replacement block by using <code class=\"notranslate\">else</code>:</p> <pre>&lt;ul&gt;\n    {% for user in users %}\n        &lt;li&gt;{{ user.username|e }}&lt;/li&gt;\n    {% else %}\n        &lt;li&gt;&lt;em&gt;no user found&lt;/em&gt;&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</pre>   <h2 id=\"iterating-over-keys\">Iterating over Keys</h2> <p>By default, a loop iterates over the values of the sequence. You can iterate on keys by using the <code class=\"notranslate\">keys</code> filter:</p> <pre>&lt;h1&gt;Members&lt;/h1&gt;\n&lt;ul&gt;\n    {% for key in users|keys %}\n        &lt;li&gt;{{ key }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</pre>   <h2 id=\"iterating-over-keys-and-values\">Iterating over Keys and Values</h2> <p>You can also access both keys and values:</p> <pre>&lt;h1&gt;Members&lt;/h1&gt;\n&lt;ul&gt;\n    {% for key, user in users %}\n        &lt;li&gt;{{ key }}: {{ user.username|e }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</pre>   <h2 id=\"iterating-over-a-subset\">Iterating over a Subset</h2> <p>You might want to iterate over a subset of values. This can be achieved using the <a class=\"reference internal\" href=\"../filters/slice\">slice</a> filter:</p> <pre>&lt;h1&gt;Top Ten Members&lt;/h1&gt;\n&lt;ul&gt;\n    {% for user in users|slice(0, 10) %}\n        &lt;li&gt;{{ user.username|e }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</pre>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"flush\" href=\"flush\"> « flush </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"from\" href=\"from\"> from » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/for.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/for.html</a>\n  </p>\n</div>\n","extensions/i18n":"<h1 id=\"the-i18n-extension\">The i18n Extension</h1>  <h2 id=\"configuration\">Configuration</h2> <p>The <code class=\"notranslate\">i18n</code> extension adds <a class=\"reference external\" href=\"http://www.php.net/gettext\">gettext</a> support to Twig. It defines one tag, <code class=\"notranslate\">trans</code>.</p> <p>To use it, first, <a class=\"reference internal\" href=\"index#extensions-install\">install the Extensions library</a>.</p> <p>You need to register this extension before using the <code class=\"notranslate\">trans</code> block:</p> <pre>$twig-&gt;addExtension(new Twig_Extensions_Extension_I18n());\n</pre> <p>Note that you must configure the <code class=\"notranslate\">gettext</code> extension before rendering any internationalized template. Here is a simple configuration example from the PHP <a class=\"reference external\" href=\"http://fr.php.net/manual/en/function.gettext.php\">documentation</a>:</p> <pre>// Set language to French\nputenv('LC_ALL=fr_FR');\nsetlocale(LC_ALL, 'fr_FR');\n\n// Specify the location of the translation tables\nbindtextdomain('myAppPhp', 'includes/locale');\nbind_textdomain_codeset('myAppPhp', 'UTF-8');\n\n// Choose domain\ntextdomain('myAppPhp');\n</pre>  \n<div class=\"admonition admonition-caution\">\n<p class=\"first admonition-title\">Caution</p> <p class=\"last\">The <code class=\"notranslate\">i18n</code> extension only works if the PHP <a class=\"reference external\" href=\"http://www.php.net/gettext\">gettext</a> extension is enabled.</p> </div>   <h2 id=\"usage\">Usage</h2> <p>Use the <code class=\"notranslate\">trans</code> block to mark parts in the template as translatable:</p> <pre>{% trans \"Hello World!\" %}\n\n{% trans string_var %}\n\n{% trans %}\n    Hello World!\n{% endtrans %}\n</pre> <p>In a translatable string, you can embed variables:</p> <pre>{% trans %}\n    Hello {{ name }}!\n{% endtrans %}\n</pre> <p>During the gettext lookup these placeholders are converted. <code class=\"notranslate\">{{ name }}</code> becomes <code class=\"notranslate\">%name%</code> so the gettext <code class=\"notranslate\">msgid</code> for this string would be <code class=\"notranslate\">Hello %name%!</code>.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\"><code class=\"notranslate\">{% trans \"Hello {{ name }}!\" %}</code> is not a valid statement.</p> </div> <p>If you need to apply filters to the variables, you first need to assign the result to a variable:</p> <pre>{% set name = name|capitalize %}\n\n{% trans %}\n    Hello {{ name }}!\n{% endtrans %}\n</pre> <p>To pluralize a translatable string, use the <code class=\"notranslate\">plural</code> block:</p> <pre>{% trans %}\n    Hey {{ name }}, I have one apple.\n{% plural apple_count %}\n    Hey {{ name }}, I have {{ count }} apples.\n{% endtrans %}\n</pre> <p>The <code class=\"notranslate\">plural</code> tag should provide the <code class=\"notranslate\">count</code> used to select the right string. Within the translatable string, the special <code class=\"notranslate\">count</code> variable always contain the count value (here the value of <code class=\"notranslate\">apple_count</code>).</p> <p>To add notes for translators, use the <code class=\"notranslate\">notes</code> block:</p> <pre>{% trans %}\n    Hey {{ name }}, I have one apple.\n{% plural apple_count %}\n    Hey {{ name }}, I have {{ count }} apples.\n{% notes %}\n    This is shown in the user menu. This string should be shorter than 30 chars\n{% endtrans %}\n</pre> <p>You can use <code class=\"notranslate\">notes</code> with or without <code class=\"notranslate\">plural</code>. Once you get your templates compiled you should configure the <code class=\"notranslate\">gettext</code> parser to get something like this: <code class=\"notranslate\">xgettext --add-comments=notes</code></p> <p>Within an expression or in a tag, you can use the <code class=\"notranslate\">trans</code> filter to translate simple strings or variables:</p> <pre>{{ var|default(default_value|trans) }}\n</pre>   <h2 id=\"complex-translations-within-an-expression-or-tag\">Complex Translations within an Expression or Tag</h2> <p>Translations can be done with both the <code class=\"notranslate\">trans</code> tag and the <code class=\"notranslate\">trans</code> filter. The filter is less powerful as it only works for simple variables or strings. For more complex scenario, like pluralization, you can use a two-step strategy:</p> <pre>{# assign the translation to a temporary variable #}\n{% set default_value %}\n    {% trans %}\n      Hey {{ name }}, I have one apple.\n    {% plural apple_count %}\n      Hey {{ name }}, I have {{ count }} apples.\n    {% endtrans %}\n{% endset %}\n\n{# use the temporary variable within an expression #}\n{{ var|default(default_value|trans) }}\n</pre>   <h2 id=\"extracting-template-strings\">Extracting Template Strings</h2> <p>If you use the Twig I18n extension, you will probably need to extract the template strings at some point. Unfortunately, the <code class=\"notranslate\">xgettext</code> utility does not understand Twig templates natively. But there is a simple workaround: as Twig converts templates to PHP files, you can use <code class=\"notranslate\">xgettext</code> on the template cache instead.</p> <p>Create a script that forces the generation of the cache for all your templates. Here is a simple example to get you started:</p> <pre>$tplDir = dirname(__FILE__).'/templates';\n$tmpDir = '/tmp/cache/';\n$loader = new Twig_Loader_Filesystem($tplDir);\n\n// force auto-reload to always have the latest version of the template\n$twig = new Twig_Environment($loader, array(\n    'cache' =&gt; $tmpDir,\n    'auto_reload' =&gt; true\n));\n$twig-&gt;addExtension(new Twig_Extensions_Extension_I18n());\n// configure Twig the way you want\n\n// iterate over all your templates\nforeach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($tplDir), RecursiveIteratorIterator::LEAVES_ONLY) as $file)\n{\n    // force compilation\n    if ($file-&gt;isFile()) {\n        $twig-&gt;loadTemplate(str_replace($tplDir.'/', '', $file));\n    }\n}\n</pre> <p>Use the standard <code class=\"notranslate\">xgettext</code> utility as you would have done with plain PHP code:</p> <pre>xgettext --default-domain=messages -p ./locale --from-code=UTF-8 -n --omit-header -L PHP /tmp/cache/*.php\n</pre> <p>Another workaround is to use <a class=\"reference external\" href=\"https://github.com/umpirsky/Twig-Gettext-Extractor\">Twig Gettext Extractor</a> and extract the template strings right from <a class=\"reference external\" href=\"http://www.poedit.net/\">Poedit</a>.</p>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"The Text Extension\" href=\"text\"> « The Text Extension </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"The Intl Extension\" href=\"intl\"> The Intl Extension » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/extensions/i18n.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/extensions/i18n.html</a>\n  </p>\n</div>\n","tags/index":"<h1 id=\"tags\">Tags</h1> <div class=\"toctree-wrapper compound\"> <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"autoescape\"><code class=\"notranslate\">autoescape</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"block\"><code class=\"notranslate\">block</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"do\"><code class=\"notranslate\">do</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"embed\"><code class=\"notranslate\">embed</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"extends\"><code class=\"notranslate\">extends</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"filter\"><code class=\"notranslate\">filter</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"flush\"><code class=\"notranslate\">flush</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"for\"><code class=\"notranslate\">for</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"from\"><code class=\"notranslate\">from</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"if\"><code class=\"notranslate\">if</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"import\"><code class=\"notranslate\">import</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"include\"><code class=\"notranslate\">include</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"macro\"><code class=\"notranslate\">macro</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"sandbox\"><code class=\"notranslate\">sandbox</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"set\"><code class=\"notranslate\">set</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"spaceless\"><code class=\"notranslate\">spaceless</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"use\"><code class=\"notranslate\">use</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"verbatim\"><code class=\"notranslate\">verbatim</code></a></li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/index.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/index.html</a>\n  </p>\n</div>\n","tags/filter":"<h1 id=\"filter\">filter</h1> <p>Filter sections allow you to apply regular Twig filters on a block of template data. Just wrap the code in the special <code class=\"notranslate\">filter</code> section:</p> <pre>{% filter upper %}\n    This text becomes uppercase\n{% endfilter %}\n</pre> <p>You can also chain filters:</p> <pre>{% filter lower|escape %}\n    &lt;strong&gt;SOME TEXT&lt;/strong&gt;\n{% endfilter %}\n\n{# outputs \"&amp;lt;strong&amp;gt;some text&amp;lt;/strong&amp;gt;\" #}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"extends\" href=\"extends\"> « extends </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"flush\" href=\"flush\"> flush » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/filter.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/filter.html</a>\n  </p>\n</div>\n","tags/flush":"<h1 id=\"flush\">flush</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.5: </span>The flush tag was added in Twig 1.5.</div> <p>The <code class=\"notranslate\">flush</code> tag tells Twig to flush the output buffer:</p> <pre>{% flush %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/flush\">flush</a> function.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"filter\" href=\"filter\"> « filter </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"for\" href=\"for\"> for » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/flush.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/flush.html</a>\n  </p>\n</div>\n","tags/from":"<h1 id=\"from\">from</h1> <p>The <code class=\"notranslate\">from</code> tag imports <a class=\"reference internal\" href=\"macro\">macro</a> names into the current namespace. The tag is documented in detail in the documentation for the <a class=\"reference internal\" href=\"import\">import</a> tag.</p>  \n<div class=\"admonition admonition-seealso\">\n<p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"macro\">macro</a>, <a class=\"reference internal\" href=\"import\">import</a></p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"for\" href=\"for\"> « for </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"if\" href=\"if\"> if » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/from.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/from.html</a>\n  </p>\n</div>\n","tags/if":"<h1 id=\"if\">if</h1> <p>The <code class=\"notranslate\">if</code> statement in Twig is comparable with the if statements of PHP.</p> <p>In the simplest form you can use it to test if an expression evaluates to <code class=\"notranslate\">true</code>:</p> <pre>{% if online == false %}\n    &lt;p&gt;Our website is in maintenance mode. Please, come back later.&lt;/p&gt;\n{% endif %}\n</pre> <p>You can also test if an array is not empty:</p> <pre>{% if users %}\n    &lt;ul&gt;\n        {% for user in users %}\n            &lt;li&gt;{{ user.username|e }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endif %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">If you want to test if the variable is defined, use <code class=\"notranslate\">if users is\ndefined</code> instead.</p> </div> <p>You can also use <code class=\"notranslate\">not</code> to check for values that evaluate to <code class=\"notranslate\">false</code>:</p> <pre>{% if not user.subscribed %}\n    &lt;p&gt;You are not subscribed to our mailing list.&lt;/p&gt;\n{% endif %}\n</pre> <p>For multiple conditions, <code class=\"notranslate\">and</code> and <code class=\"notranslate\">or</code> can be used:</p> <pre>{% if temperature &gt; 18 and temperature &lt; 27 %}\n    &lt;p&gt;It's a nice day for a walk in the park.&lt;/p&gt;\n{% endif %}\n</pre> <p>For multiple branches <code class=\"notranslate\">elseif</code> and <code class=\"notranslate\">else</code> can be used like in PHP. You can use more complex <code class=\"notranslate\">expressions</code> there too:</p> <pre>{% if kenny.sick %}\n    Kenny is sick.\n{% elseif kenny.dead %}\n    You killed Kenny! You bastard!!!\n{% else %}\n    Kenny looks okay --- so far\n{% endif %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>The rules to determine if an expression is <code class=\"notranslate\">true</code> or <code class=\"notranslate\">false</code> are the same as in PHP; here are the edge cases rules:</p> <table border=\"1\" class=\"last docutils\"> <colgroup> <col width=\"52%\"> <col width=\"48%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Value</th> <th class=\"head\">Boolean evaluation</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>empty string</td> <td>false</td> </tr> <tr class=\"row-odd\">\n<td>numeric zero</td> <td>false</td> </tr> <tr class=\"row-even\">\n<td>whitespace-only string</td> <td>true</td> </tr> <tr class=\"row-odd\">\n<td>empty array</td> <td>false</td> </tr> <tr class=\"row-even\">\n<td>null</td> <td>false</td> </tr> <tr class=\"row-odd\">\n<td>non-empty array</td> <td>true</td> </tr> <tr class=\"row-even\">\n<td>object</td> <td>true</td> </tr> </tbody> </table> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"from\" href=\"from\"> « from </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"import\" href=\"import\"> import » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/if.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/if.html</a>\n  </p>\n</div>\n","tags/import":"<h1 id=\"import\">import</h1> <p>Twig supports putting often used code into <a class=\"reference internal\" href=\"macro\">macros</a>. These macros can go into different templates and get imported from there.</p> <p>There are two ways to import templates. You can import the complete template into a variable or request specific macros from it.</p> <p>Imagine we have a helper module that renders forms (called <code class=\"notranslate\">forms.html</code>):</p> <pre>{% macro input(name, value, type, size) %}\n    &lt;input type=\"{{ type|default('text') }}\" name=\"{{ name }}\" value=\"{{ value|e }}\" size=\"{{ size|default(20) }}\" /&gt;\n{% endmacro %}\n\n{% macro textarea(name, value, rows, cols) %}\n    &lt;textarea name=\"{{ name }}\" rows=\"{{ rows|default(10) }}\" cols=\"{{ cols|default(40) }}\"&gt;{{ value|e }}&lt;/textarea&gt;\n{% endmacro %}\n</pre> <p>The easiest and most flexible is importing the whole module into a variable. That way you can access the attributes:</p> <pre>{% import 'forms.html' as forms %}\n\n&lt;dl&gt;\n    &lt;dt&gt;Username&lt;/dt&gt;\n    &lt;dd&gt;{{ forms.input('username') }}&lt;/dd&gt;\n    &lt;dt&gt;Password&lt;/dt&gt;\n    &lt;dd&gt;{{ forms.input('password', null, 'password') }}&lt;/dd&gt;\n&lt;/dl&gt;\n&lt;p&gt;{{ forms.textarea('comment') }}&lt;/p&gt;\n</pre> <p>Alternatively you can import names from the template into the current namespace:</p> <pre>{% from 'forms.html' import input as input_field, textarea %}\n\n&lt;dl&gt;\n    &lt;dt&gt;Username&lt;/dt&gt;\n    &lt;dd&gt;{{ input_field('username') }}&lt;/dd&gt;\n    &lt;dt&gt;Password&lt;/dt&gt;\n    &lt;dd&gt;{{ input_field('password', '', 'password') }}&lt;/dd&gt;\n&lt;/dl&gt;\n&lt;p&gt;{{ textarea('comment') }}&lt;/p&gt;\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">To import macros from the current file, use the special <code class=\"notranslate\">_self</code> variable for the source.</p> </div>  \n<div class=\"admonition admonition-seealso\">\n<a class=\"reference internal\" href=\"macro\">macro</a>, <a class=\"reference internal\" href=\"from\">from</a>\n</div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"if\" href=\"if\"> « if </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"include\" href=\"include\"> include » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/import.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/import.html</a>\n  </p>\n</div>\n","internals":"<h1 id=\"twig-internals\">Twig Internals</h1> <p>Twig is very extensible and you can easily hack it. Keep in mind that you should probably try to create an extension before hacking the core, as most features and enhancements can be handled with extensions. This chapter is also useful for people who want to understand how Twig works under the hood.</p>  <h2 id=\"how-does-twig-work\">How does Twig work?</h2> <p>The rendering of a Twig template can be summarized into four key steps:</p> <ul class=\"simple\"> <li>\n<strong>Load</strong> the template: If the template is already compiled, load it and go to the <em>evaluation</em> step, otherwise:<ul> <li>First, the <strong>lexer</strong> tokenizes the template source code into small pieces for easier processing;</li> <li>Then, the <strong>parser</strong> converts the token stream into a meaningful tree of nodes (the Abstract Syntax Tree);</li> <li>Eventually, the <em>compiler</em> transforms the AST into PHP code.</li> </ul> </li> <li>\n<strong>Evaluate</strong> the template: It basically means calling the <code class=\"notranslate\">display()</code> method of the compiled template and passing it the context.</li> </ul>   <h2 id=\"the-lexer\">The Lexer</h2> <p>The lexer tokenizes a template source code into a token stream (each token is an instance of <code class=\"notranslate\">Twig_Token</code>, and the stream is an instance of <code class=\"notranslate\">Twig_TokenStream</code>). The default lexer recognizes 13 different token types:</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">Twig_Token::BLOCK_START_TYPE</code>, <code class=\"notranslate\">Twig_Token::BLOCK_END_TYPE</code>: Delimiters for blocks (<code class=\"notranslate\">{% %}</code>)</li> <li>\n<code class=\"notranslate\">Twig_Token::VAR_START_TYPE</code>, <code class=\"notranslate\">Twig_Token::VAR_END_TYPE</code>: Delimiters for variables (<code class=\"notranslate\">{{ }}</code>)</li> <li>\n<code class=\"notranslate\">Twig_Token::TEXT_TYPE</code>: A text outside an expression;</li> <li>\n<code class=\"notranslate\">Twig_Token::NAME_TYPE</code>: A name in an expression;</li> <li>\n<code class=\"notranslate\">Twig_Token::NUMBER_TYPE</code>: A number in an expression;</li> <li>\n<code class=\"notranslate\">Twig_Token::STRING_TYPE</code>: A string in an expression;</li> <li>\n<code class=\"notranslate\">Twig_Token::OPERATOR_TYPE</code>: An operator;</li> <li>\n<code class=\"notranslate\">Twig_Token::PUNCTUATION_TYPE</code>: A punctuation sign;</li> <li>\n<code class=\"notranslate\">Twig_Token::INTERPOLATION_START_TYPE</code>, <code class=\"notranslate\">Twig_Token::INTERPOLATION_END_TYPE</code> (as of Twig 1.5): Delimiters for string interpolation;</li> <li>\n<code class=\"notranslate\">Twig_Token::EOF_TYPE</code>: Ends of template.</li> </ul> <p>You can manually convert a source code into a token stream by calling the <code class=\"notranslate\">tokenize()</code> method of an environment:</p> <pre>$stream = $twig-&gt;tokenize($source, $identifier);\n</pre> <p>As the stream has a <code class=\"notranslate\">__toString()</code> method, you can have a textual representation of it by echoing the object:</p> <pre>echo $stream.\"\\n\";\n</pre> <p>Here is the output for the <code class=\"notranslate\">Hello {{ name }}</code> template:</p> <pre>TEXT_TYPE(Hello )\nVAR_START_TYPE()\nNAME_TYPE(name)\nVAR_END_TYPE()\nEOF_TYPE()\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>The default lexer (<code class=\"notranslate\">Twig_Lexer</code>) can be changed by calling the <code class=\"notranslate\">setLexer()</code> method:</p> <pre>$twig-&gt;setLexer($lexer);\n</pre> </div>   <h2 id=\"the-parser\">The Parser</h2> <p>The parser converts the token stream into an AST (Abstract Syntax Tree), or a node tree (an instance of <code class=\"notranslate\">Twig_Node_Module</code>). The core extension defines the basic nodes like: <code class=\"notranslate\">for</code>, <code class=\"notranslate\">if</code>, ... and the expression nodes.</p> <p>You can manually convert a token stream into a node tree by calling the <code class=\"notranslate\">parse()</code> method of an environment:</p> <pre>$nodes = $twig-&gt;parse($stream);\n</pre> <p>Echoing the node object gives you a nice representation of the tree:</p> <pre>echo $nodes.\"\\n\";\n</pre> <p>Here is the output for the <code class=\"notranslate\">Hello {{ name }}</code> template:</p> <pre>Twig_Node_Module(\n  Twig_Node_Text(Hello )\n  Twig_Node_Print(\n    Twig_Node_Expression_Name(name)\n  )\n)\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>The default parser (<code class=\"notranslate\">Twig_TokenParser</code>) can be changed by calling the <code class=\"notranslate\">setParser()</code> method:</p> <pre>$twig-&gt;setParser($parser);\n</pre> </div>   <h2 id=\"the-compiler\">The Compiler</h2> <p>The last step is done by the compiler. It takes a node tree as an input and generates PHP code usable for runtime execution of the template.</p> <p>You can manually compile a node tree to PHP code with the <code class=\"notranslate\">compile()</code> method of an environment:</p> <pre>$php = $twig-&gt;compile($nodes);\n</pre> <p>The generated template for a <code class=\"notranslate\">Hello {{ name }}</code> template reads as follows (the actual output can differ depending on the version of Twig you are using):</p> <pre>/* Hello {{ name }} */\nclass __TwigTemplate_1121b6f109fe93ebe8c6e22e3712bceb extends Twig_Template\n{\n    protected function doDisplay(array $context, array $blocks = array())\n    {\n        // line 1\n        echo \"Hello \";\n        echo twig_escape_filter($this-&gt;env, isset($context[\"name\"]) ? $context[\"name\"] : null), \"html\", null, true);\n    }\n\n    // some more code\n}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>The default compiler (<code class=\"notranslate\">Twig_Compiler</code>) can be changed by calling the <code class=\"notranslate\">setCompiler()</code> method:</p> <pre>$twig-&gt;setCompiler($compiler);\n</pre> </div>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Extending Twig\" href=\"advanced\"> « Extending Twig </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Deprecated Features\" href=\"http://twig.sensiolabs.org/doc/deprecated.html\"> Deprecated Features » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/internals.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/internals.html</a>\n  </p>\n</div>\n","coding_standards":"<h1 id=\"coding-standards\">Coding Standards</h1> <p>When writing Twig templates, we recommend you to follow these official coding standards:</p> <ul> <li>\n<p class=\"first\">Put one (and only one) space after the start of a delimiter (<code class=\"notranslate\">{{</code>, <code class=\"notranslate\">{%</code>, and <code class=\"notranslate\">{#</code>) and before the end of a delimiter (<code class=\"notranslate\">}}</code>, <code class=\"notranslate\">%}</code>, and <code class=\"notranslate\">#}</code>):</p> <pre>{{ foo }}\n{# comment #}\n{% if foo %}{% endif %}\n</pre> <p>When using the whitespace control character, do not put any spaces between it and the delimiter:</p> <pre>{{- foo -}}\n{#- comment -#}\n{%- if foo -%}{%- endif -%}\n</pre> </li> <li>\n<p class=\"first\">Put one (and only one) space before and after the following operators: comparison operators (<code class=\"notranslate\">==</code>, <code class=\"notranslate\">!=</code>, <code class=\"notranslate\">&lt;</code>, <code class=\"notranslate\">&gt;</code>, <code class=\"notranslate\">&gt;=</code>, <code class=\"notranslate\">&lt;=</code>), math operators (<code class=\"notranslate\">+</code>, <code class=\"notranslate\">-</code>, <code class=\"notranslate\">/</code>, <code class=\"notranslate\">*</code>, <code class=\"notranslate\">%</code>, <code class=\"notranslate\">//</code>, <code class=\"notranslate\">**</code>), logic operators (<code class=\"notranslate\">not</code>, <code class=\"notranslate\">and</code>, <code class=\"notranslate\">or</code>), <code class=\"notranslate\">~</code>, <code class=\"notranslate\">is</code>, <code class=\"notranslate\">in</code>, and the ternary operator (<code class=\"notranslate\">?:</code>):</p> <pre>{{ 1 + 2 }}\n{{ foo ~ bar }}\n{{ true ? true : false }}</pre> </li> <li>\n<p class=\"first\">Put one (and only one) space after the <code class=\"notranslate\">:</code> sign in hashes and <code class=\"notranslate\">,</code> in arrays and hashes:</p> <pre>{{ [1, 2, 3] }}\n{{ {'foo': 'bar'} }}\n</pre> </li> <li>\n<p class=\"first\">Do not put any spaces after an opening parenthesis and before a closing parenthesis in expressions:</p> <pre>{{ 1 + (2 * 3) }}\n</pre> </li> <li>\n<p class=\"first\">Do not put any spaces before and after string delimiters:</p> <pre>{{ 'foo' }}\n{{ \"foo\" }}\n</pre> </li> <li>\n<p class=\"first\">Do not put any spaces before and after the following operators: <code class=\"notranslate\">|</code>, <code class=\"notranslate\">.</code>, <code class=\"notranslate\">..</code>, <code class=\"notranslate\">[]</code>:</p> <pre>{{ foo|upper|lower }}\n{{ user.name }}\n{{ user[name] }}\n{% for i in 1..12 %}{% endfor %}\n</pre> </li> <li>\n<p class=\"first\">Do not put any spaces before and after the parenthesis used for filter and function calls:</p> <pre>{{ foo|default('foo') }}\n{{ range(1..10) }}\n</pre> </li> <li>\n<p class=\"first\">Do not put any spaces before and after the opening and the closing of arrays and hashes:</p> <pre>{{ [1, 2, 3] }}\n{{ {'foo': 'bar'} }}\n</pre> </li> <li>\n<p class=\"first\">Use lower cased and underscored variable names:</p> <pre>{% set foo = 'foo' %}\n{% set foo_bar = 'foo' %}\n</pre> </li> <li>\n<p class=\"first\">Indent your code inside tags (use the same indentation as the one used for the target language of the rendered template):</p> <pre>{% block foo %}\n    {% if true %}\n        true\n    {% endif %}\n{% endblock %}\n</pre> </li> </ul>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Recipes\" href=\"recipes\"> « Recipes </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Tags\" href=\"tags/index\"> Tags » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/coding_standards.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/coding_standards.html</a>\n  </p>\n</div>\n","tags/autoescape":"<h1 id=\"autoescape\">autoescape</h1> <p>Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the <code class=\"notranslate\">autoescape</code> tag:</p> <pre>{# The following syntax works as of Twig 1.8 -- see the note below for previous versions #}\n\n{% autoescape %}\n    Everything will be automatically escaped in this block\n    using the HTML strategy\n{% endautoescape %}\n\n{% autoescape 'html' %}\n    Everything will be automatically escaped in this block\n    using the HTML strategy\n{% endautoescape %}\n\n{% autoescape 'js' %}\n    Everything will be automatically escaped in this block\n    using the js escaping strategy\n{% endautoescape %}\n\n{% autoescape false %}\n    Everything will be outputted as is in this block\n{% endautoescape %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>Before Twig 1.8, the syntax was different:</p> <pre>{% autoescape true %}\n    Everything will be automatically escaped in this block\n    using the HTML strategy\n{% endautoescape %}\n\n{% autoescape false %}\n    Everything will be outputted as is in this block\n{% endautoescape %}\n\n{% autoescape true js %}\n    Everything will be automatically escaped in this block\n    using the js escaping strategy\n{% endautoescape %}\n</pre> </div> <p>When automatic escaping is enabled everything is escaped by default except for values explicitly marked as safe. Those can be marked in the template by using the <a class=\"reference internal\" href=\"../filters/raw\">raw</a> filter:</p> <pre>{% autoescape %}\n    {{ safe_value|raw }}\n{% endautoescape %}\n</pre> <p>Functions returning template data (like <a class=\"reference internal\" href=\"macro\">macros</a> and <a class=\"reference internal\" href=\"../functions/parent\">parent</a>) always return safe markup.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Twig is smart enough to not escape an already escaped value by the <a class=\"reference internal\" href=\"../filters/escape\">escape</a> filter.</p> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>Twig does not escape static expressions:</p> <pre>{% set hello = \"&lt;strong&gt;Hello&lt;/strong&gt;\" %}\n{{ hello }}\n{{ \"&lt;strong&gt;world&lt;/strong&gt;\" }}\n</pre> <p class=\"last\">Will be rendered \"&lt;strong&gt;Hello&lt;/strong&gt; <strong>world</strong>\".</p> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The chapter <a class=\"reference internal\" href=\"../api\">Twig for Developers</a> gives more information about when and how automatic escaping is applied.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Tags\" href=\"index\"> « Tags </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"block\" href=\"block\"> block » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/autoescape.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/autoescape.html</a>\n  </p>\n</div>\n","tags/do":"<h1 id=\"do\">do</h1> <div class=\"versionadded\"> <p><span>New in version 1.5: </span>The <code class=\"notranslate\">do</code> tag was added in Twig 1.5.</p> </div> <p>The <code class=\"notranslate\">do</code> tag works exactly like the regular variable expression (<code class=\"notranslate\">{{ ...\n}}</code>) just that it doesn't print anything:</p> <pre>{% do 1 + 2 %}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"block\" href=\"block\"> « block </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"embed\" href=\"embed\"> embed » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/do.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/do.html</a>\n  </p>\n</div>\n","tags/embed":"<h1 id=\"embed\">embed</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.8: </span>The <code class=\"notranslate\">embed</code> tag was added in Twig 1.8.</div> <p>The <code class=\"notranslate\">embed</code> tag combines the behaviour of <a class=\"reference internal\" href=\"include\">include</a> and <a class=\"reference internal\" href=\"extends\">extends</a>. It allows you to include another template's contents, just like <code class=\"notranslate\">include</code> does. But it also allows you to override any block defined inside the included template, like when extending a template.</p> <p>Think of an embedded template as a \"micro layout skeleton\".</p> <pre>{% embed \"teasers_skeleton.twig\" %}\n    {# These blocks are defined in \"teasers_skeleton.twig\" #}\n    {# and we override them right here:                    #}\n    {% block left_teaser %}\n        Some content for the left teaser box\n    {% endblock %}\n    {% block right_teaser %}\n        Some content for the right teaser box\n    {% endblock %}\n{% endembed %}\n</pre> <p>The <code class=\"notranslate\">embed</code> tag takes the idea of template inheritance to the level of content fragments. While template inheritance allows for \"document skeletons\", which are filled with life by child templates, the <code class=\"notranslate\">embed</code> tag allows you to create \"skeletons\" for smaller units of content and re-use and fill them anywhere you like.</p> <p>Since the use case may not be obvious, let's look at a simplified example. Imagine a base template shared by multiple HTML pages, defining a single block named \"content\":</p> <pre>┌─── page layout ─────────────────────┐\n│                                     │\n│           ┌── block \"content\" ──┐   │\n│           │                     │   │\n│           │                     │   │\n│           │ (child template to  │   │\n│           │  put content here)  │   │\n│           │                     │   │\n│           │                     │   │\n│           └─────────────────────┘   │\n│                                     │\n└─────────────────────────────────────┘\n</pre> <p>Some pages (\"foo\" and \"bar\") share the same content structure - two vertically stacked boxes:</p> <pre>┌─── page layout ─────────────────────┐\n│                                     │\n│           ┌── block \"content\" ──┐   │\n│           │ ┌─ block \"top\" ───┐ │   │\n│           │ │                 │ │   │\n│           │ └─────────────────┘ │   │\n│           │ ┌─ block \"bottom\" ┐ │   │\n│           │ │                 │ │   │\n│           │ └─────────────────┘ │   │\n│           └─────────────────────┘   │\n│                                     │\n└─────────────────────────────────────┘\n</pre> <p>While other pages (\"boom\" and \"baz\") share a different content structure - two boxes side by side:</p> <pre>┌─── page layout ─────────────────────┐\n│                                     │\n│           ┌── block \"content\" ──┐   │\n│           │                     │   │\n│           │ ┌ block ┐ ┌ block ┐ │   │\n│           │ │\"left\" │ │\"right\"│ │   │\n│           │ │       │ │       │ │   │\n│           │ │       │ │       │ │   │\n│           │ └───────┘ └───────┘ │   │\n│           └─────────────────────┘   │\n│                                     │\n└─────────────────────────────────────┘\n</pre> <p>Without the <code class=\"notranslate\">embed</code> tag, you have two ways to design your templates:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>Create two \"intermediate\" base templates that extend the master layout template: one with vertically stacked boxes to be used by the \"foo\" and \"bar\" pages and another one with side-by-side boxes for the \"boom\" and \"baz\" pages.</li> <li>Embed the markup for the top/bottom and left/right boxes into each page template directly.</li> </ul> </div>\n</blockquote> <p>These two solutions do not scale well because they each have a major drawback:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>The first solution may indeed work for this simplified example. But imagine we add a sidebar, which may again contain different, recurring structures of content. Now we would need to create intermediate base templates for all occurring combinations of content structure and sidebar structure... and so on.</li> <li>The second solution involves duplication of common code with all its negative consequences: any change involves finding and editing all affected copies of the structure, correctness has to be verified for each copy, copies may go out of sync by careless modifications etc.</li> </ul> </div>\n</blockquote> <p>In such a situation, the <code class=\"notranslate\">embed</code> tag comes in handy. The common layout code can live in a single base template, and the two different content structures, let's call them \"micro layouts\" go into separate templates which are embedded as necessary:</p> <p>Page template <code class=\"notranslate\">foo.twig</code>:</p> <pre>{% extends \"layout_skeleton.twig\" %}\n\n{% block content %}\n    {% embed \"vertical_boxes_skeleton.twig\" %}\n        {% block top %}\n            Some content for the top box\n        {% endblock %}\n\n        {% block bottom %}\n            Some content for the bottom box\n        {% endblock %}\n    {% endembed %}\n{% endblock %}\n</pre> <p>And here is the code for <code class=\"notranslate\">vertical_boxes_skeleton.twig</code>:</p> <pre>&lt;div class=\"top_box\"&gt;\n    {% block top %}\n        Top box default content\n    {% endblock %}\n&lt;/div&gt;\n\n&lt;div class=\"bottom_box\"&gt;\n    {% block bottom %}\n        Bottom box default content\n    {% endblock %}\n&lt;/div&gt;\n</pre> <p>The goal of the <code class=\"notranslate\">vertical_boxes_skeleton.twig</code> template being to factor out the HTML markup for the boxes.</p> <p>The <code class=\"notranslate\">embed</code> tag takes the exact same arguments as the <code class=\"notranslate\">include</code> tag:</p> <pre>{% embed \"base\" with {'foo': 'bar'} %}\n    ...\n{% endembed %}\n\n{% embed \"base\" with {'foo': 'bar'} only %}\n    ...\n{% endembed %}\n\n{% embed \"base\" ignore missing %}\n    ...\n{% endembed %}\n</pre>  \n<div class=\"admonition admonition-warning\">\n<p class=\"first admonition-title\">Warning</p> <p class=\"last\">As embedded templates do not have \"names\", auto-escaping strategies based on the template \"filename\" won't work as expected if you change the context (for instance, if you embed a CSS/JavaScript template into an HTML one). In that case, explicitly set the default auto-escaping strategy with the <code class=\"notranslate\">autoescape</code> tag.</p> </div>  \n<div class=\"admonition admonition-seealso\">\n<p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"include\">include</a></p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"do\" href=\"do\"> « do </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"extends\" href=\"extends\"> extends » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/embed.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/embed.html</a>\n  </p>\n</div>\n","tags/include":"<h1 id=\"include\">include</h1> <p>The <code class=\"notranslate\">include</code> statement includes a template and returns the rendered content of that file into the current namespace:</p> <pre>{% include 'header.html' %}\n    Body\n{% include 'footer.html' %}\n</pre> <p>Included templates have access to the variables of the active context.</p> <p>If you are using the filesystem loader, the templates are looked for in the paths defined by it.</p> <p>You can add additional variables by passing them after the <code class=\"notranslate\">with</code> keyword:</p> <pre>{# template.html will have access to the variables from the current context and the additional ones provided #}\n{% include 'template.html' with {'foo': 'bar'} %}\n\n{% set vars = {'foo': 'bar'} %}\n{% include 'template.html' with vars %}\n</pre> <p>You can disable access to the context by appending the <code class=\"notranslate\">only</code> keyword:</p> <pre>{# only the foo variable will be accessible #}\n{% include 'template.html' with {'foo': 'bar'} only %}\n</pre> <pre>{# no variables will be accessible #}\n{% include 'template.html' only %}\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">When including a template created by an end user, you should consider sandboxing it. More information in the <a class=\"reference internal\" href=\"../api\">Twig for Developers</a> chapter and in the <a class=\"reference internal\" href=\"sandbox\">sandbox</a> tag documentation.</p> </div> <p>The template name can be any valid Twig expression:</p> <pre>{% include some_var %}\n{% include ajax ? 'ajax.html' : 'not_ajax.html' %}\n</pre> <p>And if the expression evaluates to a <code class=\"notranslate\">Twig_Template</code> object, Twig will use it directly:</p> <pre>// {% include template %}\n\n$template = $twig-&gt;loadTemplate('some_template.twig');\n\n$twig-&gt;loadTemplate('template.twig')-&gt;display(array('template' =&gt; $template));\n</pre> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.2: </span>The <code class=\"notranslate\">ignore missing</code> feature has been added in Twig 1.2.</div> <p>You can mark an include with <code class=\"notranslate\">ignore missing</code> in which case Twig will ignore the statement if the template to be included does not exist. It has to be placed just after the template name. Here some valid examples:</p> <pre>{% include 'sidebar.html' ignore missing %}\n{% include 'sidebar.html' ignore missing with {'foo': 'bar'} %}\n{% include 'sidebar.html' ignore missing only %}\n</pre> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.2: </span>The possibility to pass an array of templates has been added in Twig 1.2.</div> <p>You can also provide a list of templates that are checked for existence before inclusion. The first template that exists will be included:</p> <pre>{% include ['page_detailed.html', 'page.html'] %}\n</pre> <p>If <code class=\"notranslate\">ignore missing</code> is given, it will fall back to rendering nothing if none of the templates exist, otherwise it will throw an exception.</p>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"import\" href=\"import\"> « import </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"macro\" href=\"macro\"> macro » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/include.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/include.html</a>\n  </p>\n</div>\n","tags/sandbox":"<h1 id=\"sandbox\">sandbox</h1> <p>The <code class=\"notranslate\">sandbox</code> tag can be used to enable the sandboxing mode for an included template, when sandboxing is not enabled globally for the Twig environment:</p> <pre>{% sandbox %}\n    {% include 'user.html' %}\n{% endsandbox %}\n</pre>  \n<div class=\"admonition admonition-warning\">\n<p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <code class=\"notranslate\">sandbox</code> tag is only available when the sandbox extension is enabled (see the <a class=\"reference internal\" href=\"../api\">Twig for Developers</a> chapter).</p> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>The <code class=\"notranslate\">sandbox</code> tag can only be used to sandbox an include tag and it cannot be used to sandbox a section of a template. The following example won't work:</p> <pre>{% sandbox %}\n    {% for i in 1..2 %}\n        {{ i }}\n    {% endfor %}\n{% endsandbox %}\n</pre> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"macro\" href=\"macro\"> « macro </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"set\" href=\"set\"> set » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/sandbox.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/sandbox.html</a>\n  </p>\n</div>\n","tags/extends":"<h1 id=\"extends\">extends</h1> <p>The <code class=\"notranslate\">extends</code> tag can be used to extend a template from another one.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Like PHP, Twig does not support multiple inheritance. So you can only have one extends tag called per rendering. However, Twig supports horizontal <a class=\"reference internal\" href=\"use\">reuse</a>.</p> </div> <p>Let's define a base template, <code class=\"notranslate\">base.html</code>, which defines a simple HTML skeleton document:</p> <pre>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        {% block head %}\n            &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n            &lt;title&gt;{% block title %}{% endblock %} - My Webpage&lt;/title&gt;\n        {% endblock %}\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"content\"&gt;{% block content %}{% endblock %}&lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            {% block footer %}\n                &amp;copy; Copyright 2011 by &lt;a href=\"http://domain.invalid/\"&gt;you&lt;/a&gt;.\n            {% endblock %}\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>In this example, the <a class=\"reference internal\" href=\"block\">block</a> tags define four blocks that child templates can fill in.</p> <p>All the <code class=\"notranslate\">block</code> tag does is to tell the template engine that a child template may override those portions of the template.</p>  <h2 id=\"child-template\">Child Template</h2> <p>A child template might look like this:</p> <pre>{% extends \"base.html\" %}\n\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ parent() }}\n    &lt;style type=\"text/css\"&gt;\n        .important { color: #336699; }\n    &lt;/style&gt;\n{% endblock %}\n{% block content %}\n    &lt;h1&gt;Index&lt;/h1&gt;\n    &lt;p class=\"important\"&gt;\n        Welcome on my awesome homepage.\n    &lt;/p&gt;\n{% endblock %}\n</pre> <p>The <code class=\"notranslate\">extends</code> tag is the key here. It tells the template engine that this template \"extends\" another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.</p> <p>Note that since the child template doesn't define the <code class=\"notranslate\">footer</code> block, the value from the parent template is used instead.</p> <p>You can't define multiple <code class=\"notranslate\">block</code> tags with the same name in the same template. This limitation exists because a block tag works in \"both\" directions. That is, a block tag doesn't just provide a hole to fill - it also defines the content that fills the hole in the <em>parent</em>. If there were two similarly-named <code class=\"notranslate\">block</code> tags in a template, that template's parent wouldn't know which one of the blocks' content to use.</p> <p>If you want to print a block multiple times you can however use the <code class=\"notranslate\">block</code> function:</p> <pre>&lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt;\n&lt;h1&gt;{{ block('title') }}&lt;/h1&gt;\n{% block body %}{% endblock %}\n</pre>   <h2 id=\"parent-blocks\">Parent Blocks</h2> <p>It's possible to render the contents of the parent block by using the <a class=\"reference internal\" href=\"../functions/parent\">parent</a> function. This gives back the results of the parent block:</p> <pre>{% block sidebar %}\n    &lt;h3&gt;Table Of Contents&lt;/h3&gt;\n    ...\n    {{ parent() }}\n{% endblock %}\n</pre>   <h2 id=\"named-block-end-tags\">Named Block End-Tags</h2> <p>Twig allows you to put the name of the block after the end tag for better readability:</p> <pre>{% block sidebar %}\n    {% block inner_sidebar %}\n        ...\n    {% endblock inner_sidebar %}\n{% endblock sidebar %}\n</pre> <p>Of course, the name after the <code class=\"notranslate\">endblock</code> word must match the block name.</p>   <h2 id=\"block-nesting-and-scope\">Block Nesting and Scope</h2> <p>Blocks can be nested for more complex layouts. Per default, blocks have access to variables from outer scopes:</p> <pre>{% for item in seq %}\n    &lt;li&gt;{% block loop_item %}{{ item }}{% endblock %}&lt;/li&gt;\n{% endfor %}\n</pre>   <h2 id=\"block-shortcuts\">Block Shortcuts</h2> <p>For blocks with little content, it's possible to use a shortcut syntax. The following constructs do the same thing:</p> <pre>{% block title %}\n    {{ page_title|title }}\n{% endblock %}\n</pre> <pre>{% block title page_title|title %}\n</pre>   <h2 id=\"dynamic-inheritance\">Dynamic Inheritance</h2> <p>Twig supports dynamic inheritance by using a variable as the base template:</p> <pre>{% extends some_var %}\n</pre> <p>If the variable evaluates to a <code class=\"notranslate\">Twig_Template</code> object, Twig will use it as the parent template:</p> <pre>// {% extends layout %}\n\n$layout = $twig-&gt;loadTemplate('some_layout_template.twig');\n\n$twig-&gt;display('template.twig', array('layout' =&gt; $layout));\n</pre> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.2: </span>The possibility to pass an array of templates has been added in Twig 1.2.</div> <p>You can also provide a list of templates that are checked for existence. The first template that exists will be used as a parent:</p> <pre>{% extends ['layout.html', 'base_layout.html'] %}\n</pre>   <h2 id=\"conditional-inheritance\">Conditional Inheritance</h2> <p>As the template name for the parent can be any valid Twig expression, it's possible to make the inheritance mechanism conditional:</p> <pre>{% extends standalone ? \"minimum.html\" : \"base.html\" %}\n</pre> <p>In this example, the template will extend the \"minimum.html\" layout template if the <code class=\"notranslate\">standalone</code> variable evaluates to <code class=\"notranslate\">true</code>, and \"base.html\" otherwise.</p>   <h2 id=\"how-do-blocks-work\">How do blocks work?</h2> <p>A block provides a way to change how a certain part of a template is rendered but it does not interfere in any way with the logic around it.</p> <p>Let's take the following example to illustrate how a block works and more importantly, how it does not work:</p> <pre>{# base.twig #}\n\n{% for post in posts %}\n    {% block post %}\n        &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n        &lt;p&gt;{{ post.body }}&lt;/p&gt;\n    {% endblock %}\n{% endfor %}\n</pre> <p>If you render this template, the result would be exactly the same with or without the <code class=\"notranslate\">block</code> tag. The <code class=\"notranslate\">block</code> inside the <code class=\"notranslate\">for</code> loop is just a way to make it overridable by a child template:</p> <pre>{# child.twig #}\n\n{% extends \"base.twig\" %}\n\n{% block post %}\n    &lt;article&gt;\n        &lt;header&gt;{{ post.title }}&lt;/header&gt;\n        &lt;section&gt;{{ post.text }}&lt;/section&gt;\n    &lt;/article&gt;\n{% endblock %}\n</pre> <p>Now, when rendering the child template, the loop is going to use the block defined in the child template instead of the one defined in the base one; the executed template is then equivalent to the following one:</p> <pre>{% for post in posts %}\n    &lt;article&gt;\n        &lt;header&gt;{{ post.title }}&lt;/header&gt;\n        &lt;section&gt;{{ post.text }}&lt;/section&gt;\n    &lt;/article&gt;\n{% endfor %}\n</pre> <p>Let's take another example: a block included within an <code class=\"notranslate\">if</code> statement:</p> <pre>{% if posts is empty %}\n    {% block head %}\n        {{ parent() }}\n\n        &lt;meta name=\"robots\" content=\"noindex, follow\"&gt;\n    {% endblock head %}\n{% endif %}\n</pre> <p>Contrary to what you might think, this template does not define a block conditionally; it just makes overridable by a child template the output of what will be rendered when the condition is <code class=\"notranslate\">true</code>.</p> <p>If you want the output to be displayed conditionally, use the following instead:</p> <pre>{% block head %}\n    {{ parent() }}\n\n    {% if posts is empty %}\n        &lt;meta name=\"robots\" content=\"noindex, follow\"&gt;\n    {% endif %}\n{% endblock head %}\n</pre>  \n<div class=\"admonition admonition-seealso\">\n<p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"../functions/block\">block</a>, <a class=\"reference internal\" href=\"block\">block</a>, <a class=\"reference internal\" href=\"../functions/parent\">parent</a>, <a class=\"reference internal\" href=\"use\">use</a></p> </div>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"embed\" href=\"embed\"> « embed </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"filter\" href=\"filter\"> filter » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/extends.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/extends.html</a>\n  </p>\n</div>\n","tags/macro":"<h1 id=\"macro\">macro</h1> <p>Macros are comparable with functions in regular programming languages. They are useful to put often used HTML idioms into reusable elements to not repeat yourself.</p> <p>Here is a small example of a macro that renders a form element:</p> <pre>{% macro input(name, value, type, size) %}\n    &lt;input type=\"{{ type|default('text') }}\" name=\"{{ name }}\" value=\"{{ value|e }}\" size=\"{{ size|default(20) }}\" /&gt;\n{% endmacro %}\n</pre> <p>Macros differ from native PHP functions in a few ways:</p> <ul class=\"simple\"> <li>Default argument values are defined by using the <code class=\"notranslate\">default</code> filter in the macro body;</li> <li>Arguments of a macro are always optional.</li> <li>If extra positional arguments are passed to a macro, they end up in the special <code class=\"notranslate\">varargs</code> variable as a list of values.</li> </ul> <p>But as with PHP functions, macros don't have access to the current template variables.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">You can pass the whole context as an argument by using the special <code class=\"notranslate\">_context</code> variable.</p> </div>  <h2 id=\"import\">Import</h2> <p>Macros can be defined in any template, and need to be \"imported\" before being used (see the documentation for the <a class=\"reference internal\" href=\"import\">import</a> tag for more information):</p> <pre>{% import \"forms.html\" as forms %}\n</pre> <p>The above <code class=\"notranslate\">import</code> call imports the \"forms.html\" file (which can contain only macros, or a template and some macros), and import the functions as items of the <code class=\"notranslate\">forms</code> variable.</p> <p>The macro can then be called at will:</p> <pre>&lt;p&gt;{{ forms.input('username') }}&lt;/p&gt;\n&lt;p&gt;{{ forms.input('password', null, 'password') }}&lt;/p&gt;\n</pre> <p>If macros are defined and used in the same template, you can use the special <code class=\"notranslate\">_self</code> variable to import them:</p> <pre>{% import _self as forms %}\n\n&lt;p&gt;{{ forms.input('username') }}&lt;/p&gt;\n</pre>  \n<div class=\"admonition admonition-warning\">\n<p class=\"first admonition-title\">Warning</p> <p class=\"last\">When you define a macro in the template where you are going to use it, you might be tempted to call the macro directly via <code class=\"notranslate\">_self.input()</code> instead of importing it; even if seems to work, this is just a side-effect of the current implementation and it won't work anymore in Twig 2.x.</p> </div> <p>When you want to use a macro in another macro from the same file, you need to import it locally:</p> <pre>{% macro input(name, value, type, size) %}\n    &lt;input type=\"{{ type|default('text') }}\" name=\"{{ name }}\" value=\"{{ value|e }}\" size=\"{{ size|default(20) }}\" /&gt;\n{% endmacro %}\n\n{% macro wrapped_input(name, value, type, size) %}\n    {% import _self as forms %}\n\n    &lt;div class=\"field\"&gt;\n        {{ forms.input(name, value, type, size) }}\n    &lt;/div&gt;\n{% endmacro %}\n</pre>   <h2 id=\"named-macro-end-tags\">Named Macro End-Tags</h2> <p>Twig allows you to put the name of the macro after the end tag for better readability:</p> <pre>{% macro input() %}\n    ...\n{% endmacro input %}\n</pre> <p>Of course, the name after the <code class=\"notranslate\">endmacro</code> word must match the macro name.</p>  \n<div class=\"admonition admonition-seealso\">\n<a class=\"reference internal\" href=\"from\">from</a>, <a class=\"reference internal\" href=\"import\">import</a>\n</div>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"include\" href=\"include\"> « include </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"sandbox\" href=\"sandbox\"> sandbox » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/macro.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/macro.html</a>\n  </p>\n</div>\n","tags/set":"<h1 id=\"set\">set</h1> <p>Inside code blocks you can also assign values to variables. Assignments use the <code class=\"notranslate\">set</code> tag and can have multiple targets.</p> <p>Here is how you can assign the <code class=\"notranslate\">bar</code> value to the <code class=\"notranslate\">foo</code> variable:</p> <pre>{% set foo = 'bar' %}\n</pre> <p>After the <code class=\"notranslate\">set</code> call, the <code class=\"notranslate\">foo</code> variable is available in the template like any other ones:</p> <pre>{# displays bar #}\n{{ foo }}\n</pre> <p>The assigned value can be any valid <a class=\"reference internal\" href=\"../templates#twig-expressions\">Twig expressions</a>:</p> <pre>{% set foo = [1, 2] %}\n{% set foo = {'foo': 'bar'} %}\n{% set foo = 'foo' ~ 'bar' %}\n</pre> <p>Several variables can be assigned in one block:</p> <pre>{% set foo, bar = 'foo', 'bar' %}\n\n{# is equivalent to #}\n\n{% set foo = 'foo' %}\n{% set bar = 'bar' %}\n</pre> <p>The <code class=\"notranslate\">set</code> tag can also be used to 'capture' chunks of text:</p> <pre>{% set foo %}\n    &lt;div id=\"pagination\"&gt;\n        ...\n    &lt;/div&gt;\n{% endset %}\n</pre>  \n<div class=\"admonition admonition-caution\">\n<p class=\"first admonition-title\">Caution</p> <p class=\"last\">If you enable automatic output escaping, Twig will only consider the content to be safe when capturing chunks of text.</p> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>Note that loops are scoped in Twig; therefore a variable declared inside a <code class=\"notranslate\">for</code> loop is not accessible outside the loop itself:</p> <pre>{% for item in list %}\n    {% set foo = item %}\n{% endfor %}\n\n{# foo is NOT available #}\n</pre> <p>If you want to access the variable, just declare it before the loop:</p> <pre>{% set foo = \"\" %}\n{% for item in list %}\n    {% set foo = item %}\n{% endfor %}\n\n{# foo is available #}\n</pre> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"sandbox\" href=\"sandbox\"> « sandbox </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"spaceless\" href=\"spaceless\"> spaceless » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/set.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/set.html</a>\n  </p>\n</div>\n","tags/spaceless":"<h1 id=\"spaceless\">spaceless</h1> <p>Use the <code class=\"notranslate\">spaceless</code> tag to remove whitespace <em>between HTML tags</em>, not whitespace within HTML tags or whitespace in plain text:</p> <pre>{% spaceless %}\n    &lt;div&gt;\n        &lt;strong&gt;foo&lt;/strong&gt;\n    &lt;/div&gt;\n{% endspaceless %}\n\n{# output will be &lt;div&gt;&lt;strong&gt;foo&lt;/strong&gt;&lt;/div&gt; #}\n</pre> <p>This tag is not meant to \"optimize\" the size of the generated HTML content but merely to avoid extra whitespace between HTML tags to avoid browser rendering quirks under some circumstances.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">If you want to optimize the size of the generated HTML content, gzip compress the output instead.</p> </div>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">If you want to create a tag that actually removes all extra whitespace in an HTML string, be warned that this is not as easy as it seems to be (think of <code class=\"notranslate\">textarea</code> or <code class=\"notranslate\">pre</code> tags for instance). Using a third-party library like Tidy is probably a better idea.</p> </div>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">For more information on whitespace control, read the <a class=\"reference internal\" href=\"../templates#templates-whitespace-control\">dedicated section</a> of the documentation and learn how you can also use the whitespace control modifier on your tags.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"set\" href=\"set\"> « set </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"use\" href=\"use\"> use » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/spaceless.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/spaceless.html</a>\n  </p>\n</div>\n","tags/verbatim":"<h1 id=\"verbatim\">verbatim</h1> <div class=\"versionadded\"> <p><span>New in version 1.12: </span>The <code class=\"notranslate\">verbatim</code> tag was added in Twig 1.12 (it was named <code class=\"notranslate\">raw</code> before).</p> </div> <p>The <code class=\"notranslate\">verbatim</code> tag marks sections as being raw text that should not be parsed. For example to put Twig syntax as example into a template you can use this snippet:</p> <pre>{% verbatim %}\n    &lt;ul&gt;\n    {% for item in seq %}\n        &lt;li&gt;{{ item }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n{% endverbatim %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"notranslate\">verbatim</code> tag works in the exact same way as the old <code class=\"notranslate\">raw</code> tag, but was renamed to avoid confusion with the <code class=\"notranslate\">raw</code> filter.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"use\" href=\"use\"> « use </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Filters\" href=\"../filters/index\"> Filters » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/verbatim.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/verbatim.html</a>\n  </p>\n</div>\n","filters/index":"<h1 id=\"filters\">Filters</h1> <div class=\"toctree-wrapper compound\"> <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"abs\"><code class=\"notranslate\">abs</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"batch\"><code class=\"notranslate\">batch</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"capitalize\"><code class=\"notranslate\">capitalize</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"convert_encoding\"><code class=\"notranslate\">convert_encoding</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"date\"><code class=\"notranslate\">date</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"date_modify\"><code class=\"notranslate\">date_modify</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"default\"><code class=\"notranslate\">default</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"escape\"><code class=\"notranslate\">escape</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"first\"><code class=\"notranslate\">first</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"format\"><code class=\"notranslate\">format</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"join\"><code class=\"notranslate\">join</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"json_encode\"><code class=\"notranslate\">json_encode</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"keys\"><code class=\"notranslate\">keys</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"last\"><code class=\"notranslate\">last</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"length\"><code class=\"notranslate\">length</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"lower\"><code class=\"notranslate\">lower</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"merge\"><code class=\"notranslate\">merge</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"nl2br\"><code class=\"notranslate\">nl2br</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"number_format\"><code class=\"notranslate\">number_format</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"raw\"><code class=\"notranslate\">raw</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"replace\"><code class=\"notranslate\">replace</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"reverse\"><code class=\"notranslate\">reverse</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"round\"><code class=\"notranslate\">round</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"slice\"><code class=\"notranslate\">slice</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"sort\"><code class=\"notranslate\">sort</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"split\"><code class=\"notranslate\">split</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"striptags\"><code class=\"notranslate\">striptags</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"title\"><code class=\"notranslate\">title</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"trim\"><code class=\"notranslate\">trim</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"upper\"><code class=\"notranslate\">upper</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"url_encode\"><code class=\"notranslate\">url_encode</code></a></li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/index.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/index.html</a>\n  </p>\n</div>\n","filters/abs":"<h1 id=\"abs\">abs</h1> <p>The <code class=\"notranslate\">abs</code> filter returns the absolute value.</p> <pre>{# number = -5 #}\n\n{{ number|abs }}\n\n{# outputs 5 #}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/abs\">abs</a> function.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Filters\" href=\"index\"> « Filters </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"batch\" href=\"batch\"> batch » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/abs.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/abs.html</a>\n  </p>\n</div>\n","filters/batch":"<h1 id=\"batch\">batch</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.12.3: </span>The <code class=\"notranslate\">batch</code> filter was added in Twig 1.12.3.</div> <p>The <code class=\"notranslate\">batch</code> filter \"batches\" items by returning a list of lists with the given number of items. A second parameter can be provided and used to fill in missing items:</p> <pre>{% set items = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] %}\n\n&lt;table&gt;\n{% for row in items|batch(3, 'No item') %}\n    &lt;tr&gt;\n        {% for column in row %}\n            &lt;td&gt;{{ column }}&lt;/td&gt;\n        {% endfor %}\n    &lt;/tr&gt;\n{% endfor %}\n&lt;/table&gt;\n</pre> <p>The above example will be rendered as:</p> <pre>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;a&lt;/td&gt;\n        &lt;td&gt;b&lt;/td&gt;\n        &lt;td&gt;c&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;d&lt;/td&gt;\n        &lt;td&gt;e&lt;/td&gt;\n        &lt;td&gt;f&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;g&lt;/td&gt;\n        &lt;td&gt;No item&lt;/td&gt;\n        &lt;td&gt;No item&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</pre>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">size</code>: The size of the batch; fractional numbers will be rounded up</li> <li>\n<code class=\"notranslate\">fill</code>: Used to fill in missing items</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"abs\" href=\"abs\"> « abs </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"capitalize\" href=\"capitalize\"> capitalize » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/batch.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/batch.html</a>\n  </p>\n</div>\n","api":"<h1 id=\"twig-for-developers\">Twig for Developers</h1> <p>This chapter describes the API to Twig and not the template language. It will be most useful as reference to those implementing the template interface to the application and not those who are creating Twig templates.</p>  <h2 id=\"basics\">Basics</h2> <p>Twig uses a central object called the <strong>environment</strong> (of class <code class=\"notranslate\">Twig_Environment</code>). Instances of this class are used to store the configuration and extensions, and are used to load templates from the file system or other locations.</p> <p>Most applications will create one <code class=\"notranslate\">Twig_Environment</code> object on application initialization and use that to load templates. In some cases it's however useful to have multiple environments side by side, if different configurations are in use.</p> <p>The simplest way to configure Twig to load templates for your application looks roughly like this:</p> <pre>require_once '/path/to/lib/Twig/Autoloader.php';\nTwig_Autoloader::register();\n\n$loader = new Twig_Loader_Filesystem('/path/to/templates');\n$twig = new Twig_Environment($loader, array(\n    'cache' =&gt; '/path/to/compilation_cache',\n));\n</pre> <p>This will create a template environment with the default settings and a loader that looks up the templates in the <code class=\"notranslate\">/path/to/templates/</code> folder. Different loaders are available and you can also write your own if you want to load templates from a database or other resources.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Notice that the second argument of the environment is an array of options. The <code class=\"notranslate\">cache</code> option is a compilation cache directory, where Twig caches the compiled templates to avoid the parsing phase for sub-sequent requests. It is very different from the cache you might want to add for the evaluated templates. For such a need, you can use any available PHP cache library.</p> </div> <p>To load a template from this environment you just have to call the <code class=\"notranslate\">loadTemplate()</code> method which then returns a <code class=\"notranslate\">Twig_Template</code> instance:</p> <pre>$template = $twig-&gt;loadTemplate('index.html');\n</pre> <p>To render the template with some variables, call the <code class=\"notranslate\">render()</code> method:</p> <pre>echo $template-&gt;render(array('the' =&gt; 'variables', 'go' =&gt; 'here'));\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"notranslate\">display()</code> method is a shortcut to output the template directly.</p> </div> <p>You can also load and render the template in one fell swoop:</p> <pre>echo $twig-&gt;render('index.html', array('the' =&gt; 'variables', 'go' =&gt; 'here'));\n</pre>   <h2>Environment Options</h2> <p>When creating a new <code class=\"notranslate\">Twig_Environment</code> instance, you can pass an array of options as the constructor second argument:</p> <pre>$twig = new Twig_Environment($loader, array('debug' =&gt; true));\n</pre> <p>The following options are available:</p> <ul> <li>\n<p class=\"first\"><code class=\"notranslate\">debug</code> <em>boolean</em></p> <p>When set to <code class=\"notranslate\">true</code>, the generated templates have a <code class=\"notranslate\">__toString()</code> method that you can use to display the generated nodes (default to <code class=\"notranslate\">false</code>).</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">charset</code> <em>string</em> (defaults to <code class=\"notranslate\">utf-8</code>)</p> <p>The charset used by the templates.</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">base_template_class</code> <em>string</em> (defaults to <code class=\"notranslate\">Twig_Template</code>)</p> <p>The base template class to use for generated templates.</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">cache</code> <em>string</em> or <code class=\"notranslate\">false</code></p> <p>An absolute path where to store the compiled templates, or <code class=\"notranslate\">false</code> to disable caching (which is the default).</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">auto_reload</code> <em>boolean</em></p> <p>When developing with Twig, it's useful to recompile the template whenever the source code changes. If you don't provide a value for the <code class=\"notranslate\">auto_reload</code> option, it will be determined automatically based on the <code class=\"notranslate\">debug</code> value.</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">strict_variables</code> <em>boolean</em></p> <p>If set to <code class=\"notranslate\">false</code>, Twig will silently ignore invalid variables (variables and or attributes/methods that do not exist) and replace them with a <code class=\"notranslate\">null</code> value. When set to <code class=\"notranslate\">true</code>, Twig throws an exception instead (default to <code class=\"notranslate\">false</code>).</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">autoescape</code> <em>string</em> or <em>boolean</em></p> <p>If set to <code class=\"notranslate\">true</code>, HTML auto-escaping will be enabled by default for all templates (default to <code class=\"notranslate\">true</code>).</p> <p>As of Twig 1.8, you can set the escaping strategy to use (<code class=\"notranslate\">html</code>, <code class=\"notranslate\">js</code>, <code class=\"notranslate\">false</code> to disable).</p> <p>As of Twig 1.9, you can set the escaping strategy to use (<code class=\"notranslate\">css</code>, <code class=\"notranslate\">url</code>, <code class=\"notranslate\">html_attr</code>, or a PHP callback that takes the template \"filename\" and must return the escaping strategy to use -- the callback cannot be a function name to avoid collision with built-in escaping strategies).</p> <p>As of Twig 1.17, the <code class=\"notranslate\">filename</code> escaping strategy determines the escaping strategy to use for a template based on the template filename extension (this strategy does not incur any overhead at runtime as auto-escaping is done at compilation time.)</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">optimizations</code> <em>integer</em></p> <p>A flag that indicates which optimizations to apply (default to <code class=\"notranslate\">-1</code> -- all optimizations are enabled; set it to <code class=\"notranslate\">0</code> to disable).</p> </li> </ul>   <h2 id=\"loaders\">Loaders</h2> <p>Loaders are responsible for loading templates from a resource such as the file system.</p>  <h3 id=\"compilation-cache\">Compilation Cache</h3> <p>All template loaders can cache the compiled templates on the filesystem for future reuse. It speeds up Twig a lot as templates are only compiled once; and the performance boost is even larger if you use a PHP accelerator such as APC. See the <code class=\"notranslate\">cache</code> and <code class=\"notranslate\">auto_reload</code> options of <code class=\"notranslate\">Twig_Environment</code> above for more information.</p>   <h3 id=\"built-in-loaders\">Built-in Loaders</h3> <p>Here is a list of the built-in loaders Twig provides:</p>  <h4 id=\"twig-loader-filesystem\"><code class=\"notranslate\">Twig_Loader_Filesystem</code></h4> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.10: </span>The <code class=\"notranslate\">prependPath()</code> and support for namespaces were added in Twig 1.10.</div> <p><code class=\"notranslate\">Twig_Loader_Filesystem</code> loads templates from the file system. This loader can find templates in folders on the file system and is the preferred way to load them:</p> <pre>$loader = new Twig_Loader_Filesystem($templateDir);\n</pre> <p>It can also look for templates in an array of directories:</p> <pre>$loader = new Twig_Loader_Filesystem(array($templateDir1, $templateDir2));\n</pre> <p>With such a configuration, Twig will first look for templates in <code class=\"notranslate\">$templateDir1</code> and if they do not exist, it will fallback to look for them in the <code class=\"notranslate\">$templateDir2</code>.</p> <p>You can add or prepend paths via the <code class=\"notranslate\">addPath()</code> and <code class=\"notranslate\">prependPath()</code> methods:</p> <pre>$loader-&gt;addPath($templateDir3);\n$loader-&gt;prependPath($templateDir4);\n</pre> <p>The filesystem loader also supports namespaced templates. This allows to group your templates under different namespaces which have their own template paths.</p> <p>When using the <code class=\"notranslate\">setPaths()</code>, <code class=\"notranslate\">addPath()</code>, and <code class=\"notranslate\">prependPath()</code> methods, specify the namespace as the second argument (when not specified, these methods act on the \"main\" namespace):</p> <pre>$loader-&gt;addPath($templateDir, 'admin');\n</pre> <p>Namespaced templates can be accessed via the special <code class=\"notranslate\">@namespace_name/template_path</code> notation:</p> <pre>$twig-&gt;render('@admin/index.html', array());\n</pre>   <h4 id=\"twig-loader-array\"><code class=\"notranslate\">Twig_Loader_Array</code></h4> <p><code class=\"notranslate\">Twig_Loader_Array</code> loads a template from a PHP array. It's passed an array of strings bound to template names:</p> <pre>$loader = new Twig_Loader_Array(array(\n    'index.html' =&gt; 'Hello {{ name }}!',\n));\n$twig = new Twig_Environment($loader);\n\necho $twig-&gt;render('index.html', array('name' =&gt; 'Fabien'));\n</pre> <p>This loader is very useful for unit testing. It can also be used for small projects where storing all templates in a single PHP file might make sense.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">When using the <code class=\"notranslate\">Array</code> or <code class=\"notranslate\">String</code> loaders with a cache mechanism, you should know that a new cache key is generated each time a template content \"changes\" (the cache key being the source code of the template). If you don't want to see your cache grows out of control, you need to take care of clearing the old cache file by yourself.</p> </div>   <h4 id=\"twig-loader-chain\"><code class=\"notranslate\">Twig_Loader_Chain</code></h4> <p><code class=\"notranslate\">Twig_Loader_Chain</code> delegates the loading of templates to other loaders:</p> <pre>$loader1 = new Twig_Loader_Array(array(\n    'base.html' =&gt; '{% block content %}{% endblock %}',\n));\n$loader2 = new Twig_Loader_Array(array(\n    'index.html' =&gt; '{% extends \"base.html\" %}{% block content %}Hello {{ name }}{% endblock %}',\n    'base.html'  =&gt; 'Will never be loaded',\n));\n\n$loader = new Twig_Loader_Chain(array($loader1, $loader2));\n\n$twig = new Twig_Environment($loader);\n</pre> <p>When looking for a template, Twig will try each loader in turn and it will return as soon as the template is found. When rendering the <code class=\"notranslate\">index.html</code> template from the above example, Twig will load it with <code class=\"notranslate\">$loader2</code> but the <code class=\"notranslate\">base.html</code> template will be loaded from <code class=\"notranslate\">$loader1</code>.</p> <p><code class=\"notranslate\">Twig_Loader_Chain</code> accepts any loader that implements <code class=\"notranslate\">Twig_LoaderInterface</code>.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">You can also add loaders via the <code class=\"notranslate\">addLoader()</code> method.</p> </div>    <h3 id=\"create-your-own-loader\">Create your own Loader</h3> <p>All loaders implement the <code class=\"notranslate\">Twig_LoaderInterface</code>:</p> <pre>interface Twig_LoaderInterface\n{\n    /**\n     * Gets the source code of a template, given its name.\n     *\n     * @param  string $name string The name of the template to load\n     *\n     * @return string The template source code\n     */\n    function getSource($name);\n\n    /**\n     * Gets the cache key to use for the cache for a given template name.\n     *\n     * @param  string $name string The name of the template to load\n     *\n     * @return string The cache key\n     */\n    function getCacheKey($name);\n\n    /**\n     * Returns true if the template is still fresh.\n     *\n     * @param string    $name The template name\n     * @param timestamp $time The last modification time of the cached template\n     */\n    function isFresh($name, $time);\n}\n</pre> <p>The <code class=\"notranslate\">isFresh()</code> method must return <code class=\"notranslate\">true</code> if the current cached template is still fresh, given the last modification time, or <code class=\"notranslate\">false</code> otherwise.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">As of Twig 1.11.0, you can also implement <code class=\"notranslate\">Twig_ExistsLoaderInterface</code> to make your loader faster when used with the chain loader.</p> </div>    <h2 id=\"using-extensions\">Using Extensions</h2> <p>Twig extensions are packages that add new features to Twig. Using an extension is as simple as using the <code class=\"notranslate\">addExtension()</code> method:</p> <pre>$twig-&gt;addExtension(new Twig_Extension_Sandbox());\n</pre> <p>Twig comes bundled with the following extensions:</p> <ul class=\"simple\"> <li>\n<em>Twig_Extension_Core</em>: Defines all the core features of Twig.</li> <li>\n<em>Twig_Extension_Escaper</em>: Adds automatic output-escaping and the possibility to escape/unescape blocks of code.</li> <li>\n<em>Twig_Extension_Sandbox</em>: Adds a sandbox mode to the default Twig environment, making it safe to evaluate untrusted code.</li> <li>\n<em>Twig_Extension_Profiler</em>: Enabled the built-in Twig profiler (as of Twig 1.18).</li> <li>\n<em>Twig_Extension_Optimizer</em>: Optimizes the node tree before compilation.</li> </ul> <p>The core, escaper, and optimizer extensions do not need to be added to the Twig environment, as they are registered by default.</p>   <h2 id=\"built-in-extensions\">Built-in Extensions</h2> <p>This section describes the features added by the built-in extensions.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">Read the chapter about extending Twig to learn how to create your own extensions.</p> </div>  <h3 id=\"core-extension\">Core Extension</h3> <p>The <code class=\"notranslate\">core</code> extension defines all the core features of Twig:</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"tags/index\">Tags</a>;</li> <li>\n<a class=\"reference internal\" href=\"filters/index\">Filters</a>;</li> <li>\n<a class=\"reference internal\" href=\"functions/index\">Functions</a>;</li> <li>\n<a class=\"reference internal\" href=\"tests/index\">Tests</a>.</li> </ul>   <h3 id=\"escaper-extension\">Escaper Extension</h3> <p>The <code class=\"notranslate\">escaper</code> extension adds automatic output escaping to Twig. It defines a tag, <code class=\"notranslate\">autoescape</code>, and a filter, <code class=\"notranslate\">raw</code>.</p> <p>When creating the escaper extension, you can switch on or off the global output escaping strategy:</p> <pre>$escaper = new Twig_Extension_Escaper('html');\n$twig-&gt;addExtension($escaper);\n</pre> <p>If set to <code class=\"notranslate\">html</code>, all variables in templates are escaped (using the <code class=\"notranslate\">html</code> escaping strategy), except those using the <code class=\"notranslate\">raw</code> filter:</p> <pre>{{ article.to_html|raw }}\n</pre> <p>You can also change the escaping mode locally by using the <code class=\"notranslate\">autoescape</code> tag (see the <a class=\"reference internal\" href=\"tags/autoescape\">autoescape</a> doc for the syntax used before Twig 1.8):</p> <pre>{% autoescape 'html' %}\n    {{ var }}\n    {{ var|raw }}      {# var won't be escaped #}\n    {{ var|escape }}   {# var won't be double-escaped #}\n{% endautoescape %}\n</pre>  \n<div class=\"admonition admonition-warning\">\n<p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <code class=\"notranslate\">autoescape</code> tag has no effect on included files.</p> </div> <p>The escaping rules are implemented as follows:</p> <ul> <li>\n<p class=\"first\">Literals (integers, booleans, arrays, ...) used in the template directly as variables or filter arguments are never automatically escaped:</p> <pre>{{ \"Twig&lt;br /&gt;\" }} {# won't be escaped #}\n\n{% set text = \"Twig&lt;br /&gt;\" %}\n{{ text }} {# will be escaped #}\n</pre> </li> <li>\n<p class=\"first\">Expressions which the result is always a literal or a variable marked safe are never automatically escaped:</p> <pre>{{ foo ? \"Twig&lt;br /&gt;\" : \"&lt;br /&gt;Twig\" }} {# won't be escaped #}\n\n{% set text = \"Twig&lt;br /&gt;\" %}\n{{ foo ? text : \"&lt;br /&gt;Twig\" }} {# will be escaped #}\n\n{% set text = \"Twig&lt;br /&gt;\" %}\n{{ foo ? text|raw : \"&lt;br /&gt;Twig\" }} {# won't be escaped #}\n\n{% set text = \"Twig&lt;br /&gt;\" %}\n{{ foo ? text|escape : \"&lt;br /&gt;Twig\" }} {# the result of the expression won't be escaped #}</pre> </li> <li>\n<p class=\"first\">Escaping is applied before printing, after any other filter is applied:</p> <pre>{{ var|upper }} {# is equivalent to {{ var|upper|escape }} #}\n</pre> </li> <li>\n<p class=\"first\">The <cite>raw</cite> filter should only be used at the end of the filter chain:</p> <pre>{{ var|raw|upper }} {# will be escaped #}\n\n{{ var|upper|raw }} {# won't be escaped #}\n</pre> </li> <li>\n<p class=\"first\">Automatic escaping is not applied if the last filter in the chain is marked safe for the current context (e.g. <code class=\"notranslate\">html</code> or <code class=\"notranslate\">js</code>). <code class=\"notranslate\">escape</code> and <code class=\"notranslate\">escape('html')</code> are marked safe for HTML, <code class=\"notranslate\">escape('js')</code> is marked safe for JavaScript, <code class=\"notranslate\">raw</code> is marked safe for everything.</p> <pre>{% autoescape 'js' %}\n    {{ var|escape('html') }} {# will be escaped for HTML and JavaScript #}\n    {{ var }} {# will be escaped for JavaScript #}\n    {{ var|escape('js') }} {# won't be double-escaped #}\n{% endautoescape %}\n</pre> </li> </ul>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Note that autoescaping has some limitations as escaping is applied on expressions after evaluation. For instance, when working with concatenation, <code class=\"notranslate\">{{ foo|raw ~ bar }}</code> won't give the expected result as escaping is applied on the result of the concatenation, not on the individual variables (so, the <code class=\"notranslate\">raw</code> filter won't have any effect here).</p> </div>   <h3 id=\"sandbox-extension\">Sandbox Extension</h3> <p>The <code class=\"notranslate\">sandbox</code> extension can be used to evaluate untrusted code. Access to unsafe attributes and methods is prohibited. The sandbox security is managed by a policy instance. By default, Twig comes with one policy class: <code class=\"notranslate\">Twig_Sandbox_SecurityPolicy</code>. This class allows you to white-list some tags, filters, properties, and methods:</p> <pre>$tags = array('if');\n$filters = array('upper');\n$methods = array(\n    'Article' =&gt; array('getTitle', 'getBody'),\n);\n$properties = array(\n    'Article' =&gt; array('title', 'body'),\n);\n$functions = array('range');\n$policy = new Twig_Sandbox_SecurityPolicy($tags, $filters, $methods, $properties, $functions);\n</pre> <p>With the previous configuration, the security policy will only allow usage of the <code class=\"notranslate\">if</code> tag, and the <code class=\"notranslate\">upper</code> filter. Moreover, the templates will only be able to call the <code class=\"notranslate\">getTitle()</code> and <code class=\"notranslate\">getBody()</code> methods on <code class=\"notranslate\">Article</code> objects, and the <code class=\"notranslate\">title</code> and <code class=\"notranslate\">body</code> public properties. Everything else won't be allowed and will generate a <code class=\"notranslate\">Twig_Sandbox_SecurityError</code> exception.</p> <p>The policy object is the first argument of the sandbox constructor:</p> <pre>$sandbox = new Twig_Extension_Sandbox($policy);\n$twig-&gt;addExtension($sandbox);\n</pre> <p>By default, the sandbox mode is disabled and should be enabled when including untrusted template code by using the <code class=\"notranslate\">sandbox</code> tag:</p> <pre>{% sandbox %}\n    {% include 'user.html' %}\n{% endsandbox %}\n</pre> <p>You can sandbox all templates by passing <code class=\"notranslate\">true</code> as the second argument of the extension constructor:</p> <pre>$sandbox = new Twig_Extension_Sandbox($policy, true);\n</pre>   <h3 id=\"profiler-extension\">Profiler Extension</h3> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.18: </span>The Profile extension was added in Twig 1.18.</div> <p>The <code class=\"notranslate\">profiler</code> extension enables a profiler for Twig templates; it should only be used on your development machines as it adds some overhead:</p> <pre>$profile = new Twig_Profiler_Profile();\n$twig-&gt;addExtension(new Twig_Extension_Profiler($profile));\n\n$dumper = new Twig_Profiler_Dumper_Text();\necho $dumper-&gt;dump($profile);\n</pre> <p>A profile contains information about time and memory consumption for template, block, and macro executions.</p> <p>You can also dump the data in a <a class=\"reference external\" href=\"https://blackfire.io/\">Blackfire.io</a> compatible format:</p> <pre>$dumper = new Twig_Profiler_Dumper_Blackfire();\nfile_put_contents('/path/to/profile.prof', $dumper-&gt;dump($profile));\n</pre> <p>Upload the profile to visualize it (create a <a class=\"reference external\" href=\"https://blackfire.io/signup\">free account</a> first):</p> <pre>blackfire --slot=7 upload /path/to/profile.prof\n</pre>   <h3 id=\"optimizer-extension\">Optimizer Extension</h3> <p>The <code class=\"notranslate\">optimizer</code> extension optimizes the node tree before compilation:</p> <pre>$twig-&gt;addExtension(new Twig_Extension_Optimizer());\n</pre> <p>By default, all optimizations are turned on. You can select the ones you want to enable by passing them to the constructor:</p> <pre>$optimizer = new Twig_Extension_Optimizer(Twig_NodeVisitor_Optimizer::OPTIMIZE_FOR);\n\n$twig-&gt;addExtension($optimizer);\n</pre> <p>Twig supports the following optimizations:</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">Twig_NodeVisitor_Optimizer::OPTIMIZE_ALL</code>, enables all optimizations (this is the default value).</li> <li>\n<code class=\"notranslate\">Twig_NodeVisitor_Optimizer::OPTIMIZE_NONE</code>, disables all optimizations. This reduces the compilation time, but it can increase the execution time and the consumed memory.</li> <li>\n<code class=\"notranslate\">Twig_NodeVisitor_Optimizer::OPTIMIZE_FOR</code>, optimizes the <code class=\"notranslate\">for</code> tag by removing the <code class=\"notranslate\">loop</code> variable creation whenever possible.</li> <li>\n<code class=\"notranslate\">Twig_NodeVisitor_Optimizer::OPTIMIZE_RAW_FILTER</code>, removes the <code class=\"notranslate\">raw</code> filter whenever possible.</li> <li>\n<code class=\"notranslate\">Twig_NodeVisitor_Optimizer::OPTIMIZE_VAR_ACCESS</code>, simplifies the creation and access of variables in the compiled templates whenever possible.</li> </ul>    <h2 id=\"exceptions\">Exceptions</h2> <p>Twig can throw exceptions:</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">Twig_Error</code>: The base exception for all errors.</li> <li>\n<code class=\"notranslate\">Twig_Error_Syntax</code>: Thrown to tell the user that there is a problem with the template syntax.</li> <li>\n<code class=\"notranslate\">Twig_Error_Runtime</code>: Thrown when an error occurs at runtime (when a filter does not exist for instance).</li> <li>\n<code class=\"notranslate\">Twig_Error_Loader</code>: Thrown when an error occurs during template loading.</li> <li>\n<code class=\"notranslate\">Twig_Sandbox_SecurityError</code>: Thrown when an unallowed tag, filter, or method is called in a sandboxed template.</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Twig for Template Designers\" href=\"templates\"> « Twig for Template Designers </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Extending Twig\" href=\"advanced\"> Extending Twig » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/api.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/api.html</a>\n  </p>\n</div>\n","recipes":"<h1 id=\"recipes\">Recipes</h1>  <h2>Displaying Deprecation Notices</h2> <div class=\"versionadded\"> <p><span>New in version 1.21: </span>This works as of Twig 1.21.</p> </div> <p>Deprecated features generate deprecation notices (via a call to the <code class=\"notranslate\">trigger_error()</code> PHP function). By default, they are silenced and never displayed nor logged.</p> <p>To easily remove all deprecated feature usages from your templates, write and run a script along the lines of the following:</p> <pre>require_once __DIR__.'/vendor/autoload.php';\n\n$twig = create_your_twig_env();\n\n$deprecations = new Twig_Util_DeprecationCollector($twig);\n\nprint_r($deprecations-&gt;collectDir(__DIR__.'/templates'));\n</pre> <p>The <code class=\"notranslate\">collectDir()</code> method compiles all templates found in a directory, catches deprecation notices, and return them.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">If your templates are not stored on the filesystem, use the <code class=\"notranslate\">collect()</code> method instead which takes an <code class=\"notranslate\">Iterator</code>; the iterator must return template names as keys and template contents as values (as done by <code class=\"notranslate\">Twig_Util_TemplateDirIterator</code>).</p> </div> <p>However, this code won't find all deprecations (like using deprecated some Twig classes). To catch all notices, register a custom error handler like the one below:</p> <pre>$deprecations = array();\nset_error_handler(function ($type, $msg) use (&amp;$deprecations) {\n    if (E_USER_DEPRECATED === $type) {\n        $deprecations[] = $msg;\n    }\n});\n\n// run your application\n\nprint_r($deprecations);\n</pre> <p>Note that most deprecation notices are triggered during <strong>compilation</strong>, so they won't be generated when templates are already cached.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">If you want to manage the deprecation notices from your PHPUnit tests, have a look at the <a class=\"reference external\" href=\"https://github.com/symfony/phpunit-bridge\">symfony/phpunit-bridge</a> package, which eases the process a lot.</p> </div>   <h2 id=\"making-a-layout-conditional\">Making a Layout conditional</h2> <p>Working with Ajax means that the same content is sometimes displayed as is, and sometimes decorated with a layout. As Twig layout template names can be any valid expression, you can pass a variable that evaluates to <code class=\"notranslate\">true</code> when the request is made via Ajax and choose the layout accordingly:</p> <pre>{% extends request.ajax ? \"base_ajax.html\" : \"base.html\" %}\n\n{% block content %}\n    This is the content to be displayed.\n{% endblock %}\n</pre>   <h2 id=\"making-an-include-dynamic\">Making an Include dynamic</h2> <p>When including a template, its name does not need to be a string. For instance, the name can depend on the value of a variable:</p> <pre>{% include var ~ '_foo.html' %}\n</pre> <p>If <code class=\"notranslate\">var</code> evaluates to <code class=\"notranslate\">index</code>, the <code class=\"notranslate\">index_foo.html</code> template will be rendered.</p> <p>As a matter of fact, the template name can be any valid expression, such as the following:</p> <pre>{% include var|default('index') ~ '_foo.html' %}\n</pre>   <h2 id=\"overriding-a-template-that-also-extends-itself\">Overriding a Template that also extends itself</h2> <p>A template can be customized in two different ways:</p> <ul class=\"simple\"> <li>\n<em>Inheritance</em>: A template <em>extends</em> a parent template and overrides some blocks;</li> <li>\n<em>Replacement</em>: If you use the filesystem loader, Twig loads the first template it finds in a list of configured directories; a template found in a directory <em>replaces</em> another one from a directory further in the list.</li> </ul> <p>But how do you combine both: <em>replace</em> a template that also extends itself (aka a template in a directory further in the list)?</p> <p>Let's say that your templates are loaded from both <code class=\"notranslate\">.../templates/mysite</code> and <code class=\"notranslate\">.../templates/default</code> in this order. The <code class=\"notranslate\">page.twig</code> template, stored in <code class=\"notranslate\">.../templates/default</code> reads as follows:</p> <pre>{# page.twig #}\n{% extends \"layout.twig\" %}\n\n{% block content %}\n{% endblock %}\n</pre> <p>You can replace this template by putting a file with the same name in <code class=\"notranslate\">.../templates/mysite</code>. And if you want to extend the original template, you might be tempted to write the following:</p> <pre>{# page.twig in .../templates/mysite #}\n{% extends \"page.twig\" %} {# from .../templates/default #}\n</pre> <p>Of course, this will not work as Twig will always load the template from <code class=\"notranslate\">.../templates/mysite</code>.</p> <p>It turns out it is possible to get this to work, by adding a directory right at the end of your template directories, which is the parent of all of the other directories: <code class=\"notranslate\">.../templates</code> in our case. This has the effect of making every template file within our system uniquely addressable. Most of the time you will use the \"normal\" paths, but in the special case of wanting to extend a template with an overriding version of itself we can reference its parent's full, unambiguous template path in the extends tag:</p> <pre>{# page.twig in .../templates/mysite #}\n{% extends \"default/page.twig\" %} {# from .../templates #}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">This recipe was inspired by the following Django wiki page: <a class=\"reference external\" href=\"http://code.djangoproject.com/wiki/ExtendingTemplates\">http://code.djangoproject.com/wiki/ExtendingTemplates</a></p> </div>   <h2 id=\"customizing-the-syntax\">Customizing the Syntax</h2> <p>Twig allows some syntax customization for the block delimiters. It's not recommended to use this feature as templates will be tied with your custom syntax. But for specific projects, it can make sense to change the defaults.</p> <p>To change the block delimiters, you need to create your own lexer object:</p> <pre>$twig = new Twig_Environment();\n\n$lexer = new Twig_Lexer($twig, array(\n    'tag_comment'   =&gt; array('{#', '#}'),\n    'tag_block'     =&gt; array('{%', '%}'),\n    'tag_variable'  =&gt; array('{{', '}}'),\n    'interpolation' =&gt; array('#{', '}'),\n));\n$twig-&gt;setLexer($lexer);\n</pre> <p>Here are some configuration example that simulates some other template engines syntax:</p> <pre>// Ruby erb syntax\n$lexer = new Twig_Lexer($twig, array(\n    'tag_comment'  =&gt; array('&lt;%#', '%&gt;'),\n    'tag_block'    =&gt; array('&lt;%', '%&gt;'),\n    'tag_variable' =&gt; array('&lt;%=', '%&gt;'),\n));\n\n// SGML Comment Syntax\n$lexer = new Twig_Lexer($twig, array(\n    'tag_comment'  =&gt; array('&lt;!--#', '--&gt;'),\n    'tag_block'    =&gt; array('&lt;!--', '--&gt;'),\n    'tag_variable' =&gt; array('${', '}'),\n));\n\n// Smarty like\n$lexer = new Twig_Lexer($twig, array(\n    'tag_comment'  =&gt; array('{*', '*}'),\n    'tag_block'    =&gt; array('{', '}'),\n    'tag_variable' =&gt; array('{$', '}'),\n));\n</pre>   <h2 id=\"using-dynamic-object-properties\">Using dynamic Object Properties</h2> <p>When Twig encounters a variable like <code class=\"notranslate\">article.title</code>, it tries to find a <code class=\"notranslate\">title</code> public property in the <code class=\"notranslate\">article</code> object.</p> <p>It also works if the property does not exist but is rather defined dynamically thanks to the magic <code class=\"notranslate\">__get()</code> method; you just need to also implement the <code class=\"notranslate\">__isset()</code> magic method like shown in the following snippet of code:</p> <pre>class Article\n{\n    public function __get($name)\n    {\n        if ('title' == $name) {\n            return 'The title';\n        }\n\n        // throw some kind of error\n    }\n\n    public function __isset($name)\n    {\n        if ('title' == $name) {\n            return true;\n        }\n\n        return false;\n    }\n}\n</pre>   <h2 id=\"accessing-the-parent-context-in-nested-loops\">Accessing the parent Context in Nested Loops</h2> <p>Sometimes, when using nested loops, you need to access the parent context. The parent context is always accessible via the <code class=\"notranslate\">loop.parent</code> variable. For instance, if you have the following template data:</p> <pre>$data = array(\n    'topics' =&gt; array(\n        'topic1' =&gt; array('Message 1 of topic 1', 'Message 2 of topic 1'),\n        'topic2' =&gt; array('Message 1 of topic 2', 'Message 2 of topic 2'),\n    ),\n);\n</pre> <p>And the following template to display all messages in all topics:</p> <pre>{% for topic, messages in topics %}\n    * {{ loop.index }}: {{ topic }}\n  {% for message in messages %}\n      - {{ loop.parent.loop.index }}.{{ loop.index }}: {{ message }}\n  {% endfor %}\n{% endfor %}\n</pre> <p>The output will be similar to:</p> <pre>* 1: topic1\n  - 1.1: The message 1 of topic 1\n  - 1.2: The message 2 of topic 1\n* 2: topic2\n  - 2.1: The message 1 of topic 2\n  - 2.2: The message 2 of topic 2\n</pre> <p>In the inner loop, the <code class=\"notranslate\">loop.parent</code> variable is used to access the outer context. So, the index of the current <code class=\"notranslate\">topic</code> defined in the outer for loop is accessible via the <code class=\"notranslate\">loop.parent.loop.index</code> variable.</p>   <h2 id=\"defining-undefined-functions-and-filters-on-the-fly\">Defining undefined Functions and Filters on the Fly</h2> <p>When a function (or a filter) is not defined, Twig defaults to throw a <code class=\"notranslate\">Twig_Error_Syntax</code> exception. However, it can also call a <a class=\"reference external\" href=\"http://www.php.net/manual/en/function.is-callable.php\">callback</a> (any valid PHP callable) which should return a function (or a filter).</p> <p>For filters, register callbacks with <code class=\"notranslate\">registerUndefinedFilterCallback()</code>. For functions, use <code class=\"notranslate\">registerUndefinedFunctionCallback()</code>:</p> <pre>// auto-register all native PHP functions as Twig functions\n// don't try this at home as it's not secure at all!\n$twig-&gt;registerUndefinedFunctionCallback(function ($name) {\n    if (function_exists($name)) {\n        return new Twig_SimpleFunction($name, $name);\n    }\n\n    return false;\n});\n</pre> <p>If the callable is not able to return a valid function (or filter), it must return <code class=\"notranslate\">false</code>.</p> <p>If you register more than one callback, Twig will call them in turn until one does not return <code class=\"notranslate\">false</code>.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">As the resolution of functions and filters is done during compilation, there is no overhead when registering these callbacks.</p> </div>   <h2 id=\"validating-the-template-syntax\">Validating the Template Syntax</h2> <p>When template code is provided by a third-party (through a web interface for instance), it might be interesting to validate the template syntax before saving it. If the template code is stored in a <cite>$template</cite> variable, here is how you can do it:</p> <pre>try {\n    $twig-&gt;parse($twig-&gt;tokenize($template));\n\n    // the $template is valid\n} catch (Twig_Error_Syntax $e) {\n    // $template contains one or more syntax errors\n}\n</pre> <p>If you iterate over a set of files, you can pass the filename to the <code class=\"notranslate\">tokenize()</code> method to get the filename in the exception message:</p> <pre>foreach ($files as $file) {\n    try {\n        $twig-&gt;parse($twig-&gt;tokenize($template, $file));\n\n        // the $template is valid\n    } catch (Twig_Error_Syntax $e) {\n        // $template contains one or more syntax errors\n    }\n}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">This method won't catch any sandbox policy violations because the policy is enforced during template rendering (as Twig needs the context for some checks like allowed methods on objects).</p> </div>   <h2 id=\"refreshing-modified-templates-when-opcache-or-apc-is-enabled\">Refreshing modified Templates when OPcache or APC is enabled</h2> <p>When using OPcache with <code class=\"notranslate\">opcache.validate_timestamps</code> set to <code class=\"notranslate\">0</code> or APC with <code class=\"notranslate\">apc.stat</code> set to <code class=\"notranslate\">0</code> and Twig cache enabled, clearing the template cache won't update the cache.</p> <p>To get around this, force Twig to invalidate the bytecode cache:</p> <pre>$twig = new Twig_Environment($loader, array(\n    'cache' =&gt; new Twig_Cache_Filesystem('/some/cache/path', Twig_Cache_Filesystem::FORCE_BYTECODE_INVALIDATION),\n    // ...\n));\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>Before Twig 1.22, you should extend <code class=\"notranslate\">Twig_Environment</code> instead:</p> <pre>class OpCacheAwareTwigEnvironment extends Twig_Environment\n{\n    protected function writeCacheFile($file, $content)\n    {\n        parent::writeCacheFile($file, $content);\n\n        // Compile cached file into bytecode cache\n        if (function_exists('opcache_invalidate')) {\n            opcache_invalidate($file, true);\n        } elseif (function_exists('apc_compile_file')) {\n            apc_compile_file($file);\n        }\n    }\n}\n</pre> </div>   <h2 id=\"reusing-a-stateful-node-visitor\">Reusing a stateful Node Visitor</h2> <p>When attaching a visitor to a <code class=\"notranslate\">Twig_Environment</code> instance, Twig uses it to visit <em>all</em> templates it compiles. If you need to keep some state information around, you probably want to reset it when visiting a new template.</p> <p>This can be easily achieved with the following code:</p> <pre>protected $someTemplateState = array();\n\npublic function enterNode(Twig_NodeInterface $node, Twig_Environment $env)\n{\n    if ($node instanceof Twig_Node_Module) {\n        // reset the state as we are entering a new template\n        $this-&gt;someTemplateState = array();\n    }\n\n    // ...\n\n    return $node;\n}\n</pre>   <h2 id=\"using-a-database-to-store-templates\">Using a Database to store Templates</h2> <p>If you are developing a CMS, templates are usually stored in a database. This recipe gives you a simple PDO template loader you can use as a starting point for your own.</p> <p>First, let's create a temporary in-memory SQLite3 database to work with:</p> <pre>$dbh = new PDO('sqlite::memory:');\n$dbh-&gt;exec('CREATE TABLE templates (name STRING, source STRING, last_modified INTEGER)');\n$base = '{% block content %}{% endblock %}';\n$index = '\n{% extends \"base.twig\" %}\n{% block content %}Hello {{ name }}{% endblock %}\n';\n$now = time();\n$dbh-&gt;exec(\"INSERT INTO templates (name, source, last_modified) VALUES ('base.twig', '$base', $now)\");\n$dbh-&gt;exec(\"INSERT INTO templates (name, source, last_modified) VALUES ('index.twig', '$index', $now)\");\n</pre> <p>We have created a simple <code class=\"notranslate\">templates</code> table that hosts two templates: <code class=\"notranslate\">base.twig</code> and <code class=\"notranslate\">index.twig</code>.</p> <p>Now, let's define a loader able to use this database:</p> <pre>class DatabaseTwigLoader implements Twig_LoaderInterface, Twig_ExistsLoaderInterface\n{\n    protected $dbh;\n\n    public function __construct(PDO $dbh)\n    {\n        $this-&gt;dbh = $dbh;\n    }\n\n    public function getSource($name)\n    {\n        if (false === $source = $this-&gt;getValue('source', $name)) {\n            throw new Twig_Error_Loader(sprintf('Template \"%s\" does not exist.', $name));\n        }\n\n        return $source;\n    }\n\n    // Twig_ExistsLoaderInterface as of Twig 1.11\n    public function exists($name)\n    {\n        return $name === $this-&gt;getValue('name', $name);\n    }\n\n    public function getCacheKey($name)\n    {\n        return $name;\n    }\n\n    public function isFresh($name, $time)\n    {\n        if (false === $lastModified = $this-&gt;getValue('last_modified', $name)) {\n            return false;\n        }\n\n        return $lastModified &lt;= $time;\n    }\n\n    protected function getValue($column, $name)\n    {\n        $sth = $this-&gt;dbh-&gt;prepare('SELECT '.$column.' FROM templates WHERE name = :name');\n        $sth-&gt;execute(array(':name' =&gt; (string) $name));\n\n        return $sth-&gt;fetchColumn();\n    }\n}\n</pre> <p>Finally, here is an example on how you can use it:</p> <pre>$loader = new DatabaseTwigLoader($dbh);\n$twig = new Twig_Environment($loader);\n\necho $twig-&gt;render('index.twig', array('name' =&gt; 'Fabien'));\n</pre>   <h2 id=\"using-different-template-sources\">Using different Template Sources</h2> <p>This recipe is the continuation of the previous one. Even if you store the contributed templates in a database, you might want to keep the original/base templates on the filesystem. When templates can be loaded from different sources, you need to use the <code class=\"notranslate\">Twig_Loader_Chain</code> loader.</p> <p>As you can see in the previous recipe, we reference the template in the exact same way as we would have done it with a regular filesystem loader. This is the key to be able to mix and match templates coming from the database, the filesystem, or any other loader for that matter: the template name should be a logical name, and not the path from the filesystem:</p> <pre>$loader1 = new DatabaseTwigLoader($dbh);\n$loader2 = new Twig_Loader_Array(array(\n    'base.twig' =&gt; '{% block content %}{% endblock %}',\n));\n$loader = new Twig_Loader_Chain(array($loader1, $loader2));\n\n$twig = new Twig_Environment($loader);\n\necho $twig-&gt;render('index.twig', array('name' =&gt; 'Fabien'));\n</pre> <p>Now that the <code class=\"notranslate\">base.twig</code> templates is defined in an array loader, you can remove it from the database, and everything else will still work as before.</p>   <h2 id=\"loading-a-template-from-a-string\">Loading a Template from a String</h2> <p>From a template, you can easily load a template stored in a string via the <code class=\"notranslate\">template_from_string</code> function (available as of Twig 1.11 via the <code class=\"notranslate\">Twig_Extension_StringLoader</code> extension):</p> <pre>{{ include(template_from_string(\"Hello {{ name }}\")) }}\n</pre> <p>From PHP, it's also possible to load a template stored in a string via <code class=\"notranslate\">Twig_Environment::createTemplate()</code> (available as of Twig 1.18):</p> <pre>$template = $twig-&gt;createTemplate('hello {{ name }}');\necho $template-&gt;render(array('name' =&gt; 'Fabien'));\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Never use the <code class=\"notranslate\">Twig_Loader_String</code> loader, which has severe limitations.</p> </div>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Deprecated Features\" href=\"http://twig.sensiolabs.org/doc/deprecated.html\"> « Deprecated Features </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Coding Standards\" href=\"coding_standards\"> Coding Standards » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/recipes.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/recipes.html</a>\n  </p>\n</div>\n","tags/use":"<h1 id=\"use\">use</h1> <div class=\"versionadded\"> <p><span>New in version 1.1: </span>Horizontal reuse was added in Twig 1.1.</p> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Horizontal reuse is an advanced Twig feature that is hardly ever needed in regular templates. It is mainly used by projects that need to make template blocks reusable without using inheritance.</p> </div> <p>Template inheritance is one of the most powerful features of Twig but it is limited to single inheritance; a template can only extend one other template. This limitation makes template inheritance simple to understand and easy to debug:</p> <pre>{% extends \"base.html\" %}\n\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n</pre> <p>Horizontal reuse is a way to achieve the same goal as multiple inheritance, but without the associated complexity:</p> <pre>{% extends \"base.html\" %}\n\n{% use \"blocks.html\" %}\n\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n</pre> <p>The <code class=\"notranslate\">use</code> statement tells Twig to import the blocks defined in <code class=\"notranslate\">blocks.html</code> into the current template (it's like macros, but for blocks):</p> <pre>{# blocks.html #}\n\n{% block sidebar %}{% endblock %}\n</pre> <p>In this example, the <code class=\"notranslate\">use</code> statement imports the <code class=\"notranslate\">sidebar</code> block into the main template. The code is mostly equivalent to the following one (the imported blocks are not outputted automatically):</p> <pre>{% extends \"base.html\" %}\n\n{% block sidebar %}{% endblock %}\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"notranslate\">use</code> tag only imports a template if it does not extend another template, if it does not define macros, and if the body is empty. But it can <em>use</em> other templates.</p> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Because <code class=\"notranslate\">use</code> statements are resolved independently of the context passed to the template, the template reference cannot be an expression.</p> </div> <p>The main template can also override any imported block. If the template already defines the <code class=\"notranslate\">sidebar</code> block, then the one defined in <code class=\"notranslate\">blocks.html</code> is ignored. To avoid name conflicts, you can rename imported blocks:</p> <pre>{% extends \"base.html\" %}\n\n{% use \"blocks.html\" with sidebar as base_sidebar, title as base_title %}\n\n{% block sidebar %}{% endblock %}\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n</pre> <div class=\"versionadded\"> <p><span>New in version 1.3: </span>The <code class=\"notranslate\">parent()</code> support was added in Twig 1.3.</p> </div> <p>The <code class=\"notranslate\">parent()</code> function automatically determines the correct inheritance tree, so it can be used when overriding a block defined in an imported template:</p> <pre>{% extends \"base.html\" %}\n\n{% use \"blocks.html\" %}\n\n{% block sidebar %}\n    {{ parent() }}\n{% endblock %}\n\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n</pre> <p>In this example, <code class=\"notranslate\">parent()</code> will correctly call the <code class=\"notranslate\">sidebar</code> block from the <code class=\"notranslate\">blocks.html</code> template.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p>In Twig 1.2, renaming allows you to simulate inheritance by calling the \"parent\" block:</p> <pre>{% extends \"base.html\" %}\n\n{% use \"blocks.html\" with sidebar as parent_sidebar %}\n\n{% block sidebar %}\n    {{ block('parent_sidebar') }}\n{% endblock %}\n</pre> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">You can use as many <code class=\"notranslate\">use</code> statements as you want in any given template. If two imported templates define the same block, the latest one wins.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"spaceless\" href=\"spaceless\"> « spaceless </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"verbatim\" href=\"verbatim\"> verbatim » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tags/use.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tags/use.html</a>\n  </p>\n</div>\n","filters/capitalize":"<h1 id=\"capitalize\">capitalize</h1> <p>The <code class=\"notranslate\">capitalize</code> filter capitalizes a value. The first character will be uppercase, all others lowercase:</p> <pre>{{ 'my first car'|capitalize }}\n\n{# outputs 'My first car' #}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"batch\" href=\"batch\"> « batch </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"convert_encoding\" href=\"convert_encoding\"> convert_encoding » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/capitalize.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/capitalize.html</a>\n  </p>\n</div>\n","filters/convert_encoding":"<h1 id=\"convert-encoding\">convert_encoding</h1> <div class=\"versionadded\"> <p><span>New in version 1.4: </span>The <code class=\"notranslate\">convert_encoding</code> filter was added in Twig 1.4.</p> </div> <p>The <code class=\"notranslate\">convert_encoding</code> filter converts a string from one encoding to another. The first argument is the expected output charset and the second one is the input charset:</p> <pre>{{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">This filter relies on the <a class=\"reference external\" href=\"http://php.net/iconv\">iconv</a> or <a class=\"reference external\" href=\"http://php.net/mbstring\">mbstring</a> extension, so one of them must be installed. In case both are installed, <a class=\"reference external\" href=\"http://php.net/mbstring\">mbstring</a> is used by default (Twig before 1.8.1 uses <a class=\"reference external\" href=\"http://php.net/iconv\">iconv</a> by default).</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">to</code>: The output charset</li> <li>\n<code class=\"notranslate\">from</code>: The input charset</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"capitalize\" href=\"capitalize\"> « capitalize </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"date\" href=\"date\"> date » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/convert_encoding.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/convert_encoding.html</a>\n  </p>\n</div>\n","filters/date":"<h1 id=\"date\">date</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.1: </span>The timezone support has been added in Twig 1.1.</div> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.5: </span>The default date format support has been added in Twig 1.5.</div> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.6.1: </span>The default timezone support has been added in Twig 1.6.1.</div> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.11.0: </span>The introduction of the false value for the timezone was introduced in Twig 1.11.0</div> <p>The <code class=\"notranslate\">date</code> filter formats a date to a given format:</p> <pre>{{ post.published_at|date(\"m/d/Y\") }}\n</pre> <p>The format specifier is the same as supported by <a class=\"reference external\" href=\"http://www.php.net/date\">date</a>, except when the filtered data is of type <a class=\"reference external\" href=\"http://www.php.net/DateInterval\">DateInterval</a>, when the format must conform to <a class=\"reference external\" href=\"http://www.php.net/DateInterval.format\">DateInterval::format</a> instead.</p> <p>The <code class=\"notranslate\">date</code> filter accepts strings (it must be in a format supported by the <a class=\"reference external\" href=\"http://www.php.net/strtotime\">strtotime</a> function), <a class=\"reference external\" href=\"http://www.php.net/DateTime\">DateTime</a> instances, or <a class=\"reference external\" href=\"http://www.php.net/DateInterval\">DateInterval</a> instances. For instance, to display the current date, filter the word \"now\":</p> <pre>{{ \"now\"|date(\"m/d/Y\") }}\n</pre> <p>To escape words and characters in the date format use <code class=\"notranslate\">\\\\</code> in front of each character:</p> <pre>{{ post.published_at|date(\"F jS \\\\a\\\\t g:ia\") }}\n</pre> <p>If the value passed to the <code class=\"notranslate\">date</code> filter is <code class=\"notranslate\">null</code>, it will return the current date by default. If an empty string is desired instead of the current date, use a ternary operator:</p> <pre>{{ post.published_at is empty ? \"\" : post.published_at|date(\"m/d/Y\") }}</pre> <p>If no format is provided, Twig will use the default one: <code class=\"notranslate\">F j, Y H:i</code>. This default can be easily changed by calling the <code class=\"notranslate\">setDateFormat()</code> method on the <code class=\"notranslate\">core</code> extension instance. The first argument is the default format for dates and the second one is the default format for date intervals:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;getExtension('core')-&gt;setDateFormat('d/m/Y', '%d days');\n</pre>  <h2 id=\"timezone\">Timezone</h2> <p>By default, the date is displayed by applying the default timezone (the one specified in php.ini or declared in Twig -- see below), but you can override it by explicitly specifying a timezone:</p> <pre>{{ post.published_at|date(\"m/d/Y\", \"Europe/Paris\") }}\n</pre> <p>If the date is already a DateTime object, and if you want to keep its current timezone, pass <code class=\"notranslate\">false</code> as the timezone value:</p> <pre>{{ post.published_at|date(\"m/d/Y\", false) }}\n</pre> <p>The default timezone can also be set globally by calling <code class=\"notranslate\">setTimezone()</code>:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;getExtension('core')-&gt;setTimezone('Europe/Paris');\n</pre>   <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">format</code>: The date format</li> <li>\n<code class=\"notranslate\">timezone</code>: The date timezone</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"convert_encoding\" href=\"convert_encoding\"> « convert_encoding </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"date_modify\" href=\"date_modify\"> date_modify » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/date.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/date.html</a>\n  </p>\n</div>\n","filters/date_modify":"<h1 id=\"date-modify\">date_modify</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.9.0: </span>The date_modify filter has been added in Twig 1.9.0.</div> <p>The <code class=\"notranslate\">date_modify</code> filter modifies a date with a given modifier string:</p> <pre>{{ post.published_at|date_modify(\"+1 day\")|date(\"m/d/Y\") }}\n</pre> <p>The <code class=\"notranslate\">date_modify</code> filter accepts strings (it must be in a format supported by the <a class=\"reference external\" href=\"http://www.php.net/strtotime\">strtotime</a> function) or <a class=\"reference external\" href=\"http://www.php.net/DateTime\">DateTime</a> instances. You can easily combine it with the <a class=\"reference internal\" href=\"date\">date</a> filter for formatting.</p>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">modifier</code>: The modifier</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"date\" href=\"date\"> « date </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"default\" href=\"default\"> default » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/date_modify.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/date_modify.html</a>\n  </p>\n</div>\n","filters/default":"<h1 id=\"default\">default</h1> <p>The <code class=\"notranslate\">default</code> filter returns the passed default value if the value is undefined or empty, otherwise the value of the variable:</p> <pre>{{ var|default('var is not defined') }}\n\n{{ var.foo|default('foo item on var is not defined') }}\n\n{{ var['foo']|default('foo item on var is not defined') }}\n\n{{ ''|default('passed var is empty')  }}\n</pre> <p>When using the <code class=\"notranslate\">default</code> filter on an expression that uses variables in some method calls, be sure to use the <code class=\"notranslate\">default</code> filter whenever a variable can be undefined:</p> <pre>{{ var.method(foo|default('foo'))|default('foo') }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Read the documentation for the <a class=\"reference internal\" href=\"../tests/defined\">defined</a> and <a class=\"reference internal\" href=\"../tests/empty\">empty</a> tests to learn more about their semantics.</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">default</code>: The default value</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"date_modify\" href=\"date_modify\"> « date_modify </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"escape\" href=\"escape\"> escape » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/default.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/default.html</a>\n  </p>\n</div>\n","filters/escape":"<h1 id=\"escape\">escape</h1> <div class=\"versionadded\"> <p><span>New in version 1.9.0: </span>The <code class=\"notranslate\">css</code>, <code class=\"notranslate\">url</code>, and <code class=\"notranslate\">html_attr</code> strategies were added in Twig 1.9.0.</p> </div> <div class=\"versionadded\"> <p><span>New in version 1.14.0: </span>The ability to define custom escapers was added in Twig 1.14.0.</p> </div> <p>The <code class=\"notranslate\">escape</code> filter escapes a string for safe insertion into the final output. It supports different escaping strategies depending on the template context.</p> <p>By default, it uses the HTML escaping strategy:</p> <pre>{{ user.username|escape }}\n</pre> <p>For convenience, the <code class=\"notranslate\">e</code> filter is defined as an alias:</p> <pre>{{ user.username|e }}\n</pre> <p>The <code class=\"notranslate\">escape</code> filter can also be used in other contexts than HTML thanks to an optional argument which defines the escaping strategy to use:</p> <pre>{{ user.username|e }}\n{# is equivalent to #}\n{{ user.username|e('html') }}\n</pre> <p>And here is how to escape variables included in JavaScript code:</p> <pre>{{ user.username|escape('js') }}\n{{ user.username|e('js') }}\n</pre> <p>The <code class=\"notranslate\">escape</code> filter supports the following escaping strategies:</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">html</code>: escapes a string for the <strong>HTML body</strong> context.</li> <li>\n<code class=\"notranslate\">js</code>: escapes a string for the <strong>JavaScript context</strong>.</li> <li>\n<code class=\"notranslate\">css</code>: escapes a string for the <strong>CSS context</strong>. CSS escaping can be applied to any string being inserted into CSS and escapes everything except alphanumerics.</li> <li>\n<code class=\"notranslate\">url</code>: escapes a string for the <strong>URI or parameter contexts</strong>. This should not be used to escape an entire URI; only a subcomponent being inserted.</li> <li>\n<code class=\"notranslate\">html_attr</code>: escapes a string for the <strong>HTML attribute</strong> context.</li> </ul>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, <code class=\"notranslate\">escape</code> uses the PHP native <a class=\"reference external\" href=\"http://php.net/htmlspecialchars\">htmlspecialchars</a> function for the HTML escaping strategy.</p> </div>  \n<div class=\"admonition admonition-caution\">\n<p class=\"first admonition-title\">Caution</p> <p>When using automatic escaping, Twig tries to not double-escape a variable when the automatic escaping strategy is the same as the one applied by the escape filter; but that does not work when using a variable as the escaping strategy:</p> <pre>{% set strategy = 'html' %}\n\n{% autoescape 'html' %}\n    {{ var|escape('html') }}   {# won't be double-escaped #}\n    {{ var|escape(strategy) }} {# will be double-escaped #}\n{% endautoescape %}\n</pre> <p>When using a variable as the escaping strategy, you should disable automatic escaping:</p> <pre>{% set strategy = 'html' %}\n\n{% autoescape 'html' %}\n    {{ var|escape(strategy)|raw }} {# won't be double-escaped #}\n{% endautoescape %}\n</pre> </div>  <h2 id=\"custom-escapers\">Custom Escapers</h2> <p>You can define custom escapers by calling the <code class=\"notranslate\">setEscaper()</code> method on the <code class=\"notranslate\">core</code> extension instance. The first argument is the escaper name (to be used in the <code class=\"notranslate\">escape</code> call) and the second one must be a valid PHP callable:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;getExtension('core')-&gt;setEscaper('csv', 'csv_escaper');\n</pre> <p>When called by Twig, the callable receives the Twig environment instance, the string to escape, and the charset.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Built-in escapers cannot be overridden mainly they should be considered as the final implementation and also for better performance.</p> </div>   <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">strategy</code>: The escaping strategy</li> <li>\n<code class=\"notranslate\">charset</code>: The string charset</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"default\" href=\"default\"> « default </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"first\" href=\"first\"> first » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/escape.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/escape.html</a>\n  </p>\n</div>\n","filters/first":"<h1 id=\"first\">first</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.12.2: </span>The <code class=\"notranslate\">first</code> filter was added in Twig 1.12.2.</div> <p>The <code class=\"notranslate\">first</code> filter returns the first \"element\" of a sequence, a mapping, or a string:</p> <pre>{{ [1, 2, 3, 4]|first }}\n{# outputs 1 #}\n\n{{ { a: 1, b: 2, c: 3, d: 4 }|first }}\n{# outputs 1 #}\n\n{{ '1234'|first }}\n{# outputs 1 #}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">It also works with objects implementing the <a class=\"reference external\" href=\"http://php.net/manual/en/class.traversable.php\">Traversable</a> interface.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"escape\" href=\"escape\"> « escape </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"format\" href=\"format\"> format » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/first.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/first.html</a>\n  </p>\n</div>\n","filters/format":"<h1 id=\"format\">format</h1> <p>The <code class=\"notranslate\">format</code> filter formats a given string by replacing the placeholders (placeholders follows the <a class=\"reference external\" href=\"http://www.php.net/sprintf\">sprintf</a> notation):</p> <pre>{{ \"I like %s and %s.\"|format(foo, \"bar\") }}\n\n{# outputs I like foo and bar\n   if the foo parameter equals to the foo string. #}\n</pre>  \n<div class=\"admonition admonition-seealso\"><a class=\"reference internal\" href=\"replace\">replace</a></div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"first\" href=\"first\"> « first </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"join\" href=\"join\"> join » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/format.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/format.html</a>\n  </p>\n</div>\n","filters/join":"<h1 id=\"join\">join</h1> <p>The <code class=\"notranslate\">join</code> filter returns a string which is the concatenation of the items of a sequence:</p> <pre>{{ [1, 2, 3]|join }}\n{# returns 123 #}\n</pre> <p>The separator between elements is an empty string per default, but you can define it with the optional first parameter:</p> <pre>{{ [1, 2, 3]|join('|') }}\n{# outputs 1|2|3 #}\n</pre>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">glue</code>: The separator</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"format\" href=\"format\"> « format </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"json_encode\" href=\"json_encode\"> json_encode » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/join.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/join.html</a>\n  </p>\n</div>\n","filters/json_encode":"<h1 id=\"json-encode\">json_encode</h1> <p>The <code class=\"notranslate\">json_encode</code> filter returns the JSON representation of a value:</p> <pre>{{ data|json_encode() }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/json_encode\">json_encode</a> function.</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">options</code>: A bitmask of <a class=\"reference external\" href=\"http://www.php.net/manual/en/json.constants.php\">json_encode options</a> (<code class=\"notranslate\">{{\ndata|json_encode(constant('JSON_PRETTY_PRINT')) }}</code>)</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"join\" href=\"join\"> « join </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"keys\" href=\"keys\"> keys » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/json_encode.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/json_encode.html</a>\n  </p>\n</div>\n","filters/keys":"<h1 id=\"keys\">keys</h1> <p>The <code class=\"notranslate\">keys</code> filter returns the keys of an array. It is useful when you want to iterate over the keys of an array:</p> <pre>{% for key in array|keys %}\n    ...\n{% endfor %}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"json_encode\" href=\"json_encode\"> « json_encode </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"last\" href=\"last\"> last » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/keys.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/keys.html</a>\n  </p>\n</div>\n","filters/last":"<h1 id=\"last\">last</h1> <div class=\"versionadded\"> <p><span>New in version 1.12.2: </span>The <code class=\"notranslate\">last</code> filter was added in Twig 1.12.2.</p> </div> <p>The <code class=\"notranslate\">last</code> filter returns the last \"element\" of a sequence, a mapping, or a string:</p> <pre>{{ [1, 2, 3, 4]|last }}\n{# outputs 4 #}\n\n{{ { a: 1, b: 2, c: 3, d: 4 }|last }}\n{# outputs 4 #}\n\n{{ '1234'|last }}\n{# outputs 4 #}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">It also works with objects implementing the <a class=\"reference external\" href=\"http://php.net/manual/en/class.traversable.php\">Traversable</a> interface.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"keys\" href=\"keys\"> « keys </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"length\" href=\"length\"> length » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/last.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/last.html</a>\n  </p>\n</div>\n","filters/length":"<h1 id=\"length\">length</h1> <p>The <code class=\"notranslate\">length</code> filter returns the number of items of a sequence or mapping, or the length of a string:</p> <pre>{% if users|length &gt; 10 %}\n    ...\n{% endif %}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"last\" href=\"last\"> « last </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"lower\" href=\"lower\"> lower » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/length.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/length.html</a>\n  </p>\n</div>\n","filters/lower":"<h1 id=\"lower\">lower</h1> <p>The <code class=\"notranslate\">lower</code> filter converts a value to lowercase:</p> <pre>{{ 'WELCOME'|lower }}\n\n{# outputs 'welcome' #}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"length\" href=\"length\"> « length </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"merge\" href=\"merge\"> merge » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/lower.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/lower.html</a>\n  </p>\n</div>\n","filters/merge":"<h1 id=\"merge\">merge</h1> <p>The <code class=\"notranslate\">merge</code> filter merges an array with another array:</p> <pre>{% set values = [1, 2] %}\n\n{% set values = values|merge(['apple', 'orange']) %}\n\n{# values now contains [1, 2, 'apple', 'orange'] #}\n</pre> <p>New values are added at the end of the existing ones.</p> <p>The <code class=\"notranslate\">merge</code> filter also works on hashes:</p> <pre>{% set items = { 'apple': 'fruit', 'orange': 'fruit', 'peugeot': 'unknown' } %}\n\n{% set items = items|merge({ 'peugeot': 'car', 'renault': 'car' }) %}\n\n{# items now contains { 'apple': 'fruit', 'orange': 'fruit', 'peugeot': 'car', 'renault': 'car' } #}\n</pre> <p>For hashes, the merging process occurs on the keys: if the key does not already exist, it is added but if the key already exists, its value is overridden.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p>If you want to ensure that some values are defined in an array (by given default values), reverse the two elements in the call:</p> <pre>{% set items = { 'apple': 'fruit', 'orange': 'fruit' } %}\n\n{% set items = { 'apple': 'unknown' }|merge(items) %}\n\n{# items now contains { 'apple': 'fruit', 'orange': 'fruit' } #}\n</pre> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/array_merge\">array_merge</a> function. It supports Traversable objects by transforming those to arrays.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"lower\" href=\"lower\"> « lower </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"nl2br\" href=\"nl2br\"> nl2br » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/merge.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/merge.html</a>\n  </p>\n</div>\n","templates":"<h1 id=\"twig-for-template-designers\">Twig for Template Designers</h1> <p>This document describes the syntax and semantics of the template engine and will be most useful as reference to those creating Twig templates.</p>  <h2 id=\"synopsis\">Synopsis</h2> <p>A template is simply a text file. It can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). It doesn't have a specific extension, <code class=\"notranslate\">.html</code> or <code class=\"notranslate\">.xml</code> are just fine.</p> <p>A template contains <strong>variables</strong> or <strong>expressions</strong>, which get replaced with values when the template is evaluated, and <strong>tags</strong>, which control the logic of the template.</p> <p>Below is a minimal template that illustrates a few basics. We will cover further details later on:</p> <pre>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My Webpage&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ul id=\"navigation\"&gt;\n        {% for item in navigation %}\n            &lt;li&gt;&lt;a href=\"{{ item.href }}\"&gt;{{ item.caption }}&lt;/a&gt;&lt;/li&gt;\n        {% endfor %}\n        &lt;/ul&gt;\n\n        &lt;h1&gt;My Webpage&lt;/h1&gt;\n        {{ a_variable }}\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>There are two kinds of delimiters: <code class=\"notranslate\">{% ... %}</code> and <code class=\"notranslate\">{{ ... }}</code>. The first one is used to execute statements such as for-loops, the latter prints the result of an expression to the template.</p>   <h2 id=\"ides-integration\">IDEs Integration</h2> <p>Many IDEs support syntax highlighting and auto-completion for Twig:</p> <ul class=\"simple\"> <li>\n<em>Textmate</em> via the <a class=\"reference external\" href=\"https://github.com/Anomareh/PHP-Twig.tmbundle\">Twig bundle</a>\n</li> <li>\n<em>Vim</em> via the <a class=\"reference external\" href=\"http://jinja.pocoo.org/docs/integration/#vim\">Jinja syntax plugin</a> or the <a class=\"reference external\" href=\"https://github.com/evidens/vim-twig\">vim-twig plugin</a>\n</li> <li>\n<em>Netbeans</em> via the <a class=\"reference external\" href=\"http://plugins.netbeans.org/plugin/37069/php-twig\">Twig syntax plugin</a> (until 7.1, native as of 7.2)</li> <li>\n<em>PhpStorm</em> (native as of 2.1)</li> <li>\n<em>Eclipse</em> via the <a class=\"reference external\" href=\"https://github.com/pulse00/Twig-Eclipse-Plugin\">Twig plugin</a>\n</li> <li>\n<em>Sublime Text</em> via the <a class=\"reference external\" href=\"https://github.com/Anomareh/PHP-Twig.tmbundle\">Twig bundle</a>\n</li> <li>\n<em>GtkSourceView</em> via the <a class=\"reference external\" href=\"https://github.com/gabrielcorpse/gedit-twig-template-language\">Twig language definition</a> (used by gedit and other projects)</li> <li>\n<em>Coda</em> and <em>SubEthaEdit</em> via the <a class=\"reference external\" href=\"https://github.com/bobthecow/Twig-HTML.mode\">Twig syntax mode</a>\n</li> <li>\n<em>Coda 2</em> via the <a class=\"reference external\" href=\"https://github.com/muxx/Twig-HTML.mode\">other Twig syntax mode</a>\n</li> <li>\n<em>Komodo</em> and <em>Komodo Edit</em> via the Twig highlight/syntax check mode</li> <li>\n<em>Notepad++</em> via the <a class=\"reference external\" href=\"https://github.com/Banane9/notepadplusplus-twig\">Notepad++ Twig Highlighter</a>\n</li> <li>\n<em>Emacs</em> via <a class=\"reference external\" href=\"http://web-mode.org/\">web-mode.el</a>\n</li> <li>\n<em>Atom</em> via the <a class=\"reference external\" href=\"https://github.com/reesef/php-twig\">PHP-twig for atom</a>\n</li> <li>\n<em>Visual Studio Code</em> via the <a class=\"reference external\" href=\"https://marketplace.visualstudio.com/items?itemName=bajdzis.vscode-twig-pack\">Twig pack</a>\n</li> </ul> <p>Also, <a class=\"reference external\" href=\"http://twigfiddle.com/\">TwigFiddle</a> is an online service that allows you to execute Twig templates from a browser; it supports all versions of Twig.</p>   <h2 id=\"variables\">Variables</h2> <p>The application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it.</p> <p>You can use a dot (<code class=\"notranslate\">.</code>) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array), or the so-called \"subscript\" syntax (<code class=\"notranslate\">[]</code>):</p> <pre>{{ foo.bar }}\n{{ foo['bar'] }}\n</pre> <p>When the attribute contains special characters (like <code class=\"notranslate\">-</code> that would be interpreted as the minus operator), use the <code class=\"notranslate\">attribute</code> function instead to access the variable attribute:</p> <pre>{# equivalent to the non-working foo.data-foo #}\n{{ attribute(foo, 'data-foo') }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">It's important to know that the curly braces are <em>not</em> part of the variable but the print statement. When accessing variables inside tags, don't put the braces around them.</p> </div> <p>If a variable or attribute does not exist, you will receive a <code class=\"notranslate\">null</code> value when the <code class=\"notranslate\">strict_variables</code> option is set to <code class=\"notranslate\">false</code>; alternatively, if <code class=\"notranslate\">strict_variables</code> is set, Twig will throw an error (see <a class=\"reference internal\" href=\"api#environment-options\">environment options</a>).</p>  \n<div class=\"admonition admonition-sidebar\">\n<p class=\"first sidebar-title\">Implementation</p> <p>For convenience's sake <code class=\"notranslate\">foo.bar</code> does the following things on the PHP layer:</p> <ul class=\"simple\"> <li>check if <code class=\"notranslate\">foo</code> is an array and <code class=\"notranslate\">bar</code> a valid element;</li> <li>if not, and if <code class=\"notranslate\">foo</code> is an object, check that <code class=\"notranslate\">bar</code> is a valid property;</li> <li>if not, and if <code class=\"notranslate\">foo</code> is an object, check that <code class=\"notranslate\">bar</code> is a valid method (even if <code class=\"notranslate\">bar</code> is the constructor - use <code class=\"notranslate\">__construct()</code> instead);</li> <li>if not, and if <code class=\"notranslate\">foo</code> is an object, check that <code class=\"notranslate\">getBar</code> is a valid method;</li> <li>if not, and if <code class=\"notranslate\">foo</code> is an object, check that <code class=\"notranslate\">isBar</code> is a valid method;</li> <li>if not, return a <code class=\"notranslate\">null</code> value.</li> </ul> <p><code class=\"notranslate\">foo['bar']</code> on the other hand only works with PHP arrays:</p> <ul class=\"last simple\"> <li>check if <code class=\"notranslate\">foo</code> is an array and <code class=\"notranslate\">bar</code> a valid element;</li> <li>if not, return a <code class=\"notranslate\">null</code> value.</li> </ul> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">If you want to access a dynamic attribute of a variable, use the <a class=\"reference internal\" href=\"functions/attribute\">attribute</a> function instead.</p> </div>  <h3 id=\"global-variables\">Global Variables</h3> <p>The following variables are always available in templates:</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">_self</code>: references the current template;</li> <li>\n<code class=\"notranslate\">_context</code>: references the current context;</li> <li>\n<code class=\"notranslate\">_charset</code>: references the current charset.</li> </ul>   <h3 id=\"setting-variables\">Setting Variables</h3> <p>You can assign values to variables inside code blocks. Assignments use the <a class=\"reference internal\" href=\"tags/set\">set</a> tag:</p> <pre>{% set foo = 'foo' %}\n{% set foo = [1, 2] %}\n{% set foo = {'foo': 'bar'} %}\n</pre>    <h2 id=\"filters\">Filters</h2> <p>Variables can be modified by <strong>filters</strong>. Filters are separated from the variable by a pipe symbol (<code class=\"notranslate\">|</code>) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.</p> <p>The following example removes all HTML tags from the <code class=\"notranslate\">name</code> and title-cases it:</p> <pre>{{ name|striptags|title }}\n</pre> <p>Filters that accept arguments have parentheses around the arguments. This example will join a list by commas:</p> <pre>{{ list|join(', ') }}\n</pre> <p>To apply a filter on a section of code, wrap it in the <a class=\"reference internal\" href=\"tags/filter\">filter</a> tag:</p> <pre>{% filter upper %}\n    This text becomes uppercase\n{% endfilter %}\n</pre> <p>Go to the <a class=\"reference internal\" href=\"filters/index\">filters</a> page to learn more about built-in filters.</p>   <h2 id=\"functions\">Functions</h2> <p>Functions can be called to generate content. Functions are called by their name followed by parentheses (<code class=\"notranslate\">()</code>) and may have arguments.</p> <p>For instance, the <code class=\"notranslate\">range</code> function returns a list containing an arithmetic progression of integers:</p> <pre>{% for i in range(0, 3) %}\n    {{ i }},\n{% endfor %}\n</pre> <p>Go to the <a class=\"reference internal\" href=\"functions/index\">functions</a> page to learn more about the built-in functions.</p>   <h2 id=\"named-arguments\">Named Arguments</h2> <div class=\"versionadded\"> <p><span>New in version 1.12: </span>Support for named arguments was added in Twig 1.12.</p> </div> <pre>{% for i in range(low=1, high=10, step=2) %}\n    {{ i }},\n{% endfor %}\n</pre> <p>Using named arguments makes your templates more explicit about the meaning of the values you pass as arguments:</p> <pre>{{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}\n\n{# versus #}\n\n{{ data|convert_encoding(from='iso-2022-jp', to='UTF-8') }}\n</pre> <p>Named arguments also allow you to skip some arguments for which you don't want to change the default value:</p> <pre>{# the first argument is the date format, which defaults to the global date format if null is passed #}\n{{ \"now\"|date(null, \"Europe/Paris\") }}\n\n{# or skip the format value by using a named argument for the time zone #}\n{{ \"now\"|date(timezone=\"Europe/Paris\") }}\n</pre> <p>You can also use both positional and named arguments in one call, in which case positional arguments must always come before named arguments:</p> <pre>{{ \"now\"|date('d/m/Y H:i', timezone=\"Europe/Paris\") }}\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">Each function and filter documentation page has a section where the names of all arguments are listed when supported.</p> </div>   <h2 id=\"control-structure\">Control Structure</h2> <p>A control structure refers to all those things that control the flow of a program - conditionals (i.e. <code class=\"notranslate\">if</code>/<code class=\"notranslate\">elseif</code>/<code class=\"notranslate\">else</code>), <code class=\"notranslate\">for</code>-loops, as well as things like blocks. Control structures appear inside <code class=\"notranslate\">{% ... %}</code> blocks.</p> <p>For example, to display a list of users provided in a variable called <code class=\"notranslate\">users</code>, use the <a class=\"reference internal\" href=\"tags/for\">for</a> tag:</p> <pre>&lt;h1&gt;Members&lt;/h1&gt;\n&lt;ul&gt;\n    {% for user in users %}\n        &lt;li&gt;{{ user.username|e }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</pre> <p>The <a class=\"reference internal\" href=\"tags/if\">if</a> tag can be used to test an expression:</p> <pre>{% if users|length &gt; 0 %}\n    &lt;ul&gt;\n        {% for user in users %}\n            &lt;li&gt;{{ user.username|e }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endif %}\n</pre> <p>Go to the <a class=\"reference internal\" href=\"tags/index\">tags</a> page to learn more about the built-in tags.</p>   <h2 id=\"comments\">Comments</h2> <p>To comment-out part of a line in a template, use the comment syntax <code class=\"notranslate\">{# ...\n#}</code>. This is useful for debugging or to add information for other template designers or yourself:</p> <pre>{# note: disabled template because we no longer use this\n    {% for user in users %}\n        ...\n    {% endfor %}\n#}\n</pre>   <h2 id=\"including-other-templates\">Including other Templates</h2> <p>The <a class=\"reference internal\" href=\"functions/include\">include</a> function is useful to include a template and return the rendered content of that template into the current one:</p> <pre>{{ include('sidebar.html') }}\n</pre> <p>By default, included templates have access to the same context as the template which includes them. This means that any variable defined in the main template will be available in the included template too:</p> <pre>{% for box in boxes %}\n    {{ include('render_box.html') }}\n{% endfor %}\n</pre> <p>The included template <code class=\"notranslate\">render_box.html</code> is able to access the <code class=\"notranslate\">box</code> variable.</p> <p>The filename of the template depends on the template loader. For instance, the <code class=\"notranslate\">Twig_Loader_Filesystem</code> allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</p> <pre>{{ include('sections/articles/sidebar.html') }}\n</pre> <p>This behavior depends on the application embedding Twig.</p>   <h2 id=\"template-inheritance\">Template Inheritance</h2> <p>The most powerful part of Twig is template inheritance. Template inheritance allows you to build a base \"skeleton\" template that contains all the common elements of your site and defines <strong>blocks</strong> that child templates can override.</p> <p>Sounds complicated but it is very basic. It's easier to understand it by starting with an example.</p> <p>Let's define a base template, <code class=\"notranslate\">base.html</code>, which defines a simple HTML skeleton document that you might use for a simple two-column page:</p> <pre>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        {% block head %}\n            &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n            &lt;title&gt;{% block title %}{% endblock %} - My Webpage&lt;/title&gt;\n        {% endblock %}\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"content\"&gt;{% block content %}{% endblock %}&lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            {% block footer %}\n                &amp;copy; Copyright 2011 by &lt;a href=\"http://domain.invalid/\"&gt;you&lt;/a&gt;.\n            {% endblock %}\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>In this example, the <a class=\"reference internal\" href=\"tags/block\">block</a> tags define four blocks that child templates can fill in. All the <code class=\"notranslate\">block</code> tag does is to tell the template engine that a child template may override those portions of the template.</p> <p>A child template might look like this:</p> <pre>{% extends \"base.html\" %}\n\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ parent() }}\n    &lt;style type=\"text/css\"&gt;\n        .important { color: #336699; }\n    &lt;/style&gt;\n{% endblock %}\n{% block content %}\n    &lt;h1&gt;Index&lt;/h1&gt;\n    &lt;p class=\"important\"&gt;\n        Welcome to my awesome homepage.\n    &lt;/p&gt;\n{% endblock %}\n</pre> <p>The <a class=\"reference internal\" href=\"tags/extends\">extends</a> tag is the key here. It tells the template engine that this template \"extends\" another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.</p> <p>Note that since the child template doesn't define the <code class=\"notranslate\">footer</code> block, the value from the parent template is used instead.</p> <p>It's possible to render the contents of the parent block by using the <a class=\"reference internal\" href=\"functions/parent\">parent</a> function. This gives back the results of the parent block:</p> <pre>{% block sidebar %}\n    &lt;h3&gt;Table Of Contents&lt;/h3&gt;\n    ...\n    {{ parent() }}\n{% endblock %}\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">The documentation page for the <a class=\"reference internal\" href=\"tags/extends\">extends</a> tag describes more advanced features like block nesting, scope, dynamic inheritance, and conditional inheritance.</p> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Twig also supports multiple inheritance with the so called horizontal reuse with the help of the <a class=\"reference internal\" href=\"tags/use\">use</a> tag. This is an advanced feature hardly ever needed in regular templates.</p> </div>   <h2 id=\"html-escaping\">HTML Escaping</h2> <p>When generating HTML from templates, there's always a risk that a variable will include characters that affect the resulting HTML. There are two approaches: manually escaping each variable or automatically escaping everything by default.</p> <p>Twig supports both, automatic escaping is enabled by default.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Automatic escaping is only supported if the <em>escaper</em> extension has been enabled (which is the default).</p> </div>  <h3 id=\"working-with-manual-escaping\">Working with Manual Escaping</h3> <p>If manual escaping is enabled, it is <strong>your</strong> responsibility to escape variables if needed. What to escape? Any variable you don't trust.</p> <p>Escaping works by piping the variable through the <a class=\"reference internal\" href=\"filters/escape\">escape</a> or <code class=\"notranslate\">e</code> filter:</p> <pre>{{ user.username|e }}\n</pre> <p>By default, the <code class=\"notranslate\">escape</code> filter uses the <code class=\"notranslate\">html</code> strategy, but depending on the escaping context, you might want to explicitly use any other available strategies:</p> <pre>{{ user.username|e('js') }}\n{{ user.username|e('css') }}\n{{ user.username|e('url') }}\n{{ user.username|e('html_attr') }}\n</pre>   <h3 id=\"working-with-automatic-escaping\">Working with Automatic Escaping</h3> <p>Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the <a class=\"reference internal\" href=\"tags/autoescape\">autoescape</a> tag:</p> <pre>{% autoescape %}\n    Everything will be automatically escaped in this block (using the HTML strategy)\n{% endautoescape %}\n</pre> <p>By default, auto-escaping uses the <code class=\"notranslate\">html</code> escaping strategy. If you output variables in other contexts, you need to explicitly escape them with the appropriate escaping strategy:</p> <pre>{% autoescape 'js' %}\n    Everything will be automatically escaped in this block (using the JS strategy)\n{% endautoescape %}\n</pre>    <h2 id=\"escaping\">Escaping</h2> <p>It is sometimes desirable or even necessary to have Twig ignore parts it would otherwise handle as variables or blocks. For example if the default syntax is used and you want to use <code class=\"notranslate\">{{</code> as raw string in the template and not start a variable you have to use a trick.</p> <p>The easiest way is to output the variable delimiter (<code class=\"notranslate\">{{</code>) by using a variable expression:</p> <pre>{{ '{{' }}\n</pre> <p>For bigger sections it makes sense to mark a block <a class=\"reference internal\" href=\"tags/verbatim\">verbatim</a>.</p>   <h2 id=\"macros\">Macros</h2> <div class=\"versionadded\"> <p><span>New in version 1.12: </span>Support for default argument values was added in Twig 1.12.</p> </div> <p>Macros are comparable with functions in regular programming languages. They are useful to reuse often used HTML fragments to not repeat yourself.</p> <p>A macro is defined via the <a class=\"reference internal\" href=\"tags/macro\">macro</a> tag. Here is a small example (subsequently called <code class=\"notranslate\">forms.html</code>) of a macro that renders a form element:</p> <pre>{% macro input(name, value, type, size) %}\n    &lt;input type=\"{{ type|default('text') }}\" name=\"{{ name }}\" value=\"{{ value|e }}\" size=\"{{ size|default(20) }}\" /&gt;\n{% endmacro %}\n</pre> <p>Macros can be defined in any template, and need to be \"imported\" via the <a class=\"reference internal\" href=\"tags/import\">import</a> tag before being used:</p> <pre>{% import \"forms.html\" as forms %}\n\n&lt;p&gt;{{ forms.input('username') }}&lt;/p&gt;\n</pre> <p>Alternatively, you can import individual macro names from a template into the current namespace via the <a class=\"reference internal\" href=\"tags/from\">from</a> tag and optionally alias them:</p> <pre>{% from 'forms.html' import input as input_field %}\n\n&lt;dl&gt;\n    &lt;dt&gt;Username&lt;/dt&gt;\n    &lt;dd&gt;{{ input_field('username') }}&lt;/dd&gt;\n    &lt;dt&gt;Password&lt;/dt&gt;\n    &lt;dd&gt;{{ input_field('password', '', 'password') }}&lt;/dd&gt;\n&lt;/dl&gt;\n</pre> <p>A default value can also be defined for macro arguments when not provided in a macro call:</p> <pre>{% macro input(name, value = \"\", type = \"text\", size = 20) %}\n    &lt;input type=\"{{ type }}\" name=\"{{ name }}\" value=\"{{ value|e }}\" size=\"{{ size }}\" /&gt;\n{% endmacro %}\n</pre> <p>If extra positional arguments are passed to a macro call, they end up in the special <code class=\"notranslate\">varargs</code> variable as a list of values.</p>   <h2>Expressions</h2> <p>Twig allows expressions everywhere. These work very similar to regular PHP and even if you're not working with PHP you should feel comfortable with it.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>The operator precedence is as follows, with the lowest-precedence operators listed first: <code class=\"notranslate\">b-and</code>, <code class=\"notranslate\">b-xor</code>, <code class=\"notranslate\">b-or</code>, <code class=\"notranslate\">or</code>, <code class=\"notranslate\">and</code>, <code class=\"notranslate\">==</code>, <code class=\"notranslate\">!=</code>, <code class=\"notranslate\">&lt;</code>, <code class=\"notranslate\">&gt;</code>, <code class=\"notranslate\">&gt;=</code>, <code class=\"notranslate\">&lt;=</code>, <code class=\"notranslate\">in</code>, <code class=\"notranslate\">matches</code>, <code class=\"notranslate\">starts with</code>, <code class=\"notranslate\">ends with</code>, <code class=\"notranslate\">..</code>, <code class=\"notranslate\">+</code>, <code class=\"notranslate\">-</code>, <code class=\"notranslate\">~</code>, <code class=\"notranslate\">*</code>, <code class=\"notranslate\">/</code>, <code class=\"notranslate\">//</code>, <code class=\"notranslate\">%</code>, <code class=\"notranslate\">is</code>, <code class=\"notranslate\">**</code>, <code class=\"notranslate\">|</code>, <code class=\"notranslate\">[]</code>, and <code class=\"notranslate\">.</code>:</p> <pre>{% set greeting = 'Hello ' %}\n{% set name = 'Fabien' %}\n\n{{ greeting ~ name|lower }}   {# Hello fabien #}\n\n{# use parenthesis to change precedence #}\n{{ (greeting ~ name)|lower }} {# hello fabien #}\n</pre> </div>  <h3 id=\"literals\">Literals</h3> <div class=\"versionadded\"> <p><span>New in version 1.5: </span>Support for hash keys as names and expressions was added in Twig 1.5.</p> </div> <p>The simplest form of expressions are literals. Literals are representations for PHP types such as strings, numbers, and arrays. The following literals exist:</p> <ul> <li>\n<p class=\"first\"><code class=\"notranslate\">\"Hello World\"</code>: Everything between two double or single quotes is a string. They are useful whenever you need a string in the template (for example as arguments to function calls, filters or just to extend or include a template). A string can contain a delimiter if it is preceded by a backslash (<code class=\"notranslate\">\\</code>) -- like in <code class=\"notranslate\">'It\\'s good'</code>. If the string contains a backslash (e.g. <code class=\"notranslate\">'c:\\Program Files'</code>) escape it by doubling it (e.g. <code class=\"notranslate\">'c:\\\\Program Files'</code>).</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">42</code> / <code class=\"notranslate\">42.23</code>: Integers and floating point numbers are created by just writing the number down. If a dot is present the number is a float, otherwise an integer.</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">[\"foo\", \"bar\"]</code>: Arrays are defined by a sequence of expressions separated by a comma (<code class=\"notranslate\">,</code>) and wrapped with squared brackets (<code class=\"notranslate\">[]</code>).</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">{\"foo\": \"bar\"}</code>: Hashes are defined by a list of keys and values separated by a comma (<code class=\"notranslate\">,</code>) and wrapped with curly braces (<code class=\"notranslate\">{}</code>):</p> <pre>{# keys as string #}\n{ 'foo': 'foo', 'bar': 'bar' }\n\n{# keys as names (equivalent to the previous hash) -- as of Twig 1.5 #}\n{ foo: 'foo', bar: 'bar' }\n\n{# keys as integer #}\n{ 2: 'foo', 4: 'bar' }\n\n{# keys as expressions (the expression must be enclosed into parentheses) -- as of Twig 1.5 #}\n{ (1 + 1): 'foo', (a ~ 'b'): 'bar' }\n</pre> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">true</code> / <code class=\"notranslate\">false</code>: <code class=\"notranslate\">true</code> represents the true value, <code class=\"notranslate\">false</code> represents the false value.</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">null</code>: <code class=\"notranslate\">null</code> represents no specific value. This is the value returned when a variable does not exist. <code class=\"notranslate\">none</code> is an alias for <code class=\"notranslate\">null</code>.</p> </li> </ul> <p>Arrays and hashes can be nested:</p> <pre>{% set foo = [1, {\"foo\": \"bar\"}] %}\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">Using double-quoted or single-quoted strings has no impact on performance but string interpolation is only supported in double-quoted strings.</p> </div>   <h3 id=\"math\">Math</h3> <p>Twig allows you to calculate with values. This is rarely useful in templates but exists for completeness' sake. The following operators are supported:</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">+</code>: Adds two objects together (the operands are casted to numbers). <code class=\"notranslate\">{{\n1 + 1 }}</code> is <code class=\"notranslate\">2</code>.</li> <li>\n<code class=\"notranslate\">-</code>: Subtracts the second number from the first one. <code class=\"notranslate\">{{ 3 - 2 }}</code> is <code class=\"notranslate\">1</code>.</li> <li>\n<code class=\"notranslate\">/</code>: Divides two numbers. The returned value will be a floating point number. <code class=\"notranslate\">{{ 1 / 2 }}</code> is <code class=\"notranslate\">{{ 0.5 }}</code>.</li> <li>\n<code class=\"notranslate\">%</code>: Calculates the remainder of an integer division. <code class=\"notranslate\">{{ 11 % 7 }}</code> is <code class=\"notranslate\">4</code>.</li> <li>\n<code class=\"notranslate\">//</code>: Divides two numbers and returns the floored integer result. <code class=\"notranslate\">{{ 20\n// 7 }}</code> is <code class=\"notranslate\">2</code>, <code class=\"notranslate\">{{ -20  // 7 }}</code> is <code class=\"notranslate\">-3</code> (this is just syntactic sugar for the <a class=\"reference internal\" href=\"filters/round\">round</a> filter).</li> <li>\n<code class=\"notranslate\">*</code>: Multiplies the left operand with the right one. <code class=\"notranslate\">{{ 2 * 2 }}</code> would return <code class=\"notranslate\">4</code>.</li> <li>\n<code class=\"notranslate\">**</code>: Raises the left operand to the power of the right operand. <code class=\"notranslate\">{{ 2 **\n3 }}</code> would return <code class=\"notranslate\">8</code>.</li> </ul>   <h3 id=\"logic\">Logic</h3> <p>You can combine multiple expressions with the following operators:</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">and</code>: Returns true if the left and the right operands are both true.</li> <li>\n<code class=\"notranslate\">or</code>: Returns true if the left or the right operand is true.</li> <li>\n<code class=\"notranslate\">not</code>: Negates a statement.</li> <li>\n<code class=\"notranslate\">(expr)</code>: Groups an expression.</li> </ul>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Twig also support bitwise operators (<code class=\"notranslate\">b-and</code>, <code class=\"notranslate\">b-xor</code>, and <code class=\"notranslate\">b-or</code>).</p> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Operators are case sensitive.</p> </div>   <h3 id=\"comparisons\">Comparisons</h3> <p>The following comparison operators are supported in any expression: <code class=\"notranslate\">==</code>, <code class=\"notranslate\">!=</code>, <code class=\"notranslate\">&lt;</code>, <code class=\"notranslate\">&gt;</code>, <code class=\"notranslate\">&gt;=</code>, and <code class=\"notranslate\">&lt;=</code>.</p> <p>You can also check if a string <code class=\"notranslate\">starts with</code> or <code class=\"notranslate\">ends with</code> another string:</p> <pre>{% if 'Fabien' starts with 'F' %}\n{% endif %}\n\n{% if 'Fabien' ends with 'n' %}\n{% endif %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>For complex string comparisons, the <code class=\"notranslate\">matches</code> operator allows you to use <a class=\"reference external\" href=\"http://php.net/manual/en/pcre.pattern.php\">regular expressions</a>:</p> <pre>{% if phone matches '/^[\\\\d\\\\.]+$/' %}\n{% endif %}\n</pre> </div>   <h3 id=\"containment-operator\">Containment Operator</h3> <p>The <code class=\"notranslate\">in</code> operator performs containment test.</p> <p>It returns <code class=\"notranslate\">true</code> if the left operand is contained in the right:</p> <pre>{# returns true #}\n\n{{ 1 in [1, 2, 3] }}\n\n{{ 'cd' in 'abcde' }}\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">You can use this filter to perform a containment test on strings, arrays, or objects implementing the <code class=\"notranslate\">Traversable</code> interface.</p> </div> <p>To perform a negative test, use the <code class=\"notranslate\">not in</code> operator:</p> <pre>{% if 1 not in [1, 2, 3] %}\n\n{# is equivalent to #}\n{% if not (1 in [1, 2, 3]) %}\n</pre>   <h3 id=\"test-operator\">Test Operator</h3> <p>The <code class=\"notranslate\">is</code> operator performs tests. Tests can be used to test a variable against a common expression. The right operand is name of the test:</p> <pre>{# find out if a variable is odd #}\n\n{{ name is odd }}\n</pre> <p>Tests can accept arguments too:</p> <pre>{% if post.status is constant('Post::PUBLISHED') %}\n</pre> <p>Tests can be negated by using the <code class=\"notranslate\">is not</code> operator:</p> <pre>{% if post.status is not constant('Post::PUBLISHED') %}\n\n{# is equivalent to #}\n{% if not (post.status is constant('Post::PUBLISHED')) %}\n</pre> <p>Go to the <a class=\"reference internal\" href=\"tests/index\">tests</a> page to learn more about the built-in tests.</p>   <h3 id=\"other-operators\">Other Operators</h3> <div class=\"versionadded\"> <p><span>New in version 1.12.0: </span>Support for the extended ternary operator was added in Twig 1.12.0.</p> </div> <p>The following operators don't fit into any of the other categories:</p> <ul> <li>\n<p class=\"first\"><code class=\"notranslate\">|</code>: Applies a filter.</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">..</code>: Creates a sequence based on the operand before and after the operator (this is just syntactic sugar for the <a class=\"reference internal\" href=\"functions/range\">range</a> function):</p> <pre>{{ 1..5 }}\n\n{# equivalent to #}\n{{ range(1, 5) }}\n</pre> <p>Note that you must use parentheses when combining it with the filter operator due to the <a class=\"reference internal\" href=\"#twig-expressions\">operator precedence rules</a>:</p> <pre>(1..5)|join(', ')\n</pre> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">~</code>: Converts all operands into strings and concatenates them. <code class=\"notranslate\">{{ \"Hello\n\" ~ name ~ \"!\" }}</code> would return (assuming <code class=\"notranslate\">name</code> is <code class=\"notranslate\">'John'</code>) <code class=\"notranslate\">Hello\nJohn!</code>.</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">.</code>, <code class=\"notranslate\">[]</code>: Gets an attribute of an object.</p> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">?:</code>: The ternary operator:</p> <pre>{{ foo ? 'yes' : 'no' }}\n\n{# as of Twig 1.12.0 #}\n{{ foo ?: 'no' }} is the same as {{ foo ? foo : 'no' }}\n{{ foo ? 'yes' }} is the same as {{ foo ? 'yes' : '' }}</pre> </li> <li>\n<p class=\"first\"><code class=\"notranslate\">??</code>: The null-coalescing operator:</p> <pre>{# returns the value of foo if it is defined and not null, 'no' otherwise #}\n{{ foo ?? 'no' }}</pre> </li> </ul>   <h3 id=\"string-interpolation\">String Interpolation</h3> <div class=\"versionadded\"> <p><span>New in version 1.5: </span>String interpolation was added in Twig 1.5.</p> </div> <p>String interpolation (<code class=\"notranslate\">#{expression}</code>) allows any valid expression to appear within a <em>double-quoted string</em>. The result of evaluating that expression is inserted into the string:</p> <pre>{{ \"foo #{bar} baz\" }}\n{{ \"foo #{1 + 2} baz\" }}\n</pre>    <h2>Whitespace Control</h2> <div class=\"versionadded\"> <p><span>New in version 1.1: </span>Tag level whitespace control was added in Twig 1.1.</p> </div> <p>The first newline after a template tag is removed automatically (like in PHP.) Whitespace is not further modified by the template engine, so each whitespace (spaces, tabs, newlines etc.) is returned unchanged.</p> <p>Use the <code class=\"notranslate\">spaceless</code> tag to remove whitespace <em>between HTML tags</em>:</p> <pre>{% spaceless %}\n    &lt;div&gt;\n        &lt;strong&gt;foo bar&lt;/strong&gt;\n    &lt;/div&gt;\n{% endspaceless %}\n\n{# output will be &lt;div&gt;&lt;strong&gt;foo bar&lt;/strong&gt;&lt;/div&gt; #}\n</pre> <p>In addition to the spaceless tag you can also control whitespace on a per tag level. By using the whitespace control modifier on your tags, you can trim leading and or trailing whitespace:</p> <pre>{% set value = 'no spaces' %}\n{#- No leading/trailing whitespace -#}\n{%- if true -%}\n    {{- value -}}\n{%- endif -%}\n\n{# output 'no spaces' #}\n</pre> <p>The above sample shows the default whitespace control modifier, and how you can use it to remove whitespace around tags. Trimming space will consume all whitespace for that side of the tag. It is possible to use whitespace trimming on one side of a tag:</p> <pre>{% set value = 'no spaces' %}\n&lt;li&gt;    {{- value }}    &lt;/li&gt;\n\n{# outputs '&lt;li&gt;no spaces    &lt;/li&gt;' #}\n</pre>   <h2 id=\"extensions\">Extensions</h2> <p>Twig can be easily extended.</p> <p>If you are looking for new tags, filters, or functions, have a look at the Twig official <a class=\"reference external\" href=\"http://github.com/twigphp/Twig-extensions\">extension repository</a>.</p> <p>If you want to create your own, read the <a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/advanced_legacy.html#creating-extensions\">Creating an Extension</a> chapter.</p>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Installation\" href=\"installation\"> « Installation </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Twig for Developers\" href=\"api\"> Twig for Developers » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/templates.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/templates.html</a>\n  </p>\n</div>\n","advanced":"<h1 id=\"extending-twig\">Extending Twig</h1>  \n<div class=\"admonition admonition-caution\">\n<p class=\"first admonition-title\">Caution</p> <p class=\"last\">This section describes how to extend Twig as of <strong>Twig 1.12</strong>. If you are using an older version, read the <a class=\"reference internal\" href=\"http://twig.sensiolabs.org/doc/advanced_legacy.html\">legacy</a> chapter instead.</p> </div> <p>Twig can be extended in many ways; you can add extra tags, filters, tests, operators, global variables, and functions. You can even extend the parser itself with node visitors.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The first section of this chapter describes how to extend Twig easily. If you want to reuse your changes in different projects or if you want to share them with others, you should then create an extension as described in the following section.</p> </div>  \n<div class=\"admonition admonition-caution\">\n<p class=\"first admonition-title\">Caution</p> <p class=\"last\">When extending Twig without creating an extension, Twig won't be able to recompile your templates when the PHP code is updated. To see your changes in real-time, either disable template caching or package your code into an extension (see the next section of this chapter).</p> </div> <p>Before extending Twig, you must understand the differences between all the different possible extension points and when to use them.</p> <p>First, remember that Twig has two main language constructs:</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">{{ }}</code>: used to print the result of an expression evaluation;</li> <li>\n<code class=\"notranslate\">{% %}</code>: used to execute statements.</li> </ul> <p>To understand why Twig exposes so many extension points, let's see how to implement a <em>Lorem ipsum</em> generator (it needs to know the number of words to generate).</p> <p>You can use a <code class=\"notranslate\">lipsum</code> <em>tag</em>:</p> <pre>{% lipsum 40 %}\n</pre> <p>That works, but using a tag for <code class=\"notranslate\">lipsum</code> is not a good idea for at least three main reasons:</p> <ul> <li>\n<p class=\"first\"><code class=\"notranslate\">lipsum</code> is not a language construct;</p> </li> <li>\n<p class=\"first\">The tag outputs something;</p> </li> <li>\n<p class=\"first\">The tag is not flexible as you cannot use it in an expression:</p> <pre>{{ 'some text' ~ {% lipsum 40 %} ~ 'some more text' }}</pre> </li> </ul> <p>In fact, you rarely need to create tags; and that's good news because tags are the most complex extension point of Twig.</p> <p>Now, let's use a <code class=\"notranslate\">lipsum</code> <em>filter</em>:</p> <pre>{{ 40|lipsum }}\n</pre> <p>Again, it works, but it looks weird. A filter transforms the passed value to something else but here we use the value to indicate the number of words to generate (so, <code class=\"notranslate\">40</code> is an argument of the filter, not the value we want to transform).</p> <p>Next, let's use a <code class=\"notranslate\">lipsum</code> <em>function</em>:</p> <pre>{{ lipsum(40) }}\n</pre> <p>Here we go. For this specific example, the creation of a function is the extension point to use. And you can use it anywhere an expression is accepted:</p> <pre>{{ 'some text' ~ lipsum(40) ~ 'some more text' }}\n\n{% set lipsum = lipsum(40) %}\n</pre> <p>Last but not the least, you can also use a <em>global</em> object with a method able to generate lorem ipsum text:</p> <pre>{{ text.lipsum(40) }}\n</pre> <p>As a rule of thumb, use functions for frequently used features and global objects for everything else.</p> <p>Keep in mind the following when you want to extend Twig:</p> <table border=\"1\" class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"37%\"> <col width=\"14%\"> <col width=\"35%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">What?</th> <th class=\"head\">Implementation difficulty?</th> <th class=\"head\">How often?</th> <th class=\"head\">When?</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>macro</em></td> <td>trivial</td> <td>frequent</td> <td>Content generation</td> </tr> <tr class=\"row-odd\">\n<td><em>global</em></td> <td>trivial</td> <td>frequent</td> <td>Helper object</td> </tr> <tr class=\"row-even\">\n<td><em>function</em></td> <td>trivial</td> <td>frequent</td> <td>Content generation</td> </tr> <tr class=\"row-odd\">\n<td><em>filter</em></td> <td>trivial</td> <td>frequent</td> <td>Value transformation</td> </tr> <tr class=\"row-even\">\n<td><em>tag</em></td> <td>complex</td> <td>rare</td> <td>DSL language construct</td> </tr> <tr class=\"row-odd\">\n<td><em>test</em></td> <td>trivial</td> <td>rare</td> <td>Boolean decision</td> </tr> <tr class=\"row-even\">\n<td><em>operator</em></td> <td>trivial</td> <td>rare</td> <td>Values transformation</td> </tr> </tbody> </table>  <h2 id=\"globals\">Globals</h2> <p>A global variable is like any other template variable, except that it's available in all templates and macros:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;addGlobal('text', new Text());\n</pre> <p>You can then use the <code class=\"notranslate\">text</code> variable anywhere in a template:</p> <pre>{{ text.lipsum(40) }}\n</pre>   <h2 id=\"filters\">Filters</h2> <p>Creating a filter is as simple as associating a name with a PHP callable:</p> <pre>// an anonymous function\n$filter = new Twig_SimpleFilter('rot13', function ($string) {\n    return str_rot13($string);\n});\n\n// or a simple PHP function\n$filter = new Twig_SimpleFilter('rot13', 'str_rot13');\n\n// or a class method\n$filter = new Twig_SimpleFilter('rot13', array('SomeClass', 'rot13Filter'));\n</pre> <p>The first argument passed to the <code class=\"notranslate\">Twig_SimpleFilter</code> constructor is the name of the filter you will use in templates and the second one is the PHP callable to associate with it.</p> <p>Then, add the filter to your Twig environment:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;addFilter($filter);\n</pre> <p>And here is how to use it in a template:</p> <pre>{{ 'Twig'|rot13 }}\n\n{# will output Gjvt #}\n</pre> <p>When called by Twig, the PHP callable receives the left side of the filter (before the pipe <code class=\"notranslate\">|</code>) as the first argument and the extra arguments passed to the filter (within parentheses <code class=\"notranslate\">()</code>) as extra arguments.</p> <p>For instance, the following code:</p> <pre>{{ 'TWIG'|lower }}\n{{ now|date('d/m/Y') }}\n</pre> <p>is compiled to something like the following:</p> <pre>&lt;?php echo strtolower('TWIG') ?&gt;\n&lt;?php echo twig_date_format_filter($now, 'd/m/Y') ?&gt;\n</pre> <p>The <code class=\"notranslate\">Twig_SimpleFilter</code> class takes an array of options as its last argument:</p> <pre>$filter = new Twig_SimpleFilter('rot13', 'str_rot13', $options);\n</pre>  <h3 id=\"environment-aware-filters\">Environment-aware Filters</h3> <p>If you want to access the current environment instance in your filter, set the <code class=\"notranslate\">needs_environment</code> option to <code class=\"notranslate\">true</code>; Twig will pass the current environment as the first argument to the filter call:</p> <pre>$filter = new Twig_SimpleFilter('rot13', function (Twig_Environment $env, $string) {\n    // get the current charset for instance\n    $charset = $env-&gt;getCharset();\n\n    return str_rot13($string);\n}, array('needs_environment' =&gt; true));\n</pre>   <h3 id=\"context-aware-filters\">Context-aware Filters</h3> <p>If you want to access the current context in your filter, set the <code class=\"notranslate\">needs_context</code> option to <code class=\"notranslate\">true</code>; Twig will pass the current context as the first argument to the filter call (or the second one if <code class=\"notranslate\">needs_environment</code> is also set to <code class=\"notranslate\">true</code>):</p> <pre>$filter = new Twig_SimpleFilter('rot13', function ($context, $string) {\n    // ...\n}, array('needs_context' =&gt; true));\n\n$filter = new Twig_SimpleFilter('rot13', function (Twig_Environment $env, $context, $string) {\n    // ...\n}, array('needs_context' =&gt; true, 'needs_environment' =&gt; true));\n</pre>   <h3 id=\"automatic-escaping\">Automatic Escaping</h3> <p>If automatic escaping is enabled, the output of the filter may be escaped before printing. If your filter acts as an escaper (or explicitly outputs HTML or JavaScript code), you will want the raw output to be printed. In such a case, set the <code class=\"notranslate\">is_safe</code> option:</p> <pre>$filter = new Twig_SimpleFilter('nl2br', 'nl2br', array('is_safe' =&gt; array('html')));\n</pre> <p>Some filters may need to work on input that is already escaped or safe, for example when adding (safe) HTML tags to originally unsafe output. In such a case, set the <code class=\"notranslate\">pre_escape</code> option to escape the input data before it is run through your filter:</p> <pre>$filter = new Twig_SimpleFilter('somefilter', 'somefilter', array('pre_escape' =&gt; 'html', 'is_safe' =&gt; array('html')));\n</pre>   <h3 id=\"variadic-filters\">Variadic Filters</h3> <div class=\"versionadded\"> <p><span>New in version 1.19: </span>Support for variadic filters was added in Twig 1.19.</p> </div> <p>When a filter should accept an arbitrary number of arguments, set the <code class=\"notranslate\">is_variadic</code> option to <code class=\"notranslate\">true</code>; Twig will pass the extra arguments as the last argument to the filter call as an array:</p> <pre>$filter = new Twig_SimpleFilter('thumbnail', function ($file, array $options = array()) {\n    // ...\n}, array('is_variadic' =&gt; true));\n</pre> <p>Be warned that named arguments passed to a variadic filter cannot be checked for validity as they will automatically end up in the option array.</p>   <h3 id=\"dynamic-filters\">Dynamic Filters</h3> <p>A filter name containing the special <code class=\"notranslate\">*</code> character is a dynamic filter as the <code class=\"notranslate\">*</code> can be any string:</p> <pre>$filter = new Twig_SimpleFilter('*_path', function ($name, $arguments) {\n    // ...\n});\n</pre> <p>The following filters will be matched by the above defined dynamic filter:</p> <ul class=\"simple\"> <li><code class=\"notranslate\">product_path</code></li> <li><code class=\"notranslate\">category_path</code></li> </ul> <p>A dynamic filter can define more than one dynamic parts:</p> <pre>$filter = new Twig_SimpleFilter('*_path_*', function ($name, $suffix, $arguments) {\n    // ...\n});\n</pre> <p>The filter will receive all dynamic part values before the normal filter arguments, but after the environment and the context. For instance, a call to <code class=\"notranslate\">'foo'|a_path_b()</code> will result in the following arguments to be passed to the filter: <code class=\"notranslate\">('a', 'b', 'foo')</code>.</p>   <h3 id=\"deprecated-filters\">Deprecated Filters</h3> <div class=\"versionadded\"> <p><span>New in version 1.21: </span>Support for deprecated filters was added in Twig 1.21.</p> </div> <p>You can mark a filter as being deprecated by setting the <code class=\"notranslate\">deprecated</code> option to <code class=\"notranslate\">true</code>. You can also give an alternative filter that replaces the deprecated one when that makes sense:</p> <pre>$filter = new Twig_SimpleFilter('obsolete', function () {\n    // ...\n}, array('deprecated' =&gt; true, 'alternative' =&gt; 'new_one'));\n</pre> <p>When a filter is deprecated, Twig emits a deprecation notice when compiling a template using it. See <a class=\"reference internal\" href=\"recipes#deprecation-notices\">Displaying Deprecation Notices</a> for more information.</p>    <h2 id=\"functions\">Functions</h2> <p>Functions are defined in the exact same way as filters, but you need to create an instance of <code class=\"notranslate\">Twig_SimpleFunction</code>:</p> <pre>$twig = new Twig_Environment($loader);\n$function = new Twig_SimpleFunction('function_name', function () {\n    // ...\n});\n$twig-&gt;addFunction($function);\n</pre> <p>Functions support the same features as filters, except for the <code class=\"notranslate\">pre_escape</code> and <code class=\"notranslate\">preserves_safety</code> options.</p>   <h2 id=\"tests\">Tests</h2> <p>Tests are defined in the exact same way as filters and functions, but you need to create an instance of <code class=\"notranslate\">Twig_SimpleTest</code>:</p> <pre>$twig = new Twig_Environment($loader);\n$test = new Twig_SimpleTest('test_name', function () {\n    // ...\n});\n$twig-&gt;addTest($test);\n</pre> <p>Tests allow you to create custom application specific logic for evaluating boolean conditions. As a simple example, let's create a Twig test that checks if objects are 'red':</p> <pre>$twig = new Twig_Environment($loader);\n$test = new Twig_SimpleTest('red', function ($value) {\n    if (isset($value-&gt;color) &amp;&amp; $value-&gt;color == 'red') {\n        return true;\n    }\n    if (isset($value-&gt;paint) &amp;&amp; $value-&gt;paint == 'red') {\n        return true;\n    }\n    return false;\n});\n$twig-&gt;addTest($test);\n</pre> <p>Test functions should always return true/false.</p> <p>When creating tests you can use the <code class=\"notranslate\">node_class</code> option to provide custom test compilation. This is useful if your test can be compiled into PHP primitives. This is used by many of the tests built into Twig:</p> <pre>$twig = new Twig_Environment($loader);\n$test = new Twig_SimpleTest(\n    'odd',\n    null,\n    array('node_class' =&gt; 'Twig_Node_Expression_Test_Odd'));\n$twig-&gt;addTest($test);\n\nclass Twig_Node_Expression_Test_Odd extends Twig_Node_Expression_Test\n{\n    public function compile(Twig_Compiler $compiler)\n    {\n        $compiler\n            -&gt;raw('(')\n            -&gt;subcompile($this-&gt;getNode('node'))\n            -&gt;raw(' % 2 == 1')\n            -&gt;raw(')')\n        ;\n    }\n}\n</pre> <p>The above example shows how you can create tests that use a node class. The node class has access to one sub-node called 'node'. This sub-node contains the value that is being tested. When the <code class=\"notranslate\">odd</code> filter is used in code such as:</p> <pre>{% if my_value is odd %}\n</pre> <p>The <code class=\"notranslate\">node</code> sub-node will contain an expression of <code class=\"notranslate\">my_value</code>. Node-based tests also have access to the <code class=\"notranslate\">arguments</code> node. This node will contain the various other arguments that have been provided to your test.</p> <p>If you want to pass a variable number of positional or named arguments to the test, set the <code class=\"notranslate\">is_variadic</code> option to <code class=\"notranslate\">true</code>. Tests also support dynamic name feature as filters and functions.</p>   <h2 id=\"tags\">Tags</h2> <p>One of the most exciting features of a template engine like Twig is the possibility to define new language constructs. This is also the most complex feature as you need to understand how Twig's internals work.</p> <p>Let's create a simple <code class=\"notranslate\">set</code> tag that allows the definition of simple variables from within a template. The tag can be used like follows:</p> <pre>{% set name = \"value\" %}\n\n{{ name }}\n\n{# should output value #}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"notranslate\">set</code> tag is part of the Core extension and as such is always available. The built-in version is slightly more powerful and supports multiple assignments by default (cf. the template designers chapter for more information).</p> </div> <p>Three steps are needed to define a new tag:</p> <ul class=\"simple\"> <li>Defining a Token Parser class (responsible for parsing the template code);</li> <li>Defining a Node class (responsible for converting the parsed code to PHP);</li> <li>Registering the tag.</li> </ul>  <h3 id=\"registering-a-new-tag\">Registering a new tag</h3> <p>Adding a tag is as simple as calling the <code class=\"notranslate\">addTokenParser</code> method on the <code class=\"notranslate\">Twig_Environment</code> instance:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;addTokenParser(new Project_Set_TokenParser());\n</pre>   <h3 id=\"defining-a-token-parser\">Defining a Token Parser</h3> <p>Now, let's see the actual code of this class:</p> <pre>class Project_Set_TokenParser extends Twig_TokenParser\n{\n    public function parse(Twig_Token $token)\n    {\n        $parser = $this-&gt;parser;\n        $stream = $parser-&gt;getStream();\n\n        $name = $stream-&gt;expect(Twig_Token::NAME_TYPE)-&gt;getValue();\n        $stream-&gt;expect(Twig_Token::OPERATOR_TYPE, '=');\n        $value = $parser-&gt;getExpressionParser()-&gt;parseExpression();\n        $stream-&gt;expect(Twig_Token::BLOCK_END_TYPE);\n\n        return new Project_Set_Node($name, $value, $token-&gt;getLine(), $this-&gt;getTag());\n    }\n\n    public function getTag()\n    {\n        return 'set';\n    }\n}\n</pre> <p>The <code class=\"notranslate\">getTag()</code> method must return the tag we want to parse, here <code class=\"notranslate\">set</code>.</p> <p>The <code class=\"notranslate\">parse()</code> method is invoked whenever the parser encounters a <code class=\"notranslate\">set</code> tag. It should return a <code class=\"notranslate\">Twig_Node</code> instance that represents the node (the <code class=\"notranslate\">Project_Set_Node</code> calls creating is explained in the next section).</p> <p>The parsing process is simplified thanks to a bunch of methods you can call from the token stream (<code class=\"notranslate\">$this-&gt;parser-&gt;getStream()</code>):</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">getCurrent()</code>: Gets the current token in the stream.</li> <li>\n<code class=\"notranslate\">next()</code>: Moves to the next token in the stream, <em>but returns the old one</em>.</li> <li>\n<code class=\"notranslate\">test($type)</code>, <code class=\"notranslate\">test($value)</code> or <code class=\"notranslate\">test($type, $value)</code>: Determines whether the current token is of a particular type or value (or both). The value may be an array of several possible values.</li> <li>\n<code class=\"notranslate\">expect($type[, $value[, $message]])</code>: If the current token isn't of the given type/value a syntax error is thrown. Otherwise, if the type and value are correct, the token is returned and the stream moves to the next token.</li> <li>\n<code class=\"notranslate\">look()</code>: Looks a the next token without consuming it.</li> </ul> <p>Parsing expressions is done by calling the <code class=\"notranslate\">parseExpression()</code> like we did for the <code class=\"notranslate\">set</code> tag.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">Reading the existing <code class=\"notranslate\">TokenParser</code> classes is the best way to learn all the nitty-gritty details of the parsing process.</p> </div>   <h3 id=\"defining-a-node\">Defining a Node</h3> <p>The <code class=\"notranslate\">Project_Set_Node</code> class itself is rather simple:</p> <pre>class Project_Set_Node extends Twig_Node\n{\n    public function __construct($name, Twig_Node_Expression $value, $line, $tag = null)\n    {\n        parent::__construct(array('value' =&gt; $value), array('name' =&gt; $name), $line, $tag);\n    }\n\n    public function compile(Twig_Compiler $compiler)\n    {\n        $compiler\n            -&gt;addDebugInfo($this)\n            -&gt;write('$context[\\''.$this-&gt;getAttribute('name').'\\'] = ')\n            -&gt;subcompile($this-&gt;getNode('value'))\n            -&gt;raw(\";\\n\")\n        ;\n    }\n}\n</pre> <p>The compiler implements a fluid interface and provides methods that helps the developer generate beautiful and readable PHP code:</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">subcompile()</code>: Compiles a node.</li> <li>\n<code class=\"notranslate\">raw()</code>: Writes the given string as is.</li> <li>\n<code class=\"notranslate\">write()</code>: Writes the given string by adding indentation at the beginning of each line.</li> <li>\n<code class=\"notranslate\">string()</code>: Writes a quoted string.</li> <li>\n<code class=\"notranslate\">repr()</code>: Writes a PHP representation of a given value (see <code class=\"notranslate\">Twig_Node_For</code> for a usage example).</li> <li>\n<code class=\"notranslate\">addDebugInfo()</code>: Adds the line of the original template file related to the current node as a comment.</li> <li>\n<code class=\"notranslate\">indent()</code>: Indents the generated code (see <code class=\"notranslate\">Twig_Node_Block</code> for a usage example).</li> <li>\n<code class=\"notranslate\">outdent()</code>: Outdents the generated code (see <code class=\"notranslate\">Twig_Node_Block</code> for a usage example).</li> </ul>    <h2>Creating an Extension</h2> <p>The main motivation for writing an extension is to move often used code into a reusable class like adding support for internationalization. An extension can define tags, filters, tests, operators, global variables, functions, and node visitors.</p> <p>Creating an extension also makes for a better separation of code that is executed at compilation time and code needed at runtime. As such, it makes your code faster.</p> <p>Most of the time, it is useful to create a single extension for your project, to host all the specific tags and filters you want to add to Twig.</p>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">When packaging your code into an extension, Twig is smart enough to recompile your templates whenever you make a change to it (when <code class=\"notranslate\">auto_reload</code> is enabled).</p> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Before writing your own extensions, have a look at the Twig official extension repository: <a class=\"reference external\" href=\"http://github.com/twigphp/Twig-extensions\">http://github.com/twigphp/Twig-extensions</a>.</p> </div> <p>An extension is a class that implements the following interface:</p> <pre>interface Twig_ExtensionInterface\n{\n    /**\n     * Initializes the runtime environment.\n     *\n     * This is where you can load some file that contains filter functions for instance.\n     *\n     * @param Twig_Environment $environment The current Twig_Environment instance\n     *\n     * @deprecated since 1.23 (to be removed in 2.0), implement Twig_Extension_InitRuntimeInterface instead\n     */\n    function initRuntime(Twig_Environment $environment);\n\n    /**\n     * Returns the token parser instances to add to the existing list.\n     *\n     * @return array An array of Twig_TokenParserInterface or Twig_TokenParserBrokerInterface instances\n     */\n    function getTokenParsers();\n\n    /**\n     * Returns the node visitor instances to add to the existing list.\n     *\n     * @return array An array of Twig_NodeVisitorInterface instances\n     */\n    function getNodeVisitors();\n\n    /**\n     * Returns a list of filters to add to the existing list.\n     *\n     * @return array An array of filters\n     */\n    function getFilters();\n\n    /**\n     * Returns a list of tests to add to the existing list.\n     *\n     * @return array An array of tests\n     */\n    function getTests();\n\n    /**\n     * Returns a list of functions to add to the existing list.\n     *\n     * @return array An array of functions\n     */\n    function getFunctions();\n\n    /**\n     * Returns a list of operators to add to the existing list.\n     *\n     * @return array An array of operators\n     */\n    function getOperators();\n\n    /**\n     * Returns a list of global variables to add to the existing list.\n     *\n     * @return array An array of global variables\n     *\n     * @deprecated since 1.23 (to be removed in 2.0), implement Twig_Extension_GlobalsInterface instead\n     */\n    function getGlobals();\n\n    /**\n     * Returns the name of the extension.\n     *\n     * @return string The extension name\n     */\n    function getName();\n}\n</pre> <p>To keep your extension class clean and lean, it can inherit from the built-in <code class=\"notranslate\">Twig_Extension</code> class instead of implementing the whole interface. That way, you just need to implement the <code class=\"notranslate\">getName()</code> method as the <code class=\"notranslate\">Twig_Extension</code> provides empty implementations for all other methods.</p> <p>The <code class=\"notranslate\">getName()</code> method must return a unique identifier for your extension.</p> <p>Now, with this information in mind, let's create the most basic extension possible:</p> <pre>class Project_Twig_Extension extends Twig_Extension\n{\n    public function getName()\n    {\n        return 'project';\n    }\n}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Of course, this extension does nothing for now. We will customize it in the next sections.</p> </div> <p>Twig does not care where you save your extension on the filesystem, as all extensions must be registered explicitly to be available in your templates.</p> <p>You can register an extension by using the <code class=\"notranslate\">addExtension()</code> method on your main <code class=\"notranslate\">Environment</code> object:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;addExtension(new Project_Twig_Extension());\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">The bundled extensions are great examples of how extensions work.</p> </div>  <h3 id=\"id1\">Globals</h3> <p>Global variables can be registered in an extension via the <code class=\"notranslate\">getGlobals()</code> method:</p> <pre>class Project_Twig_Extension extends Twig_Extension implements Twig_Extension_GlobalsInterface\n{\n    public function getGlobals()\n    {\n        return array(\n            'text' =&gt; new Text(),\n        );\n    }\n\n    // ...\n}\n</pre>   <h3 id=\"id2\">Functions</h3> <p>Functions can be registered in an extension via the <code class=\"notranslate\">getFunctions()</code> method:</p> <pre>class Project_Twig_Extension extends Twig_Extension\n{\n    public function getFunctions()\n    {\n        return array(\n            new Twig_SimpleFunction('lipsum', 'generate_lipsum'),\n        );\n    }\n\n    // ...\n}\n</pre>   <h3 id=\"id3\">Filters</h3> <p>To add a filter to an extension, you need to override the <code class=\"notranslate\">getFilters()</code> method. This method must return an array of filters to add to the Twig environment:</p> <pre>class Project_Twig_Extension extends Twig_Extension\n{\n    public function getFilters()\n    {\n        return array(\n            new Twig_SimpleFilter('rot13', 'str_rot13'),\n        );\n    }\n\n    // ...\n}\n</pre>   <h3 id=\"id4\">Tags</h3> <p>Adding a tag in an extension can be done by overriding the <code class=\"notranslate\">getTokenParsers()</code> method. This method must return an array of tags to add to the Twig environment:</p> <pre>class Project_Twig_Extension extends Twig_Extension\n{\n    public function getTokenParsers()\n    {\n        return array(new Project_Set_TokenParser());\n    }\n\n    // ...\n}\n</pre> <p>In the above code, we have added a single new tag, defined by the <code class=\"notranslate\">Project_Set_TokenParser</code> class. The <code class=\"notranslate\">Project_Set_TokenParser</code> class is responsible for parsing the tag and compiling it to PHP.</p>   <h3 id=\"operators\">Operators</h3> <p>The <code class=\"notranslate\">getOperators()</code> methods lets you add new operators. Here is how to add <code class=\"notranslate\">!</code>, <code class=\"notranslate\">||</code>, and <code class=\"notranslate\">&amp;&amp;</code> operators:</p> <pre>class Project_Twig_Extension extends Twig_Extension\n{\n    public function getOperators()\n    {\n        return array(\n            array(\n                '!' =&gt; array('precedence' =&gt; 50, 'class' =&gt; 'Twig_Node_Expression_Unary_Not'),\n            ),\n            array(\n                '||' =&gt; array('precedence' =&gt; 10, 'class' =&gt; 'Twig_Node_Expression_Binary_Or', 'associativity' =&gt; Twig_ExpressionParser::OPERATOR_LEFT),\n                '&amp;&amp;' =&gt; array('precedence' =&gt; 15, 'class' =&gt; 'Twig_Node_Expression_Binary_And', 'associativity' =&gt; Twig_ExpressionParser::OPERATOR_LEFT),\n            ),\n        );\n    }\n\n    // ...\n}\n</pre>   <h3 id=\"id5\">Tests</h3> <p>The <code class=\"notranslate\">getTests()</code> method lets you add new test functions:</p> <pre>class Project_Twig_Extension extends Twig_Extension\n{\n    public function getTests()\n    {\n        return array(\n            new Twig_SimpleTest('even', 'twig_test_even'),\n        );\n    }\n\n    // ...\n}\n</pre>    <h2 id=\"overloading\">Overloading</h2> <p>To overload an already defined filter, test, operator, global variable, or function, re-define it in an extension and register it <strong>as late as possible</strong> (order matters):</p> <pre>class MyCoreExtension extends Twig_Extension\n{\n    public function getFilters()\n    {\n        return array(\n            new Twig_SimpleFilter('date', array($this, 'dateFilter')),\n        );\n    }\n\n    public function dateFilter($timestamp, $format = 'F j, Y H:i')\n    {\n        // do something different from the built-in date filter\n    }\n\n    public function getName()\n    {\n        return 'project';\n    }\n}\n\n$twig = new Twig_Environment($loader);\n$twig-&gt;addExtension(new MyCoreExtension());\n</pre> <p>Here, we have overloaded the built-in <code class=\"notranslate\">date</code> filter with a custom one.</p> <p>If you do the same on the Twig_Environment itself, beware that it takes precedence over any other registered extensions:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;addFilter(new Twig_SimpleFilter('date', function ($timestamp, $format = 'F j, Y H:i') {\n    // do something different from the built-in date filter\n}));\n// the date filter will come from the above registration, not\n// from the registered extension below\n$twig-&gt;addExtension(new MyCoreExtension());\n</pre>  \n<div class=\"admonition admonition-caution\">\n<p class=\"first admonition-title\">Caution</p> <p class=\"last\">Note that overloading the built-in Twig elements is not recommended as it might be confusing.</p> </div>   <h2 id=\"testing-an-extension\">Testing an Extension</h2>  <h3 id=\"functional-tests\">Functional Tests</h3> <p>You can create functional tests for extensions simply by creating the following file structure in your test directory:</p> <pre>Fixtures/\n    filters/\n        foo.test\n        bar.test\n    functions/\n        foo.test\n        bar.test\n    tags/\n        foo.test\n        bar.test\nIntegrationTest.php\n</pre> <p>The <code class=\"notranslate\">IntegrationTest.php</code> file should look like this:</p> <pre>class Project_Tests_IntegrationTest extends Twig_Test_IntegrationTestCase\n{\n    public function getExtensions()\n    {\n        return array(\n            new Project_Twig_Extension1(),\n            new Project_Twig_Extension2(),\n        );\n    }\n\n    public function getFixturesDir()\n    {\n        return dirname(__FILE__).'/Fixtures/';\n    }\n}\n</pre> <p>Fixtures examples can be found within the Twig repository <a class=\"reference external\" href=\"https://github.com/twigphp/Twig/tree/master/test/Twig/Tests/Fixtures\">tests/Twig/Fixtures</a> directory.</p>   <h3 id=\"node-tests\">Node Tests</h3> <p>Testing the node visitors can be complex, so extend your test cases from <code class=\"notranslate\">Twig_Test_NodeTestCase</code>. Examples can be found in the Twig repository <a class=\"reference external\" href=\"https://github.com/twigphp/Twig/tree/master/test/Twig/Tests/Node\">tests/Twig/Node</a> directory.</p>     <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Twig for Developers\" href=\"api\"> « Twig for Developers </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Twig Internals\" href=\"internals\"> Twig Internals » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/advanced.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/advanced.html</a>\n  </p>\n</div>\n","filters/nl2br":"<h1 id=\"nl2br\">nl2br</h1> <div class=\"versionadded\"> <p><span>New in version 1.5: </span>The <code class=\"notranslate\">nl2br</code> filter was added in Twig 1.5.</p> </div> <p>The <code class=\"notranslate\">nl2br</code> filter inserts HTML line breaks before all newlines in a string:</p> <pre>{{ \"I like Twig.\\nYou will like it too.\"|nl2br }}\n{# outputs\n\n    I like Twig.&lt;br /&gt;\n    You will like it too.\n\n#}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"notranslate\">nl2br</code> filter pre-escapes the input before applying the transformation.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"merge\" href=\"merge\"> « merge </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"number_format\" href=\"number_format\"> number_format » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/nl2br.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/nl2br.html</a>\n  </p>\n</div>\n","filters/number_format":"<h1 id=\"number-format\">number_format</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.5: </span>The <code class=\"notranslate\">number_format</code> filter was added in Twig 1.5</div> <p>The <code class=\"notranslate\">number_format</code> filter formats numbers. It is a wrapper around PHP's <a class=\"reference external\" href=\"http://php.net/number_format\">number_format</a> function:</p> <pre>{{ 200.35|number_format }}\n</pre> <p>You can control the number of decimal places, decimal point, and thousands separator using the additional arguments:</p> <pre>{{ 9800.333|number_format(2, '.', ',') }}\n</pre> <p>If no formatting options are provided then Twig will use the default formatting options of:</p> <ul class=\"simple\"> <li>0 decimal places.</li> <li>\n<code class=\"notranslate\">.</code> as the decimal point.</li> <li>\n<code class=\"notranslate\">,</code> as the thousands separator.</li> </ul> <p>These defaults can be easily changed through the core extension:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;getExtension('core')-&gt;setNumberFormat(3, '.', ',');\n</pre> <p>The defaults set for <code class=\"notranslate\">number_format</code> can be over-ridden upon each call using the additional parameters.</p>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">decimal</code>: The number of decimal points to display</li> <li>\n<code class=\"notranslate\">decimal_point</code>: The character(s) to use for the decimal point</li> <li>\n<code class=\"notranslate\">thousand_sep</code>: The character(s) to use for the thousands separator</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"nl2br\" href=\"nl2br\"> « nl2br </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"raw\" href=\"raw\"> raw » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/number_format.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/number_format.html</a>\n  </p>\n</div>\n","filters/raw":"<h1 id=\"raw\">raw</h1> <p>The <code class=\"notranslate\">raw</code> filter marks the value as being \"safe\", which means that in an environment with automatic escaping enabled this variable will not be escaped if <code class=\"notranslate\">raw</code> is the last filter applied to it:</p> <pre>{% autoescape %}\n    {{ var|raw }} {# var won't be escaped #}\n{% endautoescape %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>Be careful when using the <code class=\"notranslate\">raw</code> filter inside expressions:</p> <pre>{% autoescape %}\n    {% set hello = '&lt;strong&gt;Hello&lt;/strong&gt;' %}\n    {% set hola = '&lt;strong&gt;Hola&lt;/strong&gt;' %}\n\n    {{ false ? '&lt;strong&gt;Hola&lt;/strong&gt;' : hello|raw }}\n    does not render the same as\n    {{ false ? hola : hello|raw }}\n    but renders the same as\n    {{ (false ? hola : hello)|raw }}\n{% endautoescape %}</pre> <p class=\"last\">The first ternary statement is not escaped: <code class=\"notranslate\">hello</code> is marked as being safe and Twig does not escape static values (see <a class=\"reference internal\" href=\"../tags/autoescape\">escape</a>). In the second ternary statement, even if <code class=\"notranslate\">hello</code> is marked as safe, <code class=\"notranslate\">hola</code> remains unsafe and so is the whole expression. The third ternary statement is marked as safe and the result is not escaped.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"number_format\" href=\"number_format\"> « number_format </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"replace\" href=\"replace\"> replace » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/raw.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/raw.html</a>\n  </p>\n</div>\n","filters/replace":"<h1 id=\"replace\">replace</h1> <p>The <code class=\"notranslate\">replace</code> filter formats a given string by replacing the placeholders (placeholders are free-form):</p> <pre>{{ \"I like %this% and %that%.\"|replace({'%this%': foo, '%that%': \"bar\"}) }}\n\n{# outputs I like foo and bar\n   if the foo parameter equals to the foo string. #}\n</pre>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">replace_pairs</code>: The placeholder values</li> </ul>  \n<div class=\"admonition admonition-seealso\">\n<p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"format\">format</a></p> </div>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"raw\" href=\"raw\"> « raw </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"reverse\" href=\"reverse\"> reverse » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/replace.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/replace.html</a>\n  </p>\n</div>\n","filters/reverse":"<h1 id=\"reverse\">reverse</h1> <div class=\"versionadded\"> <p><span>New in version 1.6: </span>Support for strings has been added in Twig 1.6.</p> </div> <p>The <code class=\"notranslate\">reverse</code> filter reverses a sequence, a mapping, or a string:</p> <pre>{% for user in users|reverse %}\n    ...\n{% endfor %}\n\n{{ '1234'|reverse }}\n\n{# outputs 4321 #}\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p>For sequences and mappings, numeric keys are not preserved. To reverse them as well, pass <code class=\"notranslate\">true</code> as an argument to the <code class=\"notranslate\">reverse</code> filter:</p> <pre>{% for key, value in {1: \"a\", 2: \"b\", 3: \"c\"}|reverse %}\n    {{ key }}: {{ value }}\n{%- endfor %}\n\n{# output: 0: c    1: b    2: a #}\n\n{% for key, value in {1: \"a\", 2: \"b\", 3: \"c\"}|reverse(true) %}\n    {{ key }}: {{ value }}\n{%- endfor %}\n\n{# output: 3: c    2: b    1: a #}\n</pre> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">It also works with objects implementing the <a class=\"reference external\" href=\"http://php.net/Traversable\">Traversable</a> interface.</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">preserve_keys</code>: Preserve keys when reversing a mapping or a sequence.</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"replace\" href=\"replace\"> « replace </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"round\" href=\"round\"> round » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/reverse.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/reverse.html</a>\n  </p>\n</div>\n","filters/round":"<h1 id=\"round\">round</h1> <div class=\"versionadded\"> <p><span>New in version 1.15.0: </span>The <code class=\"notranslate\">round</code> filter was added in Twig 1.15.0.</p> </div> <p>The <code class=\"notranslate\">round</code> filter rounds a number to a given precision:</p> <pre>{{ 42.55|round }}\n{# outputs 43 #}\n\n{{ 42.55|round(1, 'floor') }}\n{# outputs 42.5 #}\n</pre> <p>The <code class=\"notranslate\">round</code> filter takes two optional arguments; the first one specifies the precision (default is <code class=\"notranslate\">0</code>) and the second the rounding method (default is <code class=\"notranslate\">common</code>):</p> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">common</code> rounds either up or down (rounds the value up to precision decimal places away from zero, when it is half way there -- making 1.5 into 2 and -1.5 into -2);</li> <li>\n<code class=\"notranslate\">ceil</code> always rounds up;</li> <li>\n<code class=\"notranslate\">floor</code> always rounds down.</li> </ul>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"notranslate\">//</code> operator is equivalent to <code class=\"notranslate\">|round(0, 'floor')</code>.</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">precision</code>: The rounding precision</li> <li>\n<code class=\"notranslate\">method</code>: The rounding method</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"reverse\" href=\"reverse\"> « reverse </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"slice\" href=\"slice\"> slice » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/round.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/round.html</a>\n  </p>\n</div>\n","filters/slice":"<h1 id=\"slice\">slice</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.6: </span>The <code class=\"notranslate\">slice</code> filter was added in Twig 1.6.</div> <p>The <code class=\"notranslate\">slice</code> filter extracts a slice of a sequence, a mapping, or a string:</p> <pre>{% for i in [1, 2, 3, 4, 5]|slice(1, 2) %}\n    {# will iterate over 2 and 3 #}\n{% endfor %}\n\n{{ '12345'|slice(1, 2) }}\n\n{# outputs 23 #}\n</pre> <p>You can use any valid expression for both the start and the length:</p> <pre>{% for i in [1, 2, 3, 4, 5]|slice(start, length) %}\n    {# ... #}\n{% endfor %}\n</pre> <p>As syntactic sugar, you can also use the <code class=\"notranslate\">[]</code> notation:</p> <pre>{% for i in [1, 2, 3, 4, 5][start:length] %}\n    {# ... #}\n{% endfor %}\n\n{{ '12345'[1:2] }} {# will display \"23\" #}\n\n{# you can omit the first argument -- which is the same as 0 #}\n{{ '12345'[:2] }} {# will display \"12\" #}\n\n{# you can omit the last argument -- which will select everything till the end #}\n{{ '12345'[2:] }} {# will display \"345\" #}\n</pre> <p>The <code class=\"notranslate\">slice</code> filter works as the <a class=\"reference external\" href=\"http://php.net/array_slice\">array_slice</a> PHP function for arrays and <a class=\"reference external\" href=\"http://php.net/mb-substr\">mb_substr</a> for strings with a fallback to <a class=\"reference external\" href=\"http://php.net/substr\">substr</a>.</p> <p>If the start is non-negative, the sequence will start at that start in the variable. If start is negative, the sequence will start that far from the end of the variable.</p> <p>If length is given and is positive, then the sequence will have up to that many elements in it. If the variable is shorter than the length, then only the available variable elements will be present. If length is given and is negative then the sequence will stop that many elements from the end of the variable. If it is omitted, then the sequence will have everything from offset up until the end of the variable.</p>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">It also works with objects implementing the <a class=\"reference external\" href=\"http://php.net/manual/en/class.traversable.php\">Traversable</a> interface.</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">start</code>: The start of the slice</li> <li>\n<code class=\"notranslate\">length</code>: The size of the slice</li> <li>\n<code class=\"notranslate\">preserve_keys</code>: Whether to preserve key or not (when the input is an array)</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"round\" href=\"round\"> « round </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"sort\" href=\"sort\"> sort » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/slice.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/slice.html</a>\n  </p>\n</div>\n","filters/sort":"<h1 id=\"sort\">sort</h1> <p>The <code class=\"notranslate\">sort</code> filter sorts an array:</p> <pre>{% for user in users|sort %}\n    ...\n{% endfor %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/asort\">asort</a> function to maintain index association. It supports Traversable objects by transforming those to arrays.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"slice\" href=\"slice\"> « slice </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"split\" href=\"split\"> split » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/sort.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/sort.html</a>\n  </p>\n</div>\n","filters/split":"<h1 id=\"split\">split</h1> <div class=\"versionadded\"> <p><span>New in version 1.10.3: </span>The <code class=\"notranslate\">split</code> filter was added in Twig 1.10.3.</p> </div> <p>The <code class=\"notranslate\">split</code> filter splits a string by the given delimiter and returns a list of strings:</p> <pre>{% set foo = \"one,two,three\"|split(',') %}\n{# foo contains ['one', 'two', 'three'] #}\n</pre> <p>You can also pass a <code class=\"notranslate\">limit</code> argument:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>If <code class=\"notranslate\">limit</code> is positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string;</li> <li>If <code class=\"notranslate\">limit</code> is negative, all components except the last -limit are returned;</li> <li>If <code class=\"notranslate\">limit</code> is zero, then this is treated as 1.</li> </ul> </div>\n</blockquote> <pre>{% set foo = \"one,two,three,four,five\"|split(',', 3) %}\n{# foo contains ['one', 'two', 'three,four,five'] #}\n</pre> <p>If the <code class=\"notranslate\">delimiter</code> is an empty string, then value will be split by equal chunks. Length is set by the <code class=\"notranslate\">limit</code> argument (one character by default).</p> <pre>{% set foo = \"123\"|split('') %}\n{# foo contains ['1', '2', '3'] #}\n\n{% set bar = \"aabbcc\"|split('', 2) %}\n{# bar contains ['aa', 'bb', 'cc'] #}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/explode\">explode</a> or <a class=\"reference external\" href=\"http://php.net/str_split\">str_split</a> (if delimiter is empty) functions for string splitting.</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">delimiter</code>: The delimiter</li> <li>\n<code class=\"notranslate\">limit</code>: The limit argument</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"sort\" href=\"sort\"> « sort </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"striptags\" href=\"striptags\"> striptags » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/split.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/split.html</a>\n  </p>\n</div>\n","filters/striptags":"<h1 id=\"striptags\">striptags</h1> <p>The <code class=\"notranslate\">striptags</code> filter strips SGML/XML tags and replace adjacent whitespace by one space:</p> <pre>{{ some_html|striptags }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/strip_tags\">strip_tags</a> function.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"split\" href=\"split\"> « split </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"title\" href=\"title\"> title » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/striptags.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/striptags.html</a>\n  </p>\n</div>\n","filters/title":"<h1 id=\"title\">title</h1> <p>The <code class=\"notranslate\">title</code> filter returns a titlecased version of the value. Words will start with uppercase letters, all remaining characters are lowercase:</p> <pre>{{ 'my first car'|title }}\n\n{# outputs 'My First Car' #}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"striptags\" href=\"striptags\"> « striptags </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"trim\" href=\"trim\"> trim » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/title.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/title.html</a>\n  </p>\n</div>\n","filters/trim":"<h1 id=\"trim\">trim</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.6.2: </span>The <code class=\"notranslate\">trim</code> filter was added in Twig 1.6.2.</div> <p>The <code class=\"notranslate\">trim</code> filter strips whitespace (or other characters) from the beginning and end of a string:</p> <pre>{{ '  I like Twig.  '|trim }}\n\n{# outputs 'I like Twig.' #}\n\n{{ '  I like Twig.'|trim('.') }}\n\n{# outputs '  I like Twig' #}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/trim\">trim</a> function.</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">character_mask</code>: The characters to strip</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"title\" href=\"title\"> « title </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"upper\" href=\"upper\"> upper » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/trim.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/trim.html</a>\n  </p>\n</div>\n","filters/upper":"<h1 id=\"upper\">upper</h1> <p>The <code class=\"notranslate\">upper</code> filter converts a value to uppercase:</p> <pre>{{ 'welcome'|upper }}\n\n{# outputs 'WELCOME' #}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"trim\" href=\"trim\"> « trim </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"url_encode\" href=\"url_encode\"> url_encode » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/upper.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/upper.html</a>\n  </p>\n</div>\n","filters/url_encode":"<h1 id=\"url-encode\">url_encode</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.12.3: </span>Support for encoding an array as query string was added in Twig 1.12.3.</div> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.16.0: </span>The <code class=\"notranslate\">raw</code> argument was removed in Twig 1.16.0. Twig now always encodes according to RFC 3986.</div> <p>The <code class=\"notranslate\">url_encode</code> filter percent encodes a given string as URL segment or an array as query string:</p> <pre>{{ \"path-seg*ment\"|url_encode }}\n{# outputs \"path-seg%2Ament\" #}\n\n{{ \"string with spaces\"|url_encode }}\n{# outputs \"string%20with%20spaces\" #}\n\n{{ {'param': 'value', 'foo': 'bar'}|url_encode }}\n{# outputs \"param=value&amp;foo=bar\" #}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/urlencode\">urlencode</a> (or <a class=\"reference external\" href=\"http://php.net/rawurlencode\">rawurlencode</a> if you pass <code class=\"notranslate\">true</code> as the first parameter) or the <a class=\"reference external\" href=\"http://php.net/http_build_query\">http_build_query</a> function. Note that as of Twig 1.16.0, <code class=\"notranslate\">urlencode</code> <strong>always</strong> uses <code class=\"notranslate\">rawurlencode</code> (the <code class=\"notranslate\">raw</code> argument was removed.)</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"upper\" href=\"upper\"> « upper </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Functions\" href=\"../functions/index\"> Functions » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/filters/url_encode.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/filters/url_encode.html</a>\n  </p>\n</div>\n","functions/index":"<h1 id=\"functions\">Functions</h1> <div class=\"toctree-wrapper compound\"> <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"attribute\"><code class=\"notranslate\">attribute</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"block\"><code class=\"notranslate\">block</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"constant\"><code class=\"notranslate\">constant</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"cycle\"><code class=\"notranslate\">cycle</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"date\"><code class=\"notranslate\">date</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"dump\"><code class=\"notranslate\">dump</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"include\"><code class=\"notranslate\">include</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"max\"><code class=\"notranslate\">max</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"min\"><code class=\"notranslate\">min</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"parent\"><code class=\"notranslate\">parent</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"random\"><code class=\"notranslate\">random</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"range\"><code class=\"notranslate\">range</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"source\"><code class=\"notranslate\">source</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"template_from_string\"><code class=\"notranslate\">template_from_string</code></a></li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/index.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/index.html</a>\n  </p>\n</div>\n","functions/attribute":"<h1 id=\"attribute\">attribute</h1> <div class=\"versionadded\"> <p><span>New in version 1.2: </span>The <code class=\"notranslate\">attribute</code> function was added in Twig 1.2.</p> </div> <p>The <code class=\"notranslate\">attribute</code> function can be used to access a \"dynamic\" attribute of a variable:</p> <pre>{{ attribute(object, method) }}\n{{ attribute(object, method, arguments) }}\n{{ attribute(array, item) }}\n</pre> <p>In addition, the <code class=\"notranslate\">defined</code> test can check for the existence of a dynamic attribute:</p> <pre>{{ attribute(object, method) is defined ? 'Method exists' : 'Method does not exist' }}</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">The resolution algorithm is the same as the one used for the <code class=\"notranslate\">.</code> notation, except that the item can be any valid expression.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Functions\" href=\"index\"> « Functions </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"block\" href=\"block\"> block » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/attribute.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/attribute.html</a>\n  </p>\n</div>\n","functions/block":"<h1 id=\"block\">block</h1> <p>When a template uses inheritance and if you want to print a block multiple times, use the <code class=\"notranslate\">block</code> function:</p> <pre>&lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt;\n\n&lt;h1&gt;{{ block('title') }}&lt;/h1&gt;\n\n{% block body %}{% endblock %}\n</pre>  \n<div class=\"admonition admonition-seealso\">\n<a class=\"reference internal\" href=\"../tags/extends\">extends</a>, <a class=\"reference internal\" href=\"parent\">parent</a>\n</div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"attribute\" href=\"attribute\"> « attribute </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"constant\" href=\"constant\"> constant » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/block.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/block.html</a>\n  </p>\n</div>\n","functions/constant":"<h1 id=\"constant\">constant</h1> <p><code class=\"notranslate\">constant</code> returns the constant value for a given string:</p> <pre>{{ some_date|date(constant('DATE_W3C')) }}\n{{ constant('Namespace\\\\Classname::CONSTANT_NAME') }}\n</pre> <p>As of 1.12.1 you can read constants from object instances as well:</p> <pre>{{ constant('RSS', date) }}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"block\" href=\"block\"> « block </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"cycle\" href=\"cycle\"> cycle » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/constant.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/constant.html</a>\n  </p>\n</div>\n","functions/cycle":"<h1 id=\"cycle\">cycle</h1> <p>The <code class=\"notranslate\">cycle</code> function cycles on an array of values:</p> <pre>{% set start_year = date() | date('Y') %}\n{% set end_year = start_year + 5 %}\n\n{% for year in start_year..end_year %}\n    {{ cycle(['odd', 'even'], loop.index0) }}\n{% endfor %}\n</pre> <p>The array can contain any number of values:</p> <pre>{% set fruits = ['apple', 'orange', 'citrus'] %}\n\n{% for i in 0..10 %}\n    {{ cycle(fruits, i) }}\n{% endfor %}\n</pre>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">position</code>: The cycle position</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"constant\" href=\"constant\"> « constant </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"date\" href=\"date\"> date » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/cycle.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/cycle.html</a>\n  </p>\n</div>\n","functions/date":"<h1 id=\"date\">date</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.6: </span>The date function has been added in Twig 1.6.</div> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.6.1: </span>The default timezone support has been added in Twig 1.6.1.</div> <p>Converts an argument to a date to allow date comparison:</p> <pre>{% if date(user.created_at) &lt; date('-2days') %}\n    {# do something #}\n{% endif %}\n</pre> <p>The argument must be in one of PHP’s supported <a class=\"reference external\" href=\"http://php.net/manual/en/datetime.formats.php\">date and time formats</a>.</p> <p>You can pass a timezone as the second argument:</p> <pre>{% if date(user.created_at) &lt; date('-2days', 'Europe/Paris') %}\n    {# do something #}\n{% endif %}\n</pre> <p>If no argument is passed, the function returns the current date:</p> <pre>{% if date(user.created_at) &lt; date() %}\n    {# always! #}\n{% endif %}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>You can set the default timezone globally by calling <code class=\"notranslate\">setTimezone()</code> on the <code class=\"notranslate\">core</code> extension instance:</p> <pre>$twig = new Twig_Environment($loader);\n$twig-&gt;getExtension('core')-&gt;setTimezone('Europe/Paris');\n</pre> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">date</code>: The date</li> <li>\n<code class=\"notranslate\">timezone</code>: The timezone</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"cycle\" href=\"cycle\"> « cycle </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"dump\" href=\"dump\"> dump » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/date.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/date.html</a>\n  </p>\n</div>\n","functions/dump":"<h1 id=\"dump\">dump</h1> <div class=\"versionadded\"> <p><span>New in version 1.5: </span>The <code class=\"notranslate\">dump</code> function was added in Twig 1.5.</p> </div> <p>The <code class=\"notranslate\">dump</code> function dumps information about a template variable. This is mostly useful to debug a template that does not behave as expected by introspecting its variables:</p> <pre>{{ dump(user) }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>The <code class=\"notranslate\">dump</code> function is not available by default. You must add the <code class=\"notranslate\">Twig_Extension_Debug</code> extension explicitly when creating your Twig environment:</p> <pre>$twig = new Twig_Environment($loader, array(\n    'debug' =&gt; true,\n    // ...\n));\n$twig-&gt;addExtension(new Twig_Extension_Debug());\n</pre> <p class=\"last\">Even when enabled, the <code class=\"notranslate\">dump</code> function won't display anything if the <code class=\"notranslate\">debug</code> option on the environment is not enabled (to avoid leaking debug information on a production server).</p> </div> <p>In an HTML context, wrap the output with a <code class=\"notranslate\">pre</code> tag to make it easier to read:</p> <pre>&lt;pre&gt;\n    {{ dump(user) }}\n&lt;/pre&gt;\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">Using a <code class=\"notranslate\">pre</code> tag is not needed when <a class=\"reference external\" href=\"http://xdebug.org/docs/display\">XDebug</a> is enabled and <code class=\"notranslate\">html_errors</code> is <code class=\"notranslate\">on</code>; as a bonus, the output is also nicer with XDebug enabled.</p> </div> <p>You can debug several variables by passing them as additional arguments:</p> <pre>{{ dump(user, categories) }}\n</pre> <p>If you don't pass any value, all variables from the current context are dumped:</p> <pre>{{ dump() }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Internally, Twig uses the PHP <a class=\"reference external\" href=\"http://php.net/var_dump\">var_dump</a> function.</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">context</code>: The context to dump</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"date\" href=\"date\"> « date </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"include\" href=\"include\"> include » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/dump.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/dump.html</a>\n  </p>\n</div>\n","functions/include":"<h1 id=\"include\">include</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.12: </span>The <code class=\"notranslate\">include</code> function was added in Twig 1.12.</div> <p>The <code class=\"notranslate\">include</code> function returns the rendered content of a template:</p> <pre>{{ include('template.html') }}\n{{ include(some_var) }}\n</pre> <p>Included templates have access to the variables of the active context.</p> <p>If you are using the filesystem loader, the templates are looked for in the paths defined by it.</p> <p>The context is passed by default to the template but you can also pass additional variables:</p> <pre>{# template.html will have access to the variables from the current context and the additional ones provided #}\n{{ include('template.html', {foo: 'bar'}) }}\n</pre> <p>You can disable access to the context by setting <code class=\"notranslate\">with_context</code> to <code class=\"notranslate\">false</code>:</p> <pre>{# only the foo variable will be accessible #}\n{{ include('template.html', {foo: 'bar'}, with_context = false) }}\n</pre> <pre>{# no variables will be accessible #}\n{{ include('template.html', with_context = false) }}\n</pre> <p>And if the expression evaluates to a <code class=\"notranslate\">Twig_Template</code> object, Twig will use it directly:</p> <pre>// {{ include(template) }}\n\n$template = $twig-&gt;loadTemplate('some_template.twig');\n\n$twig-&gt;loadTemplate('template.twig')-&gt;display(array('template' =&gt; $template));\n</pre> <p>When you set the <code class=\"notranslate\">ignore_missing</code> flag, Twig will return an empty string if the template does not exist:</p> <pre>{{ include('sidebar.html', ignore_missing = true) }}\n</pre> <p>You can also provide a list of templates that are checked for existence before inclusion. The first template that exists will be rendered:</p> <pre>{{ include(['page_detailed.html', 'page.html']) }}\n</pre> <p>If <code class=\"notranslate\">ignore_missing</code> is set, it will fall back to rendering nothing if none of the templates exist, otherwise it will throw an exception.</p> <p>When including a template created by an end user, you should consider sandboxing it:</p> <pre>{{ include('page.html', sandboxed = true) }}\n</pre>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">template</code>: The template to render</li> <li>\n<code class=\"notranslate\">variables</code>: The variables to pass to the template</li> <li>\n<code class=\"notranslate\">with_context</code>: Whether to pass the current context variables or not</li> <li>\n<code class=\"notranslate\">ignore_missing</code>: Whether to ignore missing templates or not</li> <li>\n<code class=\"notranslate\">sandboxed</code>: Whether to sandbox the template or not</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"dump\" href=\"dump\"> « dump </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"max\" href=\"max\"> max » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/include.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/include.html</a>\n  </p>\n</div>\n","functions/max":"<h1 id=\"max\">max</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.15: </span>The <code class=\"notranslate\">max</code> function was added in Twig 1.15.</div> <p><code class=\"notranslate\">max</code> returns the biggest value of a sequence or a set of values:</p> <pre>{{ max(1, 3, 2) }}\n{{ max([1, 3, 2]) }}\n</pre> <p>When called with a mapping, max ignores keys and only compares values:</p> <pre>{{ max({2: \"e\", 1: \"a\", 3: \"b\", 5: \"d\", 4: \"c\"}) }}\n{# returns \"e\" #}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"include\" href=\"include\"> « include </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"min\" href=\"min\"> min » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/max.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/max.html</a>\n  </p>\n</div>\n","functions/min":"<h1 id=\"min\">min</h1> <div class=\"versionadded\"> <p><span>New in version 1.15: </span>The <code class=\"notranslate\">min</code> function was added in Twig 1.15.</p> </div> <p><code class=\"notranslate\">min</code> returns the lowest value of a sequence or a set of values:</p> <pre>{{ min(1, 3, 2) }}\n{{ min([1, 3, 2]) }}\n</pre> <p>When called with a mapping, min ignores keys and only compares values:</p> <pre>{{ min({2: \"e\", 3: \"a\", 1: \"b\", 5: \"d\", 4: \"c\"}) }}\n{# returns \"a\" #}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"max\" href=\"max\"> « max </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"parent\" href=\"parent\"> parent » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/min.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/min.html</a>\n  </p>\n</div>\n","functions/parent":"<h1 id=\"parent\">parent</h1> <p>When a template uses inheritance, it's possible to render the contents of the parent block when overriding a block by using the <code class=\"notranslate\">parent</code> function:</p> <pre>{% extends \"base.html\" %}\n\n{% block sidebar %}\n    &lt;h3&gt;Table Of Contents&lt;/h3&gt;\n    ...\n    {{ parent() }}\n{% endblock %}\n</pre> <p>The <code class=\"notranslate\">parent()</code> call will return the content of the <code class=\"notranslate\">sidebar</code> block as defined in the <code class=\"notranslate\">base.html</code> template.</p>  \n<div class=\"admonition admonition-seealso\">\n<a class=\"reference internal\" href=\"../tags/extends\">extends</a>, <a class=\"reference internal\" href=\"block\">block</a>, <a class=\"reference internal\" href=\"../tags/block\">block</a>\n</div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"min\" href=\"min\"> « min </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"random\" href=\"random\"> random » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/parent.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/parent.html</a>\n  </p>\n</div>\n","functions/random":"<h1 id=\"random\">random</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.5: </span>The <code class=\"notranslate\">random</code> function was added in Twig 1.5.</div> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.6: </span>String and integer handling was added in Twig 1.6.</div> <p>The <code class=\"notranslate\">random</code> function returns a random value depending on the supplied parameter type:</p> <ul class=\"simple\"> <li>a random item from a sequence;</li> <li>a random character from a string;</li> <li>a random integer between 0 and the integer parameter (inclusive).</li> </ul> <pre>{{ random(['apple', 'orange', 'citrus']) }} {# example output: orange #}\n{{ random('ABC') }}                         {# example output: C #}\n{{ random() }}                              {# example output: 15386094 (works as the native PHP mt_rand function) #}\n{{ random(5) }}                             {# example output: 3 #}\n</pre>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">values</code>: The values</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"parent\" href=\"parent\"> « parent </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"range\" href=\"range\"> range » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/random.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/random.html</a>\n  </p>\n</div>\n","functions/range":"<h1 id=\"range\">range</h1> <p>Returns a list containing an arithmetic progression of integers:</p> <pre>{% for i in range(0, 3) %}\n    {{ i }},\n{% endfor %}\n\n{# outputs 0, 1, 2, 3, #}\n</pre> <p>When step is given (as the third parameter), it specifies the increment (or decrement):</p> <pre>{% for i in range(0, 6, 2) %}\n    {{ i }},\n{% endfor %}\n\n{# outputs 0, 2, 4, 6, #}\n</pre> <p>The Twig built-in <code class=\"notranslate\">..</code> operator is just syntactic sugar for the <code class=\"notranslate\">range</code> function (with a step of 1):</p> <pre>{% for i in 0..3 %}\n    {{ i }},\n{% endfor %}\n</pre>  \n<div class=\"admonition admonition-tip\">\n<p class=\"first admonition-title\">Tip</p> <p class=\"last\">The <code class=\"notranslate\">range</code> function works as the native PHP <a class=\"reference external\" href=\"http://php.net/range\">range</a> function.</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">low</code>: The first value of the sequence.</li> <li>\n<code class=\"notranslate\">high</code>: The highest possible value of the sequence.</li> <li>\n<code class=\"notranslate\">step</code>: The increment between elements of the sequence.</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"random\" href=\"random\"> « random </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"source\" href=\"source\"> source » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/range.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/range.html</a>\n  </p>\n</div>\n","functions/source":"<h1 id=\"source\">source</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.15: </span>The <code class=\"notranslate\">source</code> function was added in Twig 1.15.</div> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.18.3: </span>The <code class=\"notranslate\">ignore_missing</code> flag was added in Twig 1.18.3.</div> <p>The <code class=\"notranslate\">source</code> function returns the content of a template without rendering it:</p> <pre>{{ source('template.html') }}\n{{ source(some_var) }}\n</pre> <p>When you set the <code class=\"notranslate\">ignore_missing</code> flag, Twig will return an empty string if the template does not exist:</p> <pre>{{ source('template.html', ignore_missing = true) }}\n</pre> <p>The function uses the same template loaders as the ones used to include templates. So, if you are using the filesystem loader, the templates are looked for in the paths defined by it.</p>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">name</code>: The name of the template to read</li> <li>\n<code class=\"notranslate\">ignore_missing</code>: Whether to ignore missing templates or not</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"range\" href=\"range\"> « range </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"template_from_string\" href=\"template_from_string\"> template_from_string » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/source.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/source.html</a>\n  </p>\n</div>\n","functions/template_from_string":"<h1 id=\"template-from-string\">template_from_string</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.11: </span>The <code class=\"notranslate\">template_from_string</code> function was added in Twig 1.11.</div> <p>The <code class=\"notranslate\">template_from_string</code> function loads a template from a string:</p> <pre>{{ include(template_from_string(\"Hello {{ name }}\")) }}\n{{ include(template_from_string(page.template)) }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p>The <code class=\"notranslate\">template_from_string</code> function is not available by default. You must add the <code class=\"notranslate\">Twig_Extension_StringLoader</code> extension explicitly when creating your Twig environment:</p> <pre>$twig = new Twig_Environment(...);\n$twig-&gt;addExtension(new Twig_Extension_StringLoader());\n</pre> </div>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\">Even if you will probably always use the <code class=\"notranslate\">template_from_string</code> function with the <code class=\"notranslate\">include</code> function, you can use it with any tag or function that takes a template as an argument (like the <code class=\"notranslate\">embed</code> or <code class=\"notranslate\">extends</code> tags).</p> </div>  <h2 id=\"arguments\">Arguments</h2> <ul class=\"simple\"> <li>\n<code class=\"notranslate\">template</code>: The template</li> </ul>    <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"source\" href=\"source\"> « source </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Tests\" href=\"../tests/index\"> Tests » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/functions/template_from_string.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/functions/template_from_string.html</a>\n  </p>\n</div>\n","tests/index":"<h1 id=\"tests\">Tests</h1> <div class=\"toctree-wrapper compound\"> <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"constant\"><code class=\"notranslate\">constant</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"defined\"><code class=\"notranslate\">defined</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"divisibleby\"><code class=\"notranslate\">divisible by</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"empty\"><code class=\"notranslate\">empty</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"even\"><code class=\"notranslate\">even</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"iterable\"><code class=\"notranslate\">iterable</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"null\"><code class=\"notranslate\">null</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"odd\"><code class=\"notranslate\">odd</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"sameas\"><code class=\"notranslate\">same as</code></a></li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/index.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/index.html</a>\n  </p>\n</div>\n","tests/constant":"<h1 id=\"constant\">constant</h1> <p><code class=\"notranslate\">constant</code> checks if a variable has the exact same value as a constant. You can use either global constants or class constants:</p> <pre>{% if post.status is constant('Post::PUBLISHED') %}\n    the status attribute is exactly the same as Post::PUBLISHED\n{% endif %}\n</pre> <p>You can test constants from object instances as well:</p> <pre>{% if post.status is constant('PUBLISHED', post) %}\n    the status attribute is exactly the same as Post::PUBLISHED\n{% endif %}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"Tests\" href=\"index\"> « Tests </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"defined\" href=\"defined\"> defined » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/constant.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/constant.html</a>\n  </p>\n</div>\n","tests/defined":"<h1 id=\"defined\">defined</h1> <p><code class=\"notranslate\">defined</code> checks if a variable is defined in the current context. This is very useful if you use the <code class=\"notranslate\">strict_variables</code> option:</p> <pre>{# defined works with variable names #}\n{% if foo is defined %}\n    ...\n{% endif %}\n\n{# and attributes on variables names #}\n{% if foo.bar is defined %}\n    ...\n{% endif %}\n\n{% if foo['bar'] is defined %}\n    ...\n{% endif %}\n</pre> <p>When using the <code class=\"notranslate\">defined</code> test on an expression that uses variables in some method calls, be sure that they are all defined first:</p> <pre>{% if var is defined and foo.method(var) is defined %}\n    ...\n{% endif %}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"constant\" href=\"constant\"> « constant </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"divisible by\" href=\"divisibleby\"> divisible by » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/defined.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/defined.html</a>\n  </p>\n</div>\n","tests/divisibleby":"<h1 id=\"divisible-by\">divisible by</h1> <div class=\"versionadded\"> <p><span>New in version 1.14.2: </span>The <code class=\"notranslate\">divisible by</code> test was added in Twig 1.14.2 as an alias for <code class=\"notranslate\">divisibleby</code>.</p> </div> <p><code class=\"notranslate\">divisible by</code> checks if a variable is divisible by a number:</p> <pre>{% if loop.index is divisible by(3) %}\n    ...\n{% endif %}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"defined\" href=\"defined\"> « defined </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"empty\" href=\"empty\"> empty » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/divisibleby.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/divisibleby.html</a>\n  </p>\n</div>\n","tests/empty":"<h1 id=\"empty\">empty</h1> <p><code class=\"notranslate\">empty</code> checks if a variable is empty:</p> <pre>{# evaluates to true if the foo variable is null, false, an empty array, or the empty string #}\n{% if foo is empty %}\n    ...\n{% endif %}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"divisible by\" href=\"divisibleby\"> « divisible by </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"even\" href=\"even\"> even » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/empty.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/empty.html</a>\n  </p>\n</div>\n","tests/even":"<h1 id=\"even\">even</h1> <p><code class=\"notranslate\">even</code> returns <code class=\"notranslate\">true</code> if the given number is even:</p> <pre>{{ var is even }}\n</pre>  \n<div class=\"admonition admonition-seealso\"><a class=\"reference internal\" href=\"odd\">odd</a></div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"empty\" href=\"empty\"> « empty </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"iterable\" href=\"iterable\"> iterable » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/even.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/even.html</a>\n  </p>\n</div>\n","tests/iterable":"<h1 id=\"iterable\">iterable</h1> <div class=\"versionadded\"> <span class=\"versionmodified\">New in version 1.7: </span>The iterable test was added in Twig 1.7.</div> <p><code class=\"notranslate\">iterable</code> checks if a variable is an array or a traversable object:</p> <pre>{# evaluates to true if the foo variable is iterable #}\n{% if users is iterable %}\n    {% for user in users %}\n        Hello {{ user }}!\n    {% endfor %}\n{% else %}\n    {# users is probably a string #}\n    Hello {{ users }}!\n{% endif %}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"even\" href=\"even\"> « even </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"null\" href=\"null\"> null » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/iterable.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/iterable.html</a>\n  </p>\n</div>\n","tests/null":"<h1 id=\"null\">null</h1> <p><code class=\"notranslate\">null</code> returns <code class=\"notranslate\">true</code> if the variable is <code class=\"notranslate\">null</code>:</p> <pre>{{ var is null }}\n</pre>  \n<div class=\"admonition admonition-note\">\n<p class=\"first admonition-title\">Note</p> <p class=\"last\"><code class=\"notranslate\">none</code> is an alias for <code class=\"notranslate\">null</code>.</p> </div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"iterable\" href=\"iterable\"> « iterable </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"odd\" href=\"odd\"> odd » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/null.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/null.html</a>\n  </p>\n</div>\n","tests/odd":"<h1 id=\"odd\">odd</h1> <p><code class=\"notranslate\">odd</code> returns <code class=\"notranslate\">true</code> if the given number is odd:</p> <pre>{{ var is odd }}\n</pre>  \n<div class=\"admonition admonition-seealso\"><a class=\"reference internal\" href=\"even\">even</a></div>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"null\" href=\"null\"> « null </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"same as\" href=\"sameas\"> same as » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/odd.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/odd.html</a>\n  </p>\n</div>\n","tests/sameas":"<h1 id=\"same-as\">same as</h1> <div class=\"versionadded\"> <p><span>New in version 1.14.2: </span>The <code class=\"notranslate\">same as</code> test was added in Twig 1.14.2 as an alias for <code class=\"notranslate\">sameas</code>.</p> </div> <p><code class=\"notranslate\">same as</code> checks if a variable is the same as another variable. This is the equivalent to <code class=\"notranslate\">===</code> in PHP:</p> <pre>{% if foo.attribute is same as(false) %}\n    the foo attribute really is the 'false' PHP value\n{% endif %}\n</pre>   <div class=\"navigation\" style=\"text-align: center\"> <a accesskey=\"P\" title=\"odd\" href=\"odd\"> « odd </a> <span class=\"separator\">|</span> <a accesskey=\"N\" title=\"Twig Extensions\" href=\"http://twig.sensiolabs.org/extensions/doc/index.html\"> Twig Extensions » </a> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2009&ndash;2016 by the Twig Team<br>Licensed under the three clause BSD license.<br>The Twig logo is &copy; 2010&ndash;2016 SensioLabs<br>\n    <a href=\"http://twig.sensiolabs.org/doc/tests/sameas.html\" class=\"_attribution-link\">http://twig.sensiolabs.org/doc/tests/sameas.html</a>\n  </p>\n</div>\n"}